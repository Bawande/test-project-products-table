(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tableColumns = exports.resultTableList = exports.products = void 0;
var products = [{
  id: 1,
  shortName: 'Мраморный щебень 1',
  longName: 'Мраморный щебень фр. 2-5 мм, 25кг',
  price: 1231,
  quantity: 12,
  total: 1231,
  weight: 3,
  shippingСost: 300,
  maxCapacity: 2400,
  isDeleted: false
}, {
  id: 2,
  shortName: 'Мраморный щебень 2',
  longName: 'Мраморный щебень фр. 2-5 мм, 25кг',
  price: 1331,
  quantity: 15,
  total: 1331,
  weight: 3,
  shippingСost: 300,
  maxCapacity: 2400,
  isDeleted: true
}, {
  id: 3,
  shortName: 'Мраморный щебень 3',
  longName: 'Мраморный щебень фр. 2-5 мм, 25кг',
  price: 1431,
  quantity: 17,
  total: 1431,
  weight: 3,
  shippingСost: 300,
  maxCapacity: 2400,
  isDeleted: false
}, {
  id: 4,
  shortName: 'Мраморный щебень 4',
  longName: 'Мраморный щебень фр. 2-5 мм, 25кг',
  price: 1531,
  quantity: 13,
  total: 1531,
  weight: 3,
  shippingСost: 300,
  maxCapacity: 2400,
  isDeleted: false
}, {
  id: 5,
  shortName: 'Мраморный щебень 5',
  longName: 'Мраморный щебень фр. 2-5 мм, 25кг',
  price: 1251,
  quantity: 14,
  total: 1251,
  weight: 3,
  shippingСost: 300,
  maxCapacity: 2400,
  isDeleted: false
}, {
  id: 6,
  shortName: 'Мраморный щебень 6',
  longName: 'Мраморный щебень фр. 2-5 мм, 25кг',
  price: 1371,
  quantity: 18,
  total: 1371,
  weight: 3,
  shippingСost: 300,
  maxCapacity: 2400,
  isDeleted: false
}, {
  id: 7,
  shortName: 'Мраморный щебень 7',
  longName: 'Мраморный щебень фр. 2-5 мм, 25кг',
  price: 1351,
  quantity: 9,
  total: 1351,
  weight: 3,
  shippingСost: 300,
  maxCapacity: 2400,
  isDeleted: false
}];
exports.products = products;
var tableColumns = [{
  id: 0,
  key: 'index',
  type: 'SYSTEM',
  // SYSTEM | DATA
  columnOptions: {
    title: 'Номер',
    lable: 'Номер',
    validated: '',
    width: '48px',
    isAutocomplete: false,
    isDisplay: true,
    isAlwaysVisible: true,
    isResize: false,
    isDraggable: false,
    isEditable: false,
    mediaQuery: ['desktop']
  }
}, {
  id: 1,
  key: 'action',
  type: 'SYSTEM',
  // SYSTEM | DATA
  columnOptions: {
    title: 'Д',
    lable: 'Действие',
    validated: '',
    width: '22px',
    isAutocomplete: false,
    isDisplay: true,
    isAlwaysVisible: true,
    isResize: false,
    isDraggable: false,
    isEditable: false,
    mediaQuery: ['desktop', 'tablet', 'mobile']
  }
}, {
  id: 3,
  key: 'longName',
  type: 'DATA',
  // SYSTEM | DATA
  columnOptions: {
    title: 'Наименование еденицы',
    lable: 'Наименование еденицы',
    validated: 'text',
    width: 2.85,
    isAutocomplete: true,
    isDisplay: true,
    isAlwaysVisible: true,
    isResize: true,
    isDraggable: true,
    isEditable: true,
    mediaQuery: ['desktop', 'tablet', 'mobile']
  }
}, {
  id: 4,
  key: 'price',
  type: 'DATA',
  // SYSTEM | DATA
  columnOptions: {
    title: 'Цена',
    lable: 'Цена',
    validated: 'number',
    width: 1,
    isAutocomplete: false,
    isDisplay: true,
    isAlwaysVisible: true,
    isResize: true,
    isDraggable: true,
    isEditable: true,
    mediaQuery: ['desktop', 'tablet', 'mobile']
  }
}, {
  id: 5,
  key: 'quantity',
  type: 'DATA',
  // SYSTEM | DATA
  columnOptions: {
    title: 'Кол-во',
    lable: 'Кол-во',
    validated: 'number',
    width: 1,
    isAutocomplete: false,
    isDisplay: true,
    isAlwaysVisible: true,
    isResize: true,
    isDraggable: true,
    isEditable: true,
    mediaQuery: ['desktop', 'tablet', 'mobile']
  }
}, {
  id: 6,
  key: 'shortName',
  type: 'DATA',
  // SYSTEM | DATA
  columnOptions: {
    title: 'Название товара',
    lable: 'Название товара',
    validated: 'text',
    width: '10%',
    isAutocomplete: true,
    isDisplay: true,
    isAlwaysVisible: false,
    isResize: true,
    isDraggable: true,
    isEditable: true,
    mediaQuery: ['desktop', 'tablet', 'mobile']
  }
}, {
  id: 10,
  key: 'weight',
  type: 'DATA',
  // SYSTEM | DATA
  columnOptions: {
    title: 'Вес',
    lable: 'Вес',
    validated: '',
    width: 0.63,
    isAutocomplete: false,
    isDisplay: false,
    isAlwaysVisible: false,
    isResize: true,
    isDraggable: true,
    isEditable: true,
    mediaQuery: ['desktop', 'tablet', 'mobile']
  }
}, {
  id: 8,
  key: 'shippingСost',
  type: 'DATA',
  // SYSTEM | DATA
  columnOptions: {
    title: 'Цена доставки, руб',
    lable: 'Цена доставки, руб',
    validated: 'number',
    width: '10%',
    isAutocomplete: false,
    isDisplay: false,
    isAlwaysVisible: false,
    isResize: true,
    isDraggable: true,
    isEditable: false,
    mediaQuery: ['desktop', 'tablet', 'mobile']
  }
}, {
  id: 9,
  key: 'maxCapacity',
  type: 'DATA',
  // SYSTEM | DATA
  columnOptions: {
    title: 'Max грузоподъемность, кг',
    lable: 'Max грузоподъемность, кг',
    validated: 'number',
    width: 1,
    isAutocomplete: false,
    isDisplay: false,
    isAlwaysVisible: false,
    isResize: true,
    isDraggable: true,
    isEditable: true,
    mediaQuery: ['desktop', 'tablet', 'mobile']
  }
}, {
  id: 7,
  key: 'total',
  type: 'DATA',
  // SYSTEM | DATA
  columnOptions: {
    title: 'Итого',
    lable: 'Итого',
    validated: '',
    width: 0.63,
    isAutocomplete: false,
    isDisplay: true,
    isAlwaysVisible: true,
    isResize: true,
    isDraggable: false,
    isEditable: true,
    mediaQuery: ['desktop', 'tablet', 'mobile']
  }
}];
exports.tableColumns = tableColumns;
var resultTableList = [{
  id: 0,
  key: 'sum',
  label: 'Сумма',
  unit: 'руб',
  countKey: 'total',
  list: 'general',
  result: null
}, {
  id: 1,
  key: 'quantity',
  label: 'Кол-во',
  unit: 'шт',
  countKey: 'quantity',
  list: 'general',
  result: null
}, {
  id: 2,
  key: 'total_weight',
  label: 'Общий вес',
  unit: 'кг',
  countKey: 'weight',
  list: 'general',
  result: null
}, {
  id: 3,
  key: 'total_sum',
  label: 'Общая сумма',
  unit: 'руб',
  countKey: 'total',
  list: 'resulting',
  result: null
}];
exports.resultTableList = resultTableList;

},{}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _HeaderTable = _interopRequireDefault(require("./lib/HeaderTable"));
var _RowsTable = _interopRequireDefault(require("./lib/RowsTable"));
var _ResultTable = _interopRequireDefault(require("./lib/ResultTable"));
var _ContextMenu = _interopRequireDefault(require("./lib/ContextMenu"));
var _ToolsTableMenu = _interopRequireDefault(require("./lib/ToolsTableMenu"));
var _slowDownEvents = require("./helpers/slowDownEvents");
var _allData = require("../data/allData");
var _server = require("./helpers/server");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var ProductTable = /*#__PURE__*/function () {
  function ProductTable(extOptions) {
    _classCallCheck(this, ProductTable);
    var defaultsOptions = {
      selectorTable: 'id-table',
      selectorToolbar: 'id-toolbar',
      selectorContextMenu: 'id-context-menu',
      selectorResultTable: 'id-result-table',
      //
      classParrentTable: 'table-wrapper',
      classTable: 'table',
      //
      debag: true
    };

    // Options

    this.options = Object.assign(extOptions || {}, defaultsOptions);
    this.options.initTableWidth = '99%';

    // Data

    this.data = {};
    this.data.dataProducts = {};
    this.data.optionDataTable = {};
    this.data.optionTotalTable = {};
    this.data.isNewData = false;

    // Nodes

    this.nodes = {};
    this.nodes.$tableParent = undefined;
    this.nodes.$contextMenuParent = undefined;
    this.nodes.$totalTable = undefined;
    this.nodes.$toolbar = undefined;
    this.initParentNodes();
    this.nodes.$table = undefined;
    this.nodes.$tableHeader = undefined;
    this.nodes.$tableBody = undefined;

    // bind

    this.getDataProducts = this.getDataProducts.bind(this);
    this.setDataProducts = this.setDataProducts.bind(this);
    this.getOptionDataTable = this.getOptionDataTable.bind(this);
    this.setOptionDataTable = this.setOptionDataTable.bind(this);
    this.getOptionsResultTable = this.getOptionsResultTable.bind(this);
    this.setOptionsResultTable = this.setOptionsResultTable.bind(this);
    this.setServerDataProducts = this.setServerDataProducts.bind(this);
    this.renderTable = this.renderTable.bind(this);
    this.renderResult = this.renderResult.bind(this);
    this.createNewRows = this.createNewRows.bind(this);
    this.saveChanges = this.saveChanges.bind(this);
    this.getIsNewData = this.getIsNewData.bind(this);
    this.setIsNewData = this.setIsNewData.bind(this);
    this.getMediaQuery = this.getMediaQuery.bind(this);

    // create parent nodes

    this.createTable();

    // initData

    this.initData();
  } // constructor

  // initData
  _createClass(ProductTable, [{
    key: "initData",
    value: function initData() {
      var _this = this;
      Promise.all([(0, _server.getServerAllProducts)(), (0, _server.getServerOptionsDataTable)(), (0, _server.getServerOptionsResultTable)()]).then(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 3),
          dataProducts = _ref2[0],
          optionsDataTable = _ref2[1],
          optionTotalTable = _ref2[2];
        console.warn('Load server data...');
        _this.setDataProducts(dataProducts);
        _this.setOptionDataTable(optionsDataTable);
        _this.setOptionsResultTable(optionTotalTable);
      })["catch"](function (error) {
        console.error(error, 'Error server data!');
        console.warn('Load local data...');
        _this.setDataProducts(_allData.products);
        _this.setOptionDataTable(_allData.tableColumns);
        _this.setOptionsResultTable(_allData.resultTableList);
      }).then(function () {
        _this.initComponents();
      }).then(function () {
        window.addEventListener('resize', (0, _slowDownEvents.throttle)(_this.renderTable, 60));
        _this.render();
      });
    }
  }, {
    key: "initComponents",
    value: function initComponents() {
      this.contextMenu = new _ContextMenu["default"]({
        parentBlock: this.nodes.$contextMenuParent,
        getOptionDataTable: this.getOptionDataTable,
        setOptionDataTable: this.setOptionDataTable,
        renderTable: this.renderTable,
        getMediaQuery: this.getMediaQuery
      });
      this.headerTable = new _HeaderTable["default"]({
        parentBlock: this.nodes.$tableHeader,
        getOptionDataTable: this.getOptionDataTable,
        setOptionDataTable: this.setOptionDataTable,
        renderTable: this.renderTable,
        getMediaQuery: this.getMediaQuery
      });
      this.rowsTable = new _RowsTable["default"]({
        parentBlock: this.nodes.$tableBody,
        getDataProducts: this.getDataProducts,
        setDataProducts: this.setDataProducts,
        getOptionDataTable: this.getOptionDataTable,
        setIsNewData: this.setIsNewData,
        setServerDataProducts: this.setServerDataProducts,
        getMediaQuery: this.getMediaQuery,
        renderResult: this.renderResult
      });
      this.toolsTableMenu = new _ToolsTableMenu["default"]({
        parentBlock: this.nodes.$toolbar,
        createNewRows: this.createNewRows,
        saveChanges: this.saveChanges,
        getIsNewData: this.getIsNewData
      });
      this.resultTable = new _ResultTable["default"]({
        parentBlock: this.nodes.$totalTable,
        getDataProducts: this.getDataProducts,
        getOptionsResultTable: this.getOptionsResultTable
      });
    }
  }, {
    key: "initParentNodes",
    value: function initParentNodes() {
      var _this$options = this.options,
        selectorTable = _this$options.selectorTable,
        selectorContextMenu = _this$options.selectorContextMenu,
        selectorResultTable = _this$options.selectorResultTable,
        selectorToolbar = _this$options.selectorToolbar;
      this.nodes.$tableParent = document.getElementById(selectorTable);
      this.nodes.$contextMenuParent = document.getElementById(selectorContextMenu);
      this.nodes.$contextMenuParent.style.position = 'relative';
      this.nodes.$totalTable = document.getElementById(selectorResultTable);
      this.nodes.$toolbar = document.getElementById(selectorToolbar);
    }
  }, {
    key: "render",
    value: function render() {
      this.renderTable();
      this.contextMenu.render();
      this.toolsTableMenu.render();
    }
  }, {
    key: "renderTable",
    value: function renderTable() {
      this.headerTable.render();
      this.rowsTable.render();
      this.resultTable.render();
    }
  }, {
    key: "renderResult",
    value: function renderResult() {
      this.resultTable.render();
    }

    // GET
  }, {
    key: "getOptionDataTable",
    value: function getOptionDataTable() {
      return JSON.parse(JSON.stringify(this.data.optionDataTable));
    }
  }, {
    key: "getOptionsResultTable",
    value: function getOptionsResultTable() {
      return JSON.parse(JSON.stringify(this.data.optionTotalTable));
    }
  }, {
    key: "getDataProducts",
    value: function getDataProducts() {
      return JSON.parse(JSON.stringify(this.data.dataProducts));
    }
  }, {
    key: "getIsNewData",
    value: function getIsNewData() {
      return this.data.isNewData;
    }
  }, {
    key: "getMediaQuery",
    value: function getMediaQuery() {
      var mediaQuery = 'desktop';
      if (window.matchMedia('(max-width: 768px)').matches) {
        mediaQuery = 'tablet';
      }
      if (window.matchMedia('(max-width: 480px)').matches) {
        mediaQuery = 'mobile';
      }
      return mediaQuery;
    }

    // SET
  }, {
    key: "setOptionsResultTable",
    value: function setOptionsResultTable(value) {
      // console.log('setOptionsResultTable > value:', value);
      if (!Array.isArray(value)) {
        console.error('Error change rows data!');
        return;
      }
      this.data.optionTotalTable = value;
    }
  }, {
    key: "setDataProducts",
    value: function setDataProducts(value) {
      // console.log('setDataProducts > value:', value);
      if (!Array.isArray(value)) {
        console.error('Error change rows data!');
        return;
      }
      this.data.dataProducts = JSON.parse(JSON.stringify(value));
    }
  }, {
    key: "setServerDataProducts",
    value: function setServerDataProducts(value, fun) {
      var _this2 = this;
      if (!Array.isArray(value)) {
        console.error('Error change rows data!');
        return;
      }
      (0, _server.setServerAllProducts)(value).then(function (response) {
        console.log(response);
        return response.json();
      }).then(function (json) {
        console.log(Object.values(json));
        _this2.setDataProducts(value);
        _this2.setIsNewData(false);
        _this2.renderTable();
      })["catch"](function (error) {
        console.error(error, 'Error server');
      });
    }
  }, {
    key: "setOptionDataTable",
    value: function setOptionDataTable(value) {
      // console.log('setOptionDataTable > value:', value);
      if (!Array.isArray(value)) {
        console.error('Error change columns data!');
        return;
      }
      this.data.optionDataTable = JSON.parse(JSON.stringify(value));
    }
  }, {
    key: "setIsNewData",
    value: function setIsNewData(value) {
      if (typeof value !== 'boolean') {
        console.error('Error change value IsNewData!');
        return;
      }
      this.data.isNewData = value;
      this.toolsTableMenu.render();
    }
  }, {
    key: "createNewRows",
    value: function createNewRows() {
      this.rowsTable.addNewRows();
    }
  }, {
    key: "createTable",
    value: function createTable() {
      var $tableParent = this.nodes.$tableParent;
      var _this$options2 = this.options,
        classParrentTable = _this$options2.classParrentTable,
        classTable = _this$options2.classTable,
        initTableWidth = _this$options2.initTableWidth;
      if (!$tableParent) {
        console.error('Error, table has no parent! key id="id-table"');
        return;
      }
      $tableParent.innerHTML = '';
      $tableParent.classList = classParrentTable;
      var $table = document.createElement('table');
      $table.id = 'id-testing-table';
      $table.className = classTable;
      $table.className = classTable;
      $table.style.tableLayout = 'fixed';
      $table.style.width = initTableWidth;
      $tableParent.appendChild($table);
      this.nodes.$table = $table;
      var tableHeader = document.createElement('thead');
      $table.appendChild(tableHeader);
      this.nodes.$tableHeader = tableHeader;
      var tableBody = document.createElement('tbody');
      $table.appendChild(tableBody);
      this.nodes.$tableBody = tableBody;
    }
  }, {
    key: "saveChanges",
    value: function saveChanges() {
      this.rowsTable.saveChangeRows();
    }
  }]);
  return ProductTable;
}();
var _default = ProductTable;
exports["default"] = _default;

},{"../data/allData":1,"./helpers/server":4,"./helpers/slowDownEvents":5,"./lib/ContextMenu":6,"./lib/HeaderTable":7,"./lib/ResultTable":8,"./lib/RowsTable":9,"./lib/ToolsTableMenu":10}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
function autocomplete($input, arrAutocomplete) {
  var classWrapper = 'table-body__autocomplete-wrapper';
  var classList = 'table-body__autocomplete-list';
  var classItem = 'table-body__autocomplete-item';
  var classActive = 'active';
  var currentFocus;
  var dataID = $input.dataset.dataId;
  $input.addEventListener('focus', handlerFocus);
  $input.addEventListener('blur', handlerBlur);

  // function handlerFocus

  function handlerFocus(e) {
    // console.log('focus');
    addEvents();
  }

  // function handlerBlur

  function handlerBlur(e) {
    // console.log('Blur');
    removeEvents();
  }

  // function removeEvents

  function removeEvents() {
    $input.removeEventListener('input', handlerInput);
    $input.removeEventListener('keydown', handlerKeydown);
    document.removeEventListener('scroll', handlerScrollDoc);
  }

  // function addEvents

  function addEvents() {
    $input.addEventListener('input', handlerInput);
    $input.addEventListener('keydown', handlerKeydown);
    document.addEventListener('scroll', handlerScrollDoc);
  }

  // function handlerScrollDoc

  function handlerScrollDoc(e) {
    closeAllLists();
    console.log('scroll');
    // removeEvents();
  }

  // function handlerInput

  function handlerInput(e) {
    var inputValue = e.target.value;
    closeAllLists();
    if (!inputValue.trim()) {
      return false;
    }
    currentFocus = -1;
    var $wrapper = document.createElement('div');
    $wrapper.classList = classWrapper;
    $wrapper.style.position = 'absolute';
    $wrapper.style.display = 'none';
    $wrapper.style.zIndex = '999';
    e.target.parentNode.appendChild($wrapper);
    var $list = document.createElement('ul');
    $list.id = dataID;
    $list.classList = classList;
    // $list.style.position = 'fixed';
    $list.style.width = "".concat($input.getBoundingClientRect().width, "px");

    // console.log($input.getBoundingClientRect().width);

    $wrapper.appendChild($list);
    for (var i = 0; i < arrAutocomplete.length; i += 1) {
      var string = arrAutocomplete[i];
      // console.log(string);
      if (string.substr(0, inputValue.length).toUpperCase() === inputValue.toUpperCase()) {
        $wrapper.style.display = '';
        var $item = document.createElement('li');
        $item.classList = classItem;
        $item.innerHTML = "<strong>".concat(string.substr(0, inputValue.length), "</strong>");
        $item.innerHTML += string.substr(inputValue.length);
        $item.innerHTML += "<input type='hidden' value='".concat(string, "'>");
        $item.addEventListener('click', function (event) {
          // console.log('click');
          $input.value = event.currentTarget.getElementsByTagName('input')[0].value;
          closeAllLists();
        });
        $list.appendChild($item);
      }
    }
  }

  // function handlerKeydown
  // TODO: доделать выбор элемента по ID...

  function handlerKeydown(e) {
    var $list = document.getElementById(dataID);
    if ($list) $list = $list.getElementsByTagName('li');

    // console.log(e.keyCode);

    if (e.keyCode === 40) {
      e.preventDefault();
      currentFocus += 1;
      addActiveClass($list);
    } else if (e.keyCode === 38) {
      // вверх
      currentFocus -= 1;
      addActiveClass($list);
    } else if (e.keyCode === 13) {
      if (currentFocus > -1) {
        if ($list) $list[currentFocus].click();
      }
    } else if (e.keyCode === 9 || e.keyCode === 27) {
      closeAllLists();
    }
  }

  // function addActiveClass

  function addActiveClass($list) {
    if (!$list) return false;
    removeActiveClass($list);
    if (currentFocus >= $list.length) currentFocus = 0;
    if (currentFocus < 0) currentFocus = $list.length - 1;
    $list[currentFocus].classList.add(classActive);
    $list[currentFocus].scrollIntoView();
  }

  // function removeActiveClass

  function removeActiveClass($list) {
    for (var i = 0; i < $list.length; i += 1) {
      $list[i].classList.remove(classActive);
    }
  }

  // function closeAllLists

  function closeAllLists(elmnt) {
    var $list = document.getElementsByClassName(classWrapper);
    for (var i = 0; i < $list.length; i += 1) {
      if (elmnt !== $list[i] && elmnt !== $input) {
        $list[i].parentNode.removeChild($list[i]);
      }
    }
  }
  document.addEventListener('click', function (e) {
    closeAllLists(e.target);
  });
}
var _default = autocomplete;
exports["default"] = _default;

},{}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getServerAllProducts = getServerAllProducts;
exports.getServerOptionsDataTable = getServerOptionsDataTable;
exports.getServerOptionsResultTable = getServerOptionsResultTable;
exports.setServerAllProducts = setServerAllProducts;
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
var url = '../data/';
function getServerAllProducts() {
  return _getServerAllProducts.apply(this, arguments);
}
function _getServerAllProducts() {
  _getServerAllProducts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
    var response, data;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return fetch("".concat(url, "dataProducts.json"));
        case 2:
          response = _context.sent;
          _context.next = 5;
          return response.json();
        case 5:
          data = _context.sent;
          return _context.abrupt("return", data);
        case 7:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return _getServerAllProducts.apply(this, arguments);
}
function getServerOptionsDataTable() {
  return _getServerOptionsDataTable.apply(this, arguments);
}
function _getServerOptionsDataTable() {
  _getServerOptionsDataTable = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
    var response, data;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          _context2.next = 2;
          return fetch("".concat(url, "optionsDataTable.json"));
        case 2:
          response = _context2.sent;
          _context2.next = 5;
          return response.json();
        case 5:
          data = _context2.sent;
          return _context2.abrupt("return", data);
        case 7:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
  return _getServerOptionsDataTable.apply(this, arguments);
}
function getServerOptionsResultTable() {
  return _getServerOptionsResultTable.apply(this, arguments);
}
function _getServerOptionsResultTable() {
  _getServerOptionsResultTable = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
    var response, data;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return fetch("".concat(url, "optionsResultTable.json"));
        case 2:
          response = _context3.sent;
          _context3.next = 5;
          return response.json();
        case 5:
          data = _context3.sent;
          return _context3.abrupt("return", data);
        case 7:
        case "end":
          return _context3.stop();
      }
    }, _callee3);
  }));
  return _getServerOptionsResultTable.apply(this, arguments);
}
function setServerAllProducts(_x) {
  return _setServerAllProducts.apply(this, arguments);
}
function _setServerAllProducts() {
  _setServerAllProducts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(data) {
    var response, answer;
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          _context4.next = 2;
          return fetch('https://jsonplaceholder.typicode.com/posts', {
            method: 'POST',
            body: JSON.stringify(data),
            headers: {
              'Content-type': 'application/json; charset=UTF-8'
            }
          });
        case 2:
          response = _context4.sent;
          _context4.next = 5;
          return response;
        case 5:
          answer = _context4.sent;
          return _context4.abrupt("return", answer);
        case 7:
        case "end":
          return _context4.stop();
      }
    }, _callee4);
  }));
  return _setServerAllProducts.apply(this, arguments);
}

},{}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.debounce = debounce;
exports.throttle = void 0;
var throttle = function throttle(func, ms) {
  var locked = false;
  return function () {
    if (locked) return;
    var context = this;
    var args = arguments;
    locked = true;
    setTimeout(function () {
      func.apply(context, args);
      locked = false;
    }, ms);
  };
};
exports.throttle = throttle;
function debounce(func, ms, now) {
  var onLast;
  return function () {
    var context = this;
    var args = arguments;
    var onFirst = now && !onLast;
    clearTimeout(onLast);
    onLast = setTimeout(function () {
      onLast = null;
      if (!now) func.apply(context, args);
    }, ms);
    if (onFirst) func.apply(context, args);
  };
}

},{}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var ContextMenu = /*#__PURE__*/function () {
  function ContextMenu(props) {
    _classCallCheck(this, ContextMenu);
    var defaultsOptions = {
      classParent: 'context-menu',
      classButtonMenu: 'context-menu__toggle',
      classMenuList: 'context-menu__list',
      classMenuItem: 'context-menu__item',
      classSubMenu: 'context-menu__sublist',
      classTitleSubMenu: 'context-menu__title-sublist',
      classTitleCheckbox: 'context-menu__checkbox'
    };
    var parentBlock = props.parentBlock,
      getOptionDataTable = props.getOptionDataTable,
      setOptionDataTable = props.setOptionDataTable,
      renderTable = props.renderTable,
      getMediaQuery = props.getMediaQuery;
    this.options = Object.assign(defaultsOptions);
    Object.assign(this, {
      parentBlock: parentBlock,
      getOptionDataTable: getOptionDataTable,
      setOptionDataTable: setOptionDataTable,
      renderTable: renderTable,
      getMediaQuery: getMediaQuery
    });
    this.menuItems = [{
      id: 0,
      key: 'columns',
      lable: 'Отображение столбцов',
      items: this.getOptionDataTable()
    }];
    this.node = {};
    this.node.$menuList = undefined;
    this.node.$menuButtonToggler = undefined;

    // bind this
    this.handlerToggleMenu = this.handlerToggleMenu.bind(this);
    this.handlerMouseEnterMenuItem = this.handlerMouseEnterMenuItem.bind(this);
    this.hendlerOutsideClickEvent = this.hendlerOutsideClickEvent.bind(this);
    this.handlerChangeCheckbox = this.handlerChangeCheckbox.bind(this);
  } // constructor
  _createClass(ContextMenu, [{
    key: "render",
    value: function render() {
      if (this.getMediaQuery() !== 'desktop') {
        this.сlearParentBlock();
        return;
      }
      if (!this.checkData()) {
        console.log('Error DATA, context menu data not found');
        return;
      }
      if (!this.checkParent()) {
        console.log('Error DOMElement, parent block for context menu not found');
        return;
      }
      this.сlearParentBlock();
      this.create();
    }
  }, {
    key: "checkParent",
    value: function checkParent() {
      if (this.parentBlock && this.parentBlock instanceof HTMLElement) {
        return true;
      }
      return false;
    }
  }, {
    key: "checkData",
    value: function checkData() {
      if (Array.isArray(this.getOptionDataTable()) && this.getOptionDataTable().length !== 0) {
        return true;
      }
      return false;
    }
  }, {
    key: "\u0441learParentBlock",
    value: function сlearParentBlock() {
      if (this.parentBlock.hasChildNodes()) {
        this.parentBlock.innerHTML = '';
      }
    }
  }, {
    key: "create",
    value: function create() {
      var classParent = this.options.classParent;
      this.parentBlock.classList.add(classParent);
      this.createToggleButton();
      this.createMenu();
    }
  }, {
    key: "createToggleButton",
    value: function createToggleButton() {
      var _this = this;
      var classButtonMenu = this.options.classButtonMenu;
      var $toggleButton = document.createElement('button');
      $toggleButton.className = classButtonMenu;
      this.parentBlock.appendChild($toggleButton);
      this.node.$menuButtonToggler = $toggleButton;
      setTimeout(function () {
        $toggleButton.addEventListener('click', _this.handlerToggleMenu);
      }, 0);
    }
  }, {
    key: "createMenu",
    value: function createMenu() {
      var _this2 = this;
      var _this$options = this.options,
        classMenuList = _this$options.classMenuList,
        classSubMenu = _this$options.classSubMenu,
        classMenuItem = _this$options.classMenuItem,
        classTitleSubMenu = _this$options.classTitleSubMenu,
        classTitleCheckbox = _this$options.classTitleCheckbox;
      var data = this.menuItems;

      // create menu list
      var $menuList = document.createElement('ul');
      $menuList.className = classMenuList;
      $menuList.style.position = 'absolute';
      $menuList.style.display = 'none';
      this.node.$menuList = $menuList;
      this.parentBlock.appendChild($menuList);

      // create menu items
      var $menuItemsFragment = document.createDocumentFragment();
      [].forEach.call(data, function (item) {
        var lable = item.lable,
          items = item.items;
        var $listItem = document.createElement('li');
        $listItem.className = "".concat(classMenuItem, " drop-down");
        $listItem.addEventListener('mouseenter', _this2.handlerMouseEnterMenuItem);
        var $label = document.createElement('span');
        $label.innerText = lable;
        $listItem.appendChild($label);
        if (Array.isArray(items)) {
          // create submenu list
          var $menuSublist = document.createElement('ul');
          $menuSublist.className = classSubMenu;
          $menuSublist.style.position = 'absolute';
          $menuSublist.style.display = 'none';
          $listItem.appendChild($menuSublist);
          var $labelSublist = document.createElement('div');
          $labelSublist.className = classTitleSubMenu;
          $labelSublist.innerText = lable;
          $menuSublist.appendChild($labelSublist);

          //   create submenu items
          var $menuSubitemsFragment = document.createDocumentFragment();
          [].forEach.call(items, function (subitem) {
            var id = subitem.id,
              key = subitem.key,
              type = subitem.type;
            var _subitem$columnOption = subitem.columnOptions,
              lable = _subitem$columnOption.lable,
              isDisplay = _subitem$columnOption.isDisplay,
              isAlwaysVisible = _subitem$columnOption.isAlwaysVisible;
            if (!isAlwaysVisible && type === 'DATA') {
              var $listSubitem = document.createElement('li');
              $listSubitem.className = classMenuItem;
              var $sublable = document.createElement('div');
              $listSubitem.appendChild($sublable);
              var $checkbox = document.createElement('input');
              $checkbox.type = 'checkbox';
              $checkbox.name = key;
              $checkbox.className = classTitleCheckbox;
              $checkbox.value = lable;
              $checkbox.checked = isDisplay;
              $checkbox.id = "id-".concat(key, "-").concat(id);
              $checkbox.dataset.columnId = id;
              $sublable.appendChild($checkbox);
              $checkbox.addEventListener('change', _this2.handlerChangeCheckbox);
              var $labelCheckbox = document.createElement('label');
              $labelCheckbox.htmlFor = "id-".concat(key, "-").concat(id);
              $sublable.appendChild($labelCheckbox);
              var $labelText = document.createTextNode(lable);
              $labelCheckbox.appendChild($labelText);
              $menuSubitemsFragment.appendChild($listSubitem);
            } // if(type !== 'SYSTEM' && isEditable)
          });

          $menuSublist.appendChild($menuSubitemsFragment);
        }
        $menuItemsFragment.appendChild($listItem);
      });
      $menuList.appendChild($menuItemsFragment);
    }
  }, {
    key: "openMenuList",
    value: function openMenuList() {
      var _this3 = this;
      var _this$node = this.node,
        $menuList = _this$node.$menuList,
        $menuButtonToggler = _this$node.$menuButtonToggler;
      $menuList.style.display = '';
      $menuList.classList.add('open');
      $menuButtonToggler.classList.add('open');
      setTimeout(function () {
        document.addEventListener('click', _this3.hendlerOutsideClickEvent);
      }, 0);
    }
  }, {
    key: "closeMenuList",
    value: function closeMenuList() {
      var _this$node2 = this.node,
        $menuList = _this$node2.$menuList,
        $menuButtonToggler = _this$node2.$menuButtonToggler;
      $menuList.style.display = 'none';
      $menuList.classList.remove('open');
      $menuButtonToggler.classList.remove('open');
      document.removeEventListener('click', this.hendlerOutsideClickEvent);
    }

    // handlers
  }, {
    key: "handlerToggleMenu",
    value: function handlerToggleMenu(event) {
      if (event.target.classList.contains('open')) {
        this.closeMenuList();
      } else {
        this.openMenuList();
      }
    }
  }, {
    key: "handlerMouseEnterMenuItem",
    value: function handlerMouseEnterMenuItem(event) {
      var menuItem = event.target;
      var menuList = menuItem.querySelector('ul');
      var hendlerMoseLive = function hendlerMoseLive() {
        menuList.style.display = 'none';
        menuItem.removeEventListener('mouseleave', hendlerMoseLive);
      };
      menuList.style.display = '';
      menuItem.addEventListener('mouseleave', hendlerMoseLive);
    }
  }, {
    key: "hendlerOutsideClickEvent",
    value: function hendlerOutsideClickEvent(event) {
      var $menuList = this.node.$menuList;
      var $elemEvent = event.target;
      if ($menuList.classList.contains('open')) {
        if (!$menuList.contains($elemEvent)) {
          this.closeMenuList();
          document.removeEventListener('click', this.hendlerOutsideClickEvent);
        }
      }
    }
  }, {
    key: "handlerChangeCheckbox",
    value: function handlerChangeCheckbox(event) {
      var _this4 = this;
      var columns = this.getOptionDataTable();
      var $checkbox = event.target;
      var columnId = $checkbox.dataset.columnId;
      var checked = $checkbox.checked;
      var arr = [].map.call(columns, function (column) {
        if (column.id === Number(columnId)) {
          return _objectSpread(_objectSpread({}, column), {}, {
            columnOptions: _objectSpread(_objectSpread({}, column.columnOptions), {}, {
              isDisplay: checked
            })
          });
        }
        return column;
      });
      setTimeout(function () {
        _this4.setOptionDataTable(arr);
        _this4.renderTable();
      }, 0);
    }
  }, {
    key: "destroy",
    value: function destroy() {
      console.log('destroy(), no functionality!');
    }
  }]);
  return ContextMenu;
}();
var _default = ContextMenu;
exports["default"] = _default;

},{}],7:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var HeaderTable = /*#__PURE__*/function () {
  function HeaderTable(props) {
    _classCallCheck(this, HeaderTable);
    var defaultsOptions = {
      classParent: 'table-header',
      classHeaderRow: 'table-header__row',
      classHeaderColumn: 'table-header__column',
      classHeaderContent: 'table-header__content',
      classColumnResizer: 'table-header__resizer',
      //
      minWidthColumn: 70
    };
    var parentBlock = props.parentBlock,
      getOptionDataTable = props.getOptionDataTable,
      setOptionDataTable = props.setOptionDataTable,
      callData = props.callData,
      renderTable = props.renderTable,
      getMediaQuery = props.getMediaQuery;
    Object.assign(this, {
      parentBlock: parentBlock,
      getOptionDataTable: getOptionDataTable,
      setOptionDataTable: setOptionDataTable,
      callData: callData,
      renderTable: renderTable,
      getMediaQuery: getMediaQuery
    });
    this.options = Object.assign(defaultsOptions);
    this.options.tableWidth = null;
    this.options.totalShowColumns = null;
    this.options.sizeColumns = [];
    this.node = {};
    this.dataOptionTable = [];
    this.dragColumn = false;
    this.dragCurentColumn = undefined;

    // bind this
    this.handlerColumnMouseEnter = this.handlerColumnMouseEnter.bind(this);
    this.handlerColumnDragStart = this.handlerColumnDragStart.bind(this);
    this.handlerColumnDragLeave = this.handlerColumnDragLeave.bind(this);
    this.handlerColumnDragEnd = this.handlerColumnDragEnd.bind(this);
    this.handlerColumnDragOver = this.handlerColumnDragOver.bind(this);
    this.handlerColumnDrop = this.handlerColumnDrop.bind(this);
  } // constructor
  _createClass(HeaderTable, [{
    key: "render",
    value: function render() {
      // console.log('start render > HeaderTable');

      if (this.getMediaQuery() !== 'desktop') {
        this.сlearParentBlock();
        return;
      }
      this.dataOptionTable = this.getOptionDataTable();
      if (!this.checkData()) {
        console.error('Error DATA, header table data not found');
        return;
      }
      if (!this.checkParent()) {
        console.error('Error DOMElement, parent block for header table not found');
        return;
      }
      this.сlearParentBlock();
      this.tableOptionsCalculator();
      this.create();
    }
  }, {
    key: "tableOptionsCalculator",
    value: function tableOptionsCalculator() {
      var $parent = this.parentBlock;
      var dataOptionTable = this.dataOptionTable;
      var minWidthColumn = this.options.minWidthColumn;
      function roundUp(num, precision) {
        precision = Math.pow(10, precision);
        return Math.ceil(num * precision) / precision;
      }
      var widthParent = $parent.getBoundingClientRect().width;
      var sizeColumns = [];
      sizeColumns.areeWidth = widthParent;
      sizeColumns.part = 0;
      sizeColumns.onePart = 0;
      var totalColumnsShown = [].reduce.call(dataOptionTable, function (result, col) {
        if (col.columnOptions.isDisplay) {
          sizeColumns.push({
            id: col.id,
            width: col.columnOptions.width,
            fixid: typeof col.columnOptions.width === 'string'
          });
          if (typeof col.columnOptions.width !== 'string') {
            sizeColumns.part += col.columnOptions.width;
          }
          return result + 1;
        }
        return result;
      }, 0);
      sizeColumns.forEach(function (item, index) {
        if (item.fixid) {
          if (item.width.slice(-2) === 'px') {
            var width = Number(item.width.slice(0, -2));
            sizeColumns[index].width = roundUp(+width, 2);
            sizeColumns.areeWidth -= roundUp(+width, 2);
            sizeColumns.onePart = roundUp(+sizeColumns.areeWidth / sizeColumns.part, 2);
          } else if (item.width.slice(-1) === '%') {
            var _width = Number(item.width.slice(0, -1));
            sizeColumns[index].width = roundUp(+widthParent * +_width / 100, 2);
            sizeColumns.areeWidth -= roundUp(+widthParent * +_width / 100, 2);
            sizeColumns.onePart = roundUp(+sizeColumns.areeWidth / sizeColumns.part, 2);
          }
        }
      });
      sizeColumns.forEach(function (item, index) {
        if (!item.fixid) {
          var max = Math.max(minWidthColumn, roundUp(sizeColumns.onePart * item.width, 2));
          sizeColumns[index].width = max;
        }
      });
      this.options.totalShowColumns = totalColumnsShown;
      this.options.tableWidth = widthParent;
      this.options.sizeColumns = Array.from(sizeColumns);
    }
  }, {
    key: "fixColumnWidth",
    value: function fixColumnWidth() {
      // console.log('run > fixColumnWidth');

      var sizeColumns = this.options.sizeColumns;
      var dataOptionTable = this.dataOptionTable;
      [].forEach.call(sizeColumns, function (item) {
        var indexFixRow = [].findIndex.call(dataOptionTable, function (row) {
          return row.id === item.id;
        });
        dataOptionTable[indexFixRow].columnOptions.width = "".concat(item.width, "px");
      });
      this.setOptionDataTable(dataOptionTable);
    }
  }, {
    key: "checkParent",
    value: function checkParent() {
      // console.log(this.parentBlock);
      if (this.parentBlock && this.parentBlock instanceof HTMLElement) {
        return true;
      }
      return false;
    }
  }, {
    key: "checkData",
    value: function checkData() {
      if (Array.isArray(this.dataOptionTable) && this.dataOptionTable.length !== 0) {
        return true;
      }
      return false;
    }
  }, {
    key: "\u0441learParentBlock",
    value: function сlearParentBlock() {
      if (this.parentBlock.hasChildNodes()) {
        this.parentBlock.innerHTML = '';
      }
    }
  }, {
    key: "create",
    value: function create() {
      var _this = this;
      var $parent = this.parentBlock;
      var dataOptionTable = this.dataOptionTable;
      var sizeColumns = this.options.sizeColumns;
      var _this$options = this.options,
        classParent = _this$options.classParent,
        classHeaderRow = _this$options.classHeaderRow,
        classHeaderColumn = _this$options.classHeaderColumn,
        classHeaderContent = _this$options.classHeaderContent;
      $parent.classList.add(classParent);
      var $tableRow = document.createElement('tr');
      $tableRow.className = classHeaderRow;
      $parent.appendChild($tableRow);
      dataOptionTable.forEach(function (column, index, array) {
        var id = column.id;
        var _column$columnOptions = column.columnOptions,
          title = _column$columnOptions.title,
          isDisplay = _column$columnOptions.isDisplay,
          isResize = _column$columnOptions.isResize,
          isDraggable = _column$columnOptions.isDraggable;
        var isLastiteration = false;
        if (index === array.length - 1) {
          isLastiteration = true;
        }
        if (isDisplay) {
          var tableHeadingColumn = document.createElement('th');
          tableHeadingColumn.className = classHeaderColumn;
          tableHeadingColumn.dataset.headerId = "".concat(id);
          var sizeWidthIndex = sizeColumns.findIndex(function (item) {
            return item.id === id;
          });
          tableHeadingColumn.style.width = "".concat(sizeColumns[sizeWidthIndex].width, "px");
          var contentBlock = document.createElement('div');
          contentBlock.innerText = title;
          contentBlock.className = classHeaderContent;
          contentBlock.style.whiteSpace = 'nowrap';
          contentBlock.style.overflow = 'hidden';
          contentBlock.style.margin = '2px';
          tableHeadingColumn.appendChild(contentBlock);
          $tableRow.appendChild(tableHeadingColumn);
          if (isLastiteration) {
            var $lastColumn = document.createElement('th');
            $lastColumn.style.width = 'auto';
            $tableRow.appendChild($lastColumn);
          }
          if (isResize) {
            _this.createResizableColumn(tableHeadingColumn);
          }
          if (isDraggable && !isLastiteration) {
            tableHeadingColumn.draggable = false;

            // mouse event
            contentBlock.addEventListener('mouseenter', _this.handlerColumnMouseEnter);

            // drag event
            tableHeadingColumn.addEventListener('dragstart', function (event) {
              _this.handlerColumnDragStart(event, column);
            });
            tableHeadingColumn.addEventListener('dragend', function (event) {
              _this.handlerColumnDragEnd(event);
            });
            tableHeadingColumn.addEventListener('dragover', function (event) {
              _this.handlerColumnDragOver(event);
            });
            tableHeadingColumn.addEventListener('dragleave', function (event) {
              _this.handlerColumnDragLeave(event);
            });
            tableHeadingColumn.addEventListener('dragenter', function (event) {
              _this.handlerColumnDragEnter(event);
            });
            tableHeadingColumn.addEventListener('drop', function (event) {
              _this.handlerColumnDrop(event, column);
            });
          }
        }
      });
    }

    // createResizableColumn
  }, {
    key: "createResizableColumn",
    value: function createResizableColumn($column) {
      var classColumnResizer = this.options.classColumnResizer;
      var $table = $column.closest('table');
      var $resizer = document.createElement('div');
      $resizer.className = classColumnResizer;
      $column.appendChild($resizer);
      this.handlerChangeColumnSize($column, $resizer);
      $resizer.style.height = "".concat($table.offsetHeight, "px");
      $resizer.onmouseenter = function (e) {
        $resizer.style.height = "".concat($table.offsetHeight, "px");
      };
    }

    // updateWidthInData
  }, {
    key: "updateWidthInData",
    value: function updateWidthInData($column, widthColumn) {
      var columns = this.dataOptionTable;
      var columnId = Number($column.dataset.headerId);
      if ($column.tagName !== 'TH' && !columnId) return;
      [].forEach.call(columns, function (col, index) {
        if (col.id === columnId) {
          columns[index] = _objectSpread(_objectSpread({}, col), {}, {
            columnOptions: _objectSpread(_objectSpread({}, col.columnOptions), {}, {
              width: widthColumn
            })
          });
        }
      });
      this.setOptionDataTable(columns);
    }

    // handlers
  }, {
    key: "handlerChangeColumnSize",
    value: function handlerChangeColumnSize($column, $resizer) {
      var _this2 = this;
      var x = 0;
      var widthColumn = 0;
      var widthColumnEnd = 0;
      var $table = $column.closest('table');
      var widthTable = $table.getBoundingClientRect().width;
      var mouseDownHandler = function mouseDownHandler(mouseDownEvent) {
        x = mouseDownEvent.clientX;
        var styles = window.getComputedStyle($column);
        widthColumn = parseInt(styles.width, 10);
        var mouseMoveHandler = function mouseMoveHandler(mouseMoveEvent) {
          var dx = mouseMoveEvent.clientX - x;
          if (widthColumn + dx > 20 && widthColumn + dx < widthTable / 2) {
            widthColumnEnd = widthColumn + dx;
            $column.style.width = "".concat(widthColumnEnd, "px");
          }
        };
        var mouseUpHandler = function mouseUpHandler() {
          document.removeEventListener('mousemove', mouseMoveHandler);
          document.removeEventListener('mouseup', mouseUpHandler);
          _this2.tableOptionsCalculator();
          _this2.fixColumnWidth();
          _this2.updateWidthInData($column, "".concat(widthColumnEnd, "px"));
        };
        document.addEventListener('mousemove', mouseMoveHandler);
        document.addEventListener('mouseup', mouseUpHandler);
      };
      $resizer.addEventListener('mousedown', mouseDownHandler);
    }
  }, {
    key: "handlerColumnMouseEnter",
    value: function handlerColumnMouseEnter(event) {
      var $columnDraggable = event.target.closest('[data-header-id]');
      var handlerColumnMouseLeave = function handlerColumnMouseLeave() {
        $columnDraggable.draggable = false;
        event.target.removeEventListener('mouseleave', handlerColumnMouseLeave);
      };
      event.target.addEventListener('mouseleave', handlerColumnMouseLeave);
      $columnDraggable.draggable = true;
    }

    // event drag and drop
  }, {
    key: "handlerColumnDragStart",
    value: function handlerColumnDragStart(e, column) {
      // при начале перетаскивания элемента
      setTimeout(function () {
        e.target.style.opacity = '0.3';
      }, 100);
      var $parent = e.target.closest('thead');
      [].forEach.call($parent.querySelectorAll('[draggable]'), function (elem) {
        elem.classList.add('drag-overlay-on');
      });
      this.dragColumn = true;
      this.dragCurentColumn = column;
    }
  }, {
    key: "handlerColumnDragEnd",
    value: function handlerColumnDragEnd(e) {
      var _this3 = this;
      // когда перетаскивание завершается
      this.dragColumn = false;
      this.dragCurentColumn = null;
      e.target.style.display = '';
      e.currentTarget.style.opacity = '1';
      if (this.dropColumn) {
        this.dropColumn = false;
        setTimeout(function () {
          _this3.renderTable();
        }, 0);
      }
    }
  }, {
    key: "handlerColumnDragOver",
    value: function handlerColumnDragOver(e) {
      // когда элемент перетаскивается в допустимую зону
      if (this.dragColumn) {
        e.preventDefault();
        e.dataTransfer.dropEffect = 'move';
      }
    }
  }, {
    key: "handlerColumnDragEnter",
    value: function handlerColumnDragEnter(e) {
      // когда элемент попадает в допустимую зону
      if (this.dropColumn) {
        e.currentTarget.classList.add('drag-hover');
      }
    }
  }, {
    key: "handlerColumnDragLeave",
    value: function handlerColumnDragLeave(e) {
      // когда элемент покидает допустимую зону
      e.currentTarget.classList.remove('drag-hover');
    }
  }, {
    key: "handlerColumnDrop",
    value: function handlerColumnDrop(e, column) {
      // когда элемент отпускают в допустимую зону

      e.preventDefault();
      e.currentTarget.classList.remove('drag-hover');
      var columns = this.dataOptionTable;
      var $dragColumn = this.dragCurentColumn;
      var dropIndex = [].findIndex.call(columns, function (col) {
        return col.id === column.id;
      });
      var dragIndex = [].findIndex.call(columns, function (col) {
        return col.id === $dragColumn.id;
      });
      var cut = columns.splice(dragIndex, 1)[0];
      columns.splice(dropIndex, 0, cut);
      this.setOptionDataTable(columns);
      this.dropColumn = true;
    }
  }, {
    key: "destroy",
    value: function destroy() {
      console.log('destroy(), no functionality!');
    }
  }]);
  return HeaderTable;
}();
var _default = HeaderTable;
exports["default"] = _default;

},{}],8:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var ResultTable = /*#__PURE__*/function () {
  function ResultTable(props) {
    _classCallCheck(this, ResultTable);
    var defaultsOptions = {
      classParent: 'result-table',
      //
      classGeneralList: 'result-table__general-list',
      classGeneralItem: 'result-table__general-item',
      classGeneralLable: 'result-table__general-lable',
      classGeneralTotal: 'result-table__general-total',
      //
      classResultinglList: 'result-table__resulting-list',
      classResultinglItem: 'result-table__resulting-item',
      classResultinglLable: 'result-table__resulting-lable',
      classResultinglTotal: 'result-table__resulting-total'
    };
    var parentBlock = props.parentBlock,
      getDataProducts = props.getDataProducts,
      getOptionsResultTable = props.getOptionsResultTable;
    Object.assign(this, {
      parentBlock: parentBlock,
      getDataProducts: getDataProducts,
      getOptionsResultTable: getOptionsResultTable
    });
    this.options = Object.assign(defaultsOptions);
    this.lists = {};
    this.lists.general = {};
    this.lists.general.listClass = this.options.classGeneralList;
    this.lists.general.itemClass = this.options.classGeneralItem;
    this.lists.general.lableClass = this.options.classGeneralLable;
    this.lists.general.totalClass = this.options.classGeneralTotal;
    this.lists.resulting = {};
    this.lists.resulting.listClass = this.options.classResultinglList;
    this.lists.resulting.itemClass = this.options.classResultinglItem;
    this.lists.resulting.lableClass = this.options.classResultinglLable;
    this.lists.resulting.totalClass = this.options.classResultinglTotal;
    this.resultTableList = this.getOptionsResultTable();
    this.node = {};

    // bind this
    this.createList = this.createList.bind(this);
  } // constructor
  _createClass(ResultTable, [{
    key: "render",
    value: function render() {
      // console.log(this.resultTableList);

      if (!this.checkData()) {
        console.error('Error DATA, body table data not found');
        return;
      }
      if (!this.checkParent()) {
        console.error('Error DOMElement, parent block for body table not found');
        return;
      }
      this.сlearParentBlock();
      this.completeTotals();
      this.create();
    }
  }, {
    key: "checkParent",
    value: function checkParent() {
      if (this.parentBlock && this.parentBlock instanceof HTMLElement) {
        return true;
      }
      return false;
    }
  }, {
    key: "checkData",
    value: function checkData() {
      if (Array.isArray(this.getDataProducts()) && this.getDataProducts().length !== 0) {
        return true;
      }
      return false;
    }
  }, {
    key: "\u0441learParentBlock",
    value: function сlearParentBlock() {
      if (this.parentBlock.hasChildNodes()) {
        this.parentBlock.innerHTML = '';
      }
    }
  }, {
    key: "create",
    value: function create() {
      var $parent = this.parentBlock;
      $parent.classList.add(this.options.classParent);
      $parent.appendChild(this.createList('general'));
      $parent.appendChild(this.createList('resulting'));
      this.createList();
    }
  }, {
    key: "createList",
    value: function createList() {
      var propertyList = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'general';
      if (!this.lists.hasOwnProperty(propertyList)) {
        console.log("Error Property, properties not found ".concat(propertyList, "!"));
        return;
      }
      var _this$lists$propertyL = this.lists[propertyList],
        listClass = _this$lists$propertyL.listClass,
        itemClass = _this$lists$propertyL.itemClass,
        lableClass = _this$lists$propertyL.lableClass,
        totalClass = _this$lists$propertyL.totalClass;
      var resultTableList = this.resultTableList;
      var $list = document.createElement('ul');
      $list.className = listClass;
      [].forEach.call(resultTableList, function (item) {
        if (item.list === propertyList) {
          var label = item.label,
            unit = item.unit,
            result = item.result;
          var $item = document.createElement('li');
          $item.className = itemClass;
          var $lable = document.createElement('span');
          $lable.className = lableClass;
          $lable.innerText = "".concat(label, ":");
          $item.appendChild($lable);
          var $total = document.createElement('span');
          $total.className = totalClass;
          $total.innerText = "".concat(result === null ? 'N/A' : result, " ").concat(unit);
          $item.appendChild($total);
          $list.appendChild($item);
        }
      });
      return $list;
    }
  }, {
    key: "completeTotals",
    value: function completeTotals() {
      var resultTableList = this.resultTableList;
      var data = this.getDataProducts();
      function countResult(countKey) {
        return [].reduce.call(data, function (sum, item) {
          if ({}.hasOwnProperty.call(item, countKey) && Number.isFinite(Number(item[countKey]))) {
            if (!item.isDeleted) {
              return sum + Number(item[countKey]);
            }
          }
          return sum;
        }, 0);
      }
      [].forEach.call(resultTableList, function (item) {
        item.result = countResult(item.countKey);
      });
    }
  }, {
    key: "destroy",
    value: function destroy() {
      console.log('destroy(), no functionality!');
    }
  }]);
  return ResultTable;
}();
var _default = ResultTable;
exports["default"] = _default;

},{}],9:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _autocomplete = _interopRequireDefault(require("../helpers/autocomplete"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var RowsTable = /*#__PURE__*/function () {
  function RowsTable(props) {
    _classCallCheck(this, RowsTable);
    var defaultsOptions = {
      maxRows: 100,
      classParent: 'table-body',
      classRow: 'table-body__row',
      classTempRow: 'table-body__temp-row',
      classTempRowItem: 'table-body__temp-item',
      //
      classColumn: 'table-body__column',
      classLabelColumn: 'table-body__lable',
      classContentBlock: 'table-body__content',
      classInputBlock: 'table-body__input-value',
      classStaticBlock: 'table-body__statick-value',
      classSystemBlockСapture: 'table-body__capture',
      //
      classSystemBlockActionButton: 'table-body__actions-button',
      classSystemBlockActionList: 'table-body__actions-list',
      classSystemBlockActionItem: 'table-body__actions-item',
      //
      classDragHover: 'drag-hover',
      classDragOverlay: 'overlay-on',
      classDragBefore: 'insert-before',
      classDragAfter: 'insert-after',
      classDragDraggrable: 'draggrable'
    };
    var parentBlock = props.parentBlock,
      getDataProducts = props.getDataProducts,
      getOptionDataTable = props.getOptionDataTable,
      getMediaQuery = props.getMediaQuery,
      setDataProducts = props.setDataProducts,
      setServerDataProducts = props.setServerDataProducts,
      setIsNewData = props.setIsNewData,
      renderResult = props.renderResult;
    Object.assign(this, {
      parentBlock: parentBlock,
      getDataProducts: getDataProducts,
      getOptionDataTable: getOptionDataTable,
      getMediaQuery: getMediaQuery,
      setDataProducts: setDataProducts,
      setServerDataProducts: setServerDataProducts,
      setIsNewData: setIsNewData,
      renderResult: renderResult
    });
    this.options = Object.assign(defaultsOptions);
    this.newRow = {};
    this.newRow.isNewRow = false;
    this.newRow.idNewRow = null;
    this.newRow.objectNewRow = {};
    this.node = {};
    this.dragRow = false;
    this.dragCurentIndex = undefined;
    this.data = {};
    this.data.rows = {};
    this.data.columns = {};

    // bind this
    this.handlerRowMouseEnter = this.handlerRowMouseEnter.bind(this);
    this.handlerRowDragEnd = this.handlerRowDragEnd.bind(this);
    this.handlerActionRemoveRow = this.handlerActionRemoveRow.bind(this);
    this.addNewRows = this.addNewRows.bind(this);
    this.saveChangeRows = this.saveChangeRows.bind(this);
    this.removeRow = this.removeRow.bind(this);
    this.createInputBlock = this.createInputBlock.bind(this);
  } // constructor
  _createClass(RowsTable, [{
    key: "render",
    value: function render() {
      // console.log(this.getMediaQuery());

      this.init();
      if (!this.checkDataRows()) {
        console.log('Error DATA, body table data not found');
        return;
      }
      if (!this.checkDataColumns()) {
        console.log('Error DATA, body table data not found');
        return;
      }
      if (!this.checkParent()) {
        console.log('Error DOMElement, parent block for body table not found');
        return;
      }
      this.update();
    }
  }, {
    key: "update",
    value: function update() {
      this.сlearParentBlock();
      this.create();
      this.renderResult();
    }
  }, {
    key: "init",
    value: function init() {
      this.data.rows = this.getDataProducts();
      this.data.columns = this.getOptionDataTable();
    }

    // checkParent
  }, {
    key: "checkParent",
    value: function checkParent() {
      // console.log(this.parentBlock);
      if (this.parentBlock && this.parentBlock instanceof HTMLElement) {
        return true;
      }
      return false;
    }

    // checkDataRows
  }, {
    key: "checkDataRows",
    value: function checkDataRows() {
      if (Array.isArray(this.getDataProducts()) && this.getDataProducts().length !== 0) {
        return true;
      }
      return false;
    }

    // checkDataColumns
  }, {
    key: "checkDataColumns",
    value: function checkDataColumns() {
      if (Array.isArray(this.getOptionDataTable()) && this.getOptionDataTable().length !== 0) {
        return true;
      }
      return false;
    }

    // checkValueRows
  }, {
    key: "checkValueRows",
    value: function checkValueRows() {
      // console.log('check value!');
      return true;
    }
  }, {
    key: "\u0441learParentBlock",
    value: function сlearParentBlock() {
      if (this.parentBlock.hasChildNodes()) {
        this.parentBlock.innerHTML = '';
      }
    }

    // create
  }, {
    key: "create",
    value: function create() {
      var _this = this;
      var $parent = this.parentBlock;
      var rows = this.data.rows;
      var columns = this.data.columns;
      var _this$options = this.options,
        classRow = _this$options.classRow,
        classColumn = _this$options.classColumn,
        classContentBlock = _this$options.classContentBlock,
        classLabelColumn = _this$options.classLabelColumn;
      var limitRows = Math.min(rows.length, this.options.maxRows);
      var counter = 0;
      var _loop = function _loop() {
        var row = rows[i];
        var id = row.id,
          isDeleted = row.isDeleted;
        var count = counter;
        if (!isDeleted) {
          var tableRow = document.createElement('tr');
          tableRow.className = classRow;
          // drag #event
          if (_this.getMediaQuery() === 'desktop') {
            tableRow.draggable = false;
            tableRow.ondragstart = function (event) {
              _this.handlerRowDragStart(event, id);
            };
            tableRow.ondragend = function (event) {
              _this.handlerRowDragEnd(event);
            };
            tableRow.ondragover = function (event) {
              _this.handlerRowDragOver(event, id);
            };
            tableRow.ondragenter = function (event) {
              _this.handlerRowDragEnter(event, id);
            };
            tableRow.ondragleave = function (event) {
              _this.handlerRowDragLeave(event);
            };
            tableRow.ondrop = function (event) {
              _this.handlerRowDrop(event, id);
            };
          }
          var fragment = document.createDocumentFragment();
          columns.forEach(function (column, index, array) {
            var key = column.key,
              type = column.type;
            var _column$columnOptions = column.columnOptions,
              lable = _column$columnOptions.lable,
              isAutocomplete = _column$columnOptions.isAutocomplete,
              isDisplay = _column$columnOptions.isDisplay,
              isEditable = _column$columnOptions.isEditable,
              mediaQuery = _column$columnOptions.mediaQuery;
            var isMedia = function isMedia() {
              if (mediaQuery.includes(_this.getMediaQuery())) {
                return true;
              }
              return false;
            };
            if (isDisplay && isMedia()) {
              var $tableHeadingColumn = document.createElement('td');
              $tableHeadingColumn.className = classColumn;
              $tableHeadingColumn.style.position = 'relative';
              var isLastiteration = false;
              if (index === array.length - 1) {
                isLastiteration = true;
              }
              var value = '';
              var $contentBlock = document.createElement('div');
              $contentBlock.className = classContentBlock;
              $contentBlock.style.overflow = 'hidden';
              $tableHeadingColumn.appendChild($contentBlock);
              if (type === 'DATA' && {}.hasOwnProperty.call(row, key)) {
                value = String(row[key]);
                if (isEditable) {
                  var $inputBlock = _this.createInputBlock(value, id, key, isAutocomplete);
                  $inputBlock.dataset.dataId = "".concat(key, "-").concat(id);
                  $contentBlock.appendChild($inputBlock);
                } else {
                  var $textBlock = _this.createStaticBlock(value);
                  $contentBlock.appendChild($textBlock);
                }
              }
              if (type === 'SYSTEM') {
                if (key === 'index') {
                  var dragBlock = _this.createSystemBlockСapture();
                  $contentBlock.appendChild(dragBlock);
                  var _$textBlock = _this.createStaticBlock("".concat(count + 1));
                  $contentBlock.appendChild(_$textBlock);
                }
                if (key === 'action') {
                  var $action = _this.createSystemBlockAction(id);
                  $contentBlock.style.overflow = 'visible';
                  $contentBlock.appendChild($action);
                }
              }
              if (_this.getMediaQuery() !== 'desktop') {
                var $labelColumn = document.createElement('div');
                $labelColumn.className = classLabelColumn;
                $labelColumn.innerHTML = lable;
                fragment.appendChild($labelColumn);
              }
              fragment.appendChild($tableHeadingColumn);
              if (isLastiteration && _this.getMediaQuery() === 'desktop') {
                var $lastColumn = document.createElement('td');
                $lastColumn.style.width = 'auto';
                fragment.appendChild($lastColumn);
              }
            }
          });
          counter += 1;
          tableRow.appendChild(fragment);
          $parent.appendChild(tableRow);
        } // if (!isDeleted)
      };
      for (var i = 0; i < limitRows; i += 1) {
        _loop();
      }
    }

    // createInputBlock
  }, {
    key: "createInputBlock",
    value: function createInputBlock(value, dataID, key, isAutocomplete) {
      var _this2 = this;
      var classInputBlock = this.options.classInputBlock;
      var rows = this.data.rows;
      var $inputBlock = document.createElement('input');

      // #even handler change

      var handlerChange = function handlerChange(event) {
        var indexChangeableRow = [].findIndex.call(rows, function (row) {
          return row.id === dataID;
        });
        rows[indexChangeableRow][key] = event.target.value;
        _this2.setDataProducts(_this2.data.rows);
        _this2.setIsNewData(true);
        _this2.renderResult();
      };
      $inputBlock.type = 'cc-text';
      $inputBlock.value = value;
      $inputBlock.className = classInputBlock;
      $inputBlock.onchange = handlerChange;
      if (isAutocomplete) {
        var arrayAutocomplete = [].map.call(rows, function (row) {
          return row[key];
        });
        (0, _autocomplete["default"])($inputBlock, arrayAutocomplete);
      }
      return $inputBlock;
    }

    // createStaticBlock
  }, {
    key: "createStaticBlock",
    value: function createStaticBlock(value) {
      var classStaticBlock = this.options.classStaticBlock;
      var $staticBlock = document.createElement('div');
      $staticBlock.className = classStaticBlock;
      $staticBlock.innerText = value;
      return $staticBlock;
    }

    // createSystemBlockСapture
  }, {
    key: "createSystemBlock\u0421apture",
    value: function createSystemBlockСapture() {
      var classSystemBlockСapture = this.options.classSystemBlockСapture;
      var $dragBlock = document.createElement('div');
      $dragBlock.className = classSystemBlockСapture;
      // #event
      $dragBlock.onmouseenter = this.handlerRowMouseEnter;
      return $dragBlock;
    }

    // createSystemBlockAction
  }, {
    key: "createSystemBlockAction",
    value: function createSystemBlockAction() {
      var dataID = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var _this$options2 = this.options,
        classSystemBlockActionList = _this$options2.classSystemBlockActionList,
        classSystemBlockActionItem = _this$options2.classSystemBlockActionItem,
        classSystemBlockActionButton = _this$options2.classSystemBlockActionButton;
      function hiddenActionMenu() {
        document.querySelectorAll('[data-action-menu]').forEach(function (itemMenu) {
          itemMenu.style.display = 'none';
        });
      }
      function hendlerOutsideClick() {
        console.log('click');
        hiddenActionMenu();
        document.removeEventListener('click', hendlerOutsideClick);
      }
      function handlerActionClick(e) {
        e.stopPropagation();
        hiddenActionMenu();
        var $menu = e.target.firstElementChild || e.target.firstChild;
        if ($menu && $menu.tagName === 'UL') {
          if ($menu.style.display === 'none') {
            $menu.style.display = '';
            document.addEventListener('click', hendlerOutsideClick);
          } else {
            $menu.style.display = 'none';
            document.removeEventListener('click', hendlerOutsideClick);
          }
        }
      }
      var $actionToggle = document.createElement('div');
      $actionToggle.className = classSystemBlockActionButton;
      $actionToggle.style.position = 'relative';
      // mouse #event
      $actionToggle.onclick = handlerActionClick;
      var $actionList = document.createElement('ul');
      $actionList.className = classSystemBlockActionList;
      $actionList.dataset.actionMenu = 'row';
      $actionList.style.position = 'absolute';
      $actionList.style.display = 'none';
      $actionToggle.appendChild($actionList);
      var actions = [{
        name: 'Удалить',
        action: this.handlerActionRemoveRow
      }];
      [].forEach.call(actions, function (action) {
        var $actionItem = document.createElement('li');
        $actionItem.className = classSystemBlockActionItem;
        $actionItem.innerText = action.name;
        $actionItem.dataset.dataId = dataID;
        $actionItem.onclick = action.action;
        $actionList.appendChild($actionItem);
      });
      return $actionToggle;
    }

    // createTempRow
  }, {
    key: "createTempRow",
    value: function createTempRow() {
      var _this$options3 = this.options,
        classTempRow = _this$options3.classTempRow,
        classTempRowItem = _this$options3.classTempRowItem;
      var $row = document.createElement('tr');
      $row.style.position = 'relative';
      $row.className = classTempRow;
      $row.dataset.tempRow = '';
      var $innerBlock = document.createElement('div');
      $innerBlock.className = classTempRowItem;
      $row.appendChild($innerBlock);
      return $row;
    }

    // removeTempRow
  }, {
    key: "removeTempRow",
    value: function removeTempRow() {
      document.querySelectorAll('[data-temp-row]').forEach(function (row) {
        row.parentNode.removeChild(row);
      });
    }

    // removeRow
  }, {
    key: "removeRow",
    value: function removeRow() {
      var dataID = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      if (dataID === null && typeof dataID !== 'number') {
        console.log('Data error! not correct form ID');
        return false;
      }
      var rows = this.data.rows;
      var indexRowDeleted = [].findIndex.call(rows, function (row) {
        return row.id === dataID;
      });
      rows[indexRowDeleted].isDeleted = true;
      this.setDataProducts(this.data.rows);
      this.render();
      this.setIsNewData(true);
      return true;
    }

    // addNewRows
  }, {
    key: "addNewRows",
    value: function addNewRows() {
      // if (this.newRow.isNewRow) {
      //   if (!this.saveChangeRows()) {
      //     return false;
      //   }
      // }

      var rows = this.data.rows;
      var generateId = function generateId() {
        var id = rows.length + 1;
        var checkIdInData = function checkIdInData(n) {
          if (rows.some(function (e) {
            return e.id === n;
          })) {
            // console.log('n+1 >', n);
            checkIdInData(n += 1);
          } else {
            id = n;
          }
          return n;
        };
        return checkIdInData(id);
      };
      var newId = generateId();
      var templateRow = Object.keys(_objectSpread({}, rows.slice(-1)[0])).reduce(function (a, v) {
        return _objectSpread(_objectSpread({}, a), {}, _defineProperty({}, v, ''));
      }, {});
      templateRow.id = newId;
      templateRow.isDeleted = false;
      this.newRow.isNewRow = true;
      this.newRow.idNewRow = newId;
      this.newRow.objectNewRow = _objectSpread({}, templateRow);
      [].push.call(rows, _objectSpread({}, templateRow));
      this.setDataProducts(this.data.rows);
      this.render();
      this.setIsNewData(true);
      return true;
      // console.log('addNewRows > add!');
    }

    // saveChangeRows
  }, {
    key: "saveChangeRows",
    value: function saveChangeRows() {
      if (!this.checkValueRows()) return false;
      if (this.newRow.isNewRow) {
        this.newRow.isNewRow = false;
        this.newRow.idNewRow = null;
        this.newRow.objectNewRow = {};
      }
      this.setServerDataProducts(this.data.rows);
      return true;
    }

    // handlers
  }, {
    key: "handlerActionRemoveRow",
    value: function handlerActionRemoveRow(event) {
      event.stopPropagation();
      this.removeRow(Number(event.target.dataset.dataId));
    }

    // handlerActionClick(event) {
    //   event.stopPropagation();
    //   console.log('handlerActionClick > ', event.target);
    // }
  }, {
    key: "handlerRowMouseEnter",
    value: function handlerRowMouseEnter(event) {
      var $rowDraggable = event.target.closest('tr[draggable]');
      var handlerRowMouseLeave = function handlerRowMouseLeave() {
        $rowDraggable.draggable = false;
        event.target.removeEventListener('mouseleave', handlerRowMouseLeave);
      };
      event.target.addEventListener('mouseleave', handlerRowMouseLeave);
      $rowDraggable.draggable = true;
    }

    // event drag and drop
  }, {
    key: "handlerRowDragStart",
    value: function handlerRowDragStart(e, rowId) {
      // при начале перетаскивания элемента
      var _this$options4 = this.options,
        classDragDraggrable = _this$options4.classDragDraggrable,
        classDragOverlay = _this$options4.classDragOverlay;
      if (e.target.tagName !== 'TR') return;
      setTimeout(function () {
        e.target.classList.add(classDragDraggrable);
        e.target.style.opacity = '0.3';
      }, 100);
      var $parent = e.target.closest('tbody');
      [].forEach.call($parent.querySelectorAll('[draggable]'), function (elem) {
        elem.classList.add(classDragOverlay);
      });
      this.dragRow = true;
      this.dragCurentIndex = rowId;
    }
  }, {
    key: "handlerRowDragEnd",
    value: function handlerRowDragEnd(e) {
      var _this3 = this;
      // когда перетаскивание завершается

      var _this$options5 = this.options,
        classDragDraggrable = _this$options5.classDragDraggrable,
        classDragOverlay = _this$options5.classDragOverlay;
      this.removeTempRow();
      if (e.target.tagName !== 'TR') return;
      var $parent = e.target.closest('tbody');
      [].forEach.call($parent.querySelectorAll('[draggable]'), function (elem) {
        elem.classList.remove(classDragOverlay);
      });
      e.currentTarget.style.opacity = '1';
      e.currentTarget.classList.remove(classDragDraggrable);
      if (this.dropRow) {
        this.dragRow = false;
        this.dragCurentIndex = null;
        setTimeout(function () {
          _this3.setDataProducts(_this3.data.rows);
          _this3.render();
        }, 0);
      }
    }
  }, {
    key: "handlerRowDragOver",
    value: function handlerRowDragOver(e, rowId) {
      var _this4 = this;
      // когда элемент перетаскивается в допустимую зону

      if (this.dragRow) {
        var rows = this.data.rows;
        e.dataTransfer.dropEffect = 'move';
        var dropIndex = [].findIndex.call(rows, function (row) {
          return row.id === rowId;
        });
        var dragIndex = [].findIndex.call(rows, function (row) {
          return row.id === _this4.dragCurentIndex;
        });
        if (dropIndex !== dragIndex) {
          e.preventDefault();
        }
      }
    }
  }, {
    key: "handlerRowDragEnter",
    value: function handlerRowDragEnter(e, rowId) {
      var _this5 = this;
      // когда элемент попадает в допустимую зону
      this.removeTempRow();
      if (this.dragRow) {
        var rows = this.data.rows;
        var _this$options6 = this.options,
          classDragHover = _this$options6.classDragHover,
          classDragBefore = _this$options6.classDragBefore,
          classDragAfter = _this$options6.classDragAfter;
        e.currentTarget.classList.add(classDragHover);
        var dropIndex = [].findIndex.call(rows, function (row) {
          return row.id === rowId;
        });
        var dragIndex = [].findIndex.call(rows, function (row) {
          return row.id === _this5.dragCurentIndex;
        });
        if (dropIndex !== dragIndex) {
          var $tempRow = this.createTempRow();
          if (dropIndex < dragIndex) {
            // before
            e.currentTarget.classList.add(classDragBefore);
            // append Before
            e.currentTarget.parentNode.insertBefore($tempRow, e.currentTarget);
          }
          if (dropIndex > dragIndex) {
            // after
            e.currentTarget.classList.add(classDragAfter);
            // append After
            e.currentTarget.parentNode.insertBefore($tempRow, e.currentTarget.nextSibling);
          }
        }
      }
    }
  }, {
    key: "handlerRowDragLeave",
    value: function handlerRowDragLeave(e) {
      // когда элемент покидает допустимую зону
      if (this.dragRow) {
        var _this$options7 = this.options,
          classDragHover = _this$options7.classDragHover,
          classDragBefore = _this$options7.classDragBefore,
          classDragAfter = _this$options7.classDragAfter;
        e.currentTarget.classList.remove(classDragHover);
        e.currentTarget.classList.remove(classDragBefore);
        e.currentTarget.classList.remove(classDragAfter);
      }
    }
  }, {
    key: "handlerRowDrop",
    value: function handlerRowDrop(e, rowId) {
      var _this6 = this;
      // когда элемент отпускают в допустимую зону
      e.preventDefault();
      if (this.dragRow) {
        var _this$options8 = this.options,
          classDragHover = _this$options8.classDragHover,
          classDragBefore = _this$options8.classDragBefore,
          classDragAfter = _this$options8.classDragAfter;
        e.currentTarget.classList.remove(classDragHover);
        e.currentTarget.classList.remove(classDragBefore);
        e.currentTarget.classList.remove(classDragAfter);

        // this.removeTempRow();

        var rows = this.data.rows;
        var dropIndex = [].findIndex.call(rows, function (row) {
          return row.id === rowId;
        });
        var dragIndex = [].findIndex.call(rows, function (row) {
          return row.id === _this6.dragCurentIndex;
        });
        var cut = rows.splice(dragIndex, 1)[0];
        rows.splice(dropIndex, 0, cut);
        this.dropRow = true;
        this.setIsNewData(true);
      }
    }
  }, {
    key: "destroy",
    value: function destroy() {
      console.log('destroy(), no functionality!');
    }
  }]);
  return RowsTable;
}();
var _default = RowsTable;
exports["default"] = _default;

},{"../helpers/autocomplete":3}],10:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var ToolsTableMenu = /*#__PURE__*/function () {
  function ToolsTableMenu(props) {
    _classCallCheck(this, ToolsTableMenu);
    var defaultsOptions = {
      classParent: 'tools-table',
      classButtonAddRow: 'tools-table__add-row button-primary button-primary--simple',
      classButtonSave: 'tools-table__save-change button-primary button-primary--accept',
      classButtonСancel: 'tools-table__сancel-change',
      //
      textButtonAddRow: 'Добавить строку',
      textButtonSave: 'Сохранить'
    };
    var parentBlock = props.parentBlock,
      createNewRows = props.createNewRows,
      saveChanges = props.saveChanges,
      getIsNewData = props.getIsNewData,
      getMediaQuery = props.getMediaQuery;
    Object.assign(this, {
      parentBlock: parentBlock,
      createNewRows: createNewRows,
      saveChanges: saveChanges,
      getIsNewData: getIsNewData,
      getMediaQuery: getMediaQuery
    });
    this.options = Object.assign(defaultsOptions);
    this.node = {};

    // bind this
    this.handlerClickAddRowButton = this.handlerClickAddRowButton.bind(this);
    this.handlerClickSaveButton = this.handlerClickSaveButton.bind(this);
  } // constructor
  _createClass(ToolsTableMenu, [{
    key: "render",
    value: function render() {
      if (!this.checkParent()) {
        console.log('Error DOMElement, parent block for ToolsTableMenu, not found');
        return;
      }
      var $parent = this.parentBlock;
      var classParent = this.options.classParent;
      $parent.classList.add(classParent);
      this.сlearParentBlock();
      this.createButtonAddRow();
      if (this.getIsNewData()) this.createButtonSave();
    }
  }, {
    key: "checkParent",
    value: function checkParent() {
      if (this.parentBlock && this.parentBlock instanceof HTMLElement) {
        return true;
      }
      return false;
    }
  }, {
    key: "\u0441learParentBlock",
    value: function сlearParentBlock() {
      if (this.parentBlock.hasChildNodes()) {
        this.parentBlock.innerHTML = '';
      }
    }
  }, {
    key: "createButtonAddRow",
    value: function createButtonAddRow() {
      var _this = this;
      var $parent = this.parentBlock;
      var _this$options = this.options,
        classButtonAddRow = _this$options.classButtonAddRow,
        textButtonAddRow = _this$options.textButtonAddRow;
      var $addRowButton = document.createElement('button');
      $addRowButton.className = classButtonAddRow;
      $addRowButton.innerText = textButtonAddRow;
      $parent.appendChild($addRowButton);
      setTimeout(function () {
        $addRowButton.addEventListener('click', _this.handlerClickAddRowButton);
      }, 0);
    }
  }, {
    key: "createButtonSave",
    value: function createButtonSave() {
      var _this2 = this;
      var $parent = this.parentBlock;
      var _this$options2 = this.options,
        classButtonSave = _this$options2.classButtonSave,
        textButtonSave = _this$options2.textButtonSave;
      var $saveButton = document.createElement('button');
      $saveButton.className = classButtonSave;
      $saveButton.innerText = textButtonSave;
      $parent.appendChild($saveButton);
      setTimeout(function () {
        $saveButton.addEventListener('click', _this2.handlerClickSaveButton);
      }, 0);
    }
  }, {
    key: "handlerClickAddRowButton",
    value: function handlerClickAddRowButton() {
      this.createNewRows();
    }
  }, {
    key: "handlerClickSaveButton",
    value: function handlerClickSaveButton() {
      this.saveChanges();
    }
  }, {
    key: "destroy",
    value: function destroy() {
      console.log('destroy(), no functionality!');
    }
  }]);
  return ToolsTableMenu;
}();
var _default = ToolsTableMenu;
exports["default"] = _default;

},{}],11:[function(require,module,exports){
"use strict";

var _core = _interopRequireDefault(require("./core"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function initApp() {
  var table = new _core["default"]();
}
document.addEventListener('DOMContentLoaded', initApp);

},{"./core":2}],12:[function(require,module,exports){
"use strict";

require("./components/modules/table/scripts/table");

},{"./components/modules/table/scripts/table":11}]},{},[12])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
