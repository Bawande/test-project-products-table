(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tableColumns = exports.resultTableList = exports.products = void 0;
var products = [{
  id: 1,
  shortName: 'Мраморный щебень 1',
  longName: 'Мраморный щебень фр. 2-5 мм, 25кг',
  price: 1231,
  quantity: 12,
  total: 1231,
  weight: 3,
  shippingСost: 300,
  maxCapacity: 2400,
  isDeleted: false
}, {
  id: 2,
  shortName: 'Мраморный щебень 2',
  longName: 'Мраморный щебень фр. 2-5 мм, 25кг',
  price: 1331,
  quantity: 15,
  total: 1331,
  weight: 3,
  shippingСost: 300,
  maxCapacity: 2400,
  isDeleted: true
}, {
  id: 3,
  shortName: 'Мраморный щебень 3',
  longName: 'Мраморный щебень фр. 2-5 мм, 25кг',
  price: 1431,
  quantity: 17,
  total: 1431,
  weight: 3,
  shippingСost: 300,
  maxCapacity: 2400,
  isDeleted: false
}, {
  id: 4,
  shortName: 'Мраморный щебень 4',
  longName: 'Мраморный щебень фр. 2-5 мм, 25кг',
  price: 1531,
  quantity: 13,
  total: 1531,
  weight: 3,
  shippingСost: 300,
  maxCapacity: 2400,
  isDeleted: false
}, {
  id: 5,
  shortName: 'Мраморный щебень 5',
  longName: 'Мраморный щебень фр. 2-5 мм, 25кг',
  price: 1251,
  quantity: 14,
  total: 1251,
  weight: 3,
  shippingСost: 300,
  maxCapacity: 2400,
  isDeleted: false
}, {
  id: 6,
  shortName: 'Мраморный щебень 6',
  longName: 'Мраморный щебень фр. 2-5 мм, 25кг',
  price: 1371,
  quantity: 18,
  total: 1371,
  weight: 3,
  shippingСost: 300,
  maxCapacity: 2400,
  isDeleted: false
}, {
  id: 7,
  shortName: 'Мраморный щебень 7',
  longName: 'Мраморный щебень фр. 2-5 мм, 25кг',
  price: 1351,
  quantity: 9,
  total: 1351,
  weight: 3,
  shippingСost: 300,
  maxCapacity: 2400,
  isDeleted: false
}];
exports.products = products;
var tableColumns = [{
  id: 0,
  key: 'index',
  type: 'SYSTEM',
  // SYSTEM | DATA
  columnOptions: {
    title: 'Номер',
    lable: 'Номер',
    validated: '',
    width: '48px',
    isAutocomplete: false,
    isDisplay: true,
    isAlwaysVisible: true,
    isResize: false,
    isDraggable: false,
    isEditable: false,
    mediaQuery: ['desktop']
  }
}, {
  id: 1,
  key: 'action',
  type: 'SYSTEM',
  // SYSTEM | DATA
  columnOptions: {
    title: 'Д',
    lable: 'Действие',
    validated: '',
    width: '22px',
    isAutocomplete: false,
    isDisplay: true,
    isAlwaysVisible: true,
    isResize: false,
    isDraggable: false,
    isEditable: false,
    mediaQuery: ['desktop', 'tablet', 'mobile']
  }
}, {
  id: 3,
  key: 'longName',
  type: 'DATA',
  // SYSTEM | DATA
  columnOptions: {
    title: 'Наименование еденицы',
    lable: 'Наименование еденицы',
    validated: 'text',
    width: 2.85,
    isAutocomplete: true,
    isDisplay: true,
    isAlwaysVisible: true,
    isResize: true,
    isDraggable: true,
    isEditable: true,
    mediaQuery: ['desktop', 'tablet', 'mobile']
  }
}, {
  id: 4,
  key: 'price',
  type: 'DATA',
  // SYSTEM | DATA
  columnOptions: {
    title: 'Цена',
    lable: 'Цена',
    validated: 'number',
    width: 1,
    isAutocomplete: false,
    isDisplay: true,
    isAlwaysVisible: true,
    isResize: true,
    isDraggable: true,
    isEditable: true,
    mediaQuery: ['desktop', 'tablet', 'mobile']
  }
}, {
  id: 5,
  key: 'quantity',
  type: 'DATA',
  // SYSTEM | DATA
  columnOptions: {
    title: 'Кол-во',
    lable: 'Кол-во',
    validated: 'number',
    width: 1,
    isAutocomplete: false,
    isDisplay: true,
    isAlwaysVisible: true,
    isResize: true,
    isDraggable: true,
    isEditable: true,
    mediaQuery: ['desktop', 'tablet', 'mobile']
  }
}, {
  id: 6,
  key: 'shortName',
  type: 'DATA',
  // SYSTEM | DATA
  columnOptions: {
    title: 'Название товара',
    lable: 'Название товара',
    validated: 'text',
    width: '10%',
    isAutocomplete: true,
    isDisplay: true,
    isAlwaysVisible: false,
    isResize: true,
    isDraggable: true,
    isEditable: true,
    mediaQuery: ['desktop', 'tablet', 'mobile']
  }
}, {
  id: 10,
  key: 'weight',
  type: 'DATA',
  // SYSTEM | DATA
  columnOptions: {
    title: 'Вес',
    lable: 'Вес',
    validated: '',
    width: 0.63,
    isAutocomplete: false,
    isDisplay: false,
    isAlwaysVisible: false,
    isResize: true,
    isDraggable: true,
    isEditable: true,
    mediaQuery: ['desktop', 'tablet', 'mobile']
  }
}, {
  id: 8,
  key: 'shippingСost',
  type: 'DATA',
  // SYSTEM | DATA
  columnOptions: {
    title: 'Цена доставки, руб',
    lable: 'Цена доставки, руб',
    validated: 'number',
    width: '10%',
    isAutocomplete: false,
    isDisplay: false,
    isAlwaysVisible: false,
    isResize: true,
    isDraggable: true,
    isEditable: false,
    mediaQuery: ['desktop', 'tablet', 'mobile']
  }
}, {
  id: 9,
  key: 'maxCapacity',
  type: 'DATA',
  // SYSTEM | DATA
  columnOptions: {
    title: 'Max грузоподъемность, кг',
    lable: 'Max грузоподъемность, кг',
    validated: 'number',
    width: 1,
    isAutocomplete: false,
    isDisplay: false,
    isAlwaysVisible: false,
    isResize: true,
    isDraggable: true,
    isEditable: true,
    mediaQuery: ['desktop', 'tablet', 'mobile']
  }
}, {
  id: 7,
  key: 'total',
  type: 'DATA',
  // SYSTEM | DATA
  columnOptions: {
    title: 'Итого',
    lable: 'Итого',
    validated: '',
    width: 0.63,
    isAutocomplete: false,
    isDisplay: true,
    isAlwaysVisible: true,
    isResize: true,
    isDraggable: false,
    isEditable: true,
    mediaQuery: ['desktop', 'tablet', 'mobile']
  }
}];
exports.tableColumns = tableColumns;
var resultTableList = [{
  id: 0,
  key: 'sum',
  label: 'Сумма',
  unit: 'руб',
  countKey: 'total',
  list: 'general',
  result: null
}, {
  id: 1,
  key: 'quantity',
  label: 'Кол-во',
  unit: 'шт',
  countKey: 'quantity',
  list: 'general',
  result: null
}, {
  id: 2,
  key: 'total_weight',
  label: 'Общий вес',
  unit: 'кг',
  countKey: 'weight',
  list: 'general',
  result: null
}, {
  id: 3,
  key: 'total_sum',
  label: 'Общая сумма',
  unit: 'руб',
  countKey: 'total',
  list: 'resulting',
  result: null
}];
exports.resultTableList = resultTableList;

},{}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _HeaderTable = _interopRequireDefault(require("./lib/HeaderTable"));
var _RowsTable = _interopRequireDefault(require("./lib/RowsTable"));
var _ResultTable = _interopRequireDefault(require("./lib/ResultTable"));
var _ContextMenu = _interopRequireDefault(require("./lib/ContextMenu"));
var _ToolsTableMenu = _interopRequireDefault(require("./lib/ToolsTableMenu"));
var _slowDownEvents = require("./helpers/slowDownEvents");
var _allData = require("../data/allData");
var _server = require("./helpers/server");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var ProductTable = /*#__PURE__*/function () {
  function ProductTable(extOptions) {
    _classCallCheck(this, ProductTable);
    var defaultsOptions = {
      selectorTable: 'id-table',
      selectorToolbar: 'id-toolbar',
      selectorContextMenu: 'id-context-menu',
      selectorResultTable: 'id-result-table',
      //
      classParrentTable: 'table-wrapper',
      classTable: 'table',
      //
      debag: true
    };

    // Options

    this.options = Object.assign(extOptions || {}, defaultsOptions);
    this.options.initTableWidth = '99%';

    // Data

    this.data = {};
    this.data.dataProducts = {};
    this.data.optionDataTable = {};
    this.data.optionTotalTable = {};
    this.data.isNewData = false;

    // Nodes

    this.nodes = {};
    this.nodes.$tableParent = undefined;
    this.nodes.$contextMenuParent = undefined;
    this.nodes.$totalTable = undefined;
    this.nodes.$toolbar = undefined;
    this.initParentNodes();
    this.nodes.$table = undefined;
    this.nodes.$tableHeader = undefined;
    this.nodes.$tableBody = undefined;

    // bind

    this.getDataProducts = this.getDataProducts.bind(this);
    this.setDataProducts = this.setDataProducts.bind(this);
    this.getOptionDataTable = this.getOptionDataTable.bind(this);
    this.setOptionDataTable = this.setOptionDataTable.bind(this);
    this.getOptionsResultTable = this.getOptionsResultTable.bind(this);
    this.setOptionsResultTable = this.setOptionsResultTable.bind(this);
    this.setServerDataProducts = this.setServerDataProducts.bind(this);
    this.renderTable = this.renderTable.bind(this);
    this.renderResult = this.renderResult.bind(this);
    this.createNewRows = this.createNewRows.bind(this);
    this.saveChanges = this.saveChanges.bind(this);
    this.getIsNewData = this.getIsNewData.bind(this);
    this.setIsNewData = this.setIsNewData.bind(this);
    this.getMediaQuery = this.getMediaQuery.bind(this);

    // create parent nodes

    this.createTable();

    // initData

    this.initData();
  } // constructor

  // initData
  _createClass(ProductTable, [{
    key: "initData",
    value: function initData() {
      var _this = this;
      Promise.all([(0, _server.getServerAllProducts)(), (0, _server.getServerOptionsDataTable)(), (0, _server.getServerOptionsResultTable)()]).then(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 3),
          dataProducts = _ref2[0],
          optionsDataTable = _ref2[1],
          optionTotalTable = _ref2[2];
        console.warn('Load server data...');
        _this.setDataProducts(dataProducts);
        _this.setOptionDataTable(optionsDataTable);
        _this.setOptionsResultTable(optionTotalTable);
      })["catch"](function (error) {
        console.error(error, 'Error server data!');
        console.warn('Load local data...');
        _this.setDataProducts(_allData.products);
        _this.setOptionDataTable(_allData.tableColumns);
        _this.setOptionsResultTable(_allData.resultTableList);
      }).then(function () {
        _this.initComponents();
      }).then(function () {
        window.addEventListener('resize', (0, _slowDownEvents.throttle)(_this.renderTable, 60));
        _this.render();
      });
    }
  }, {
    key: "initComponents",
    value: function initComponents() {
      this.contextMenu = new _ContextMenu["default"]({
        parentBlock: this.nodes.$contextMenuParent,
        getOptionDataTable: this.getOptionDataTable,
        setOptionDataTable: this.setOptionDataTable,
        renderTable: this.renderTable,
        getMediaQuery: this.getMediaQuery
      });
      this.headerTable = new _HeaderTable["default"]({
        parentBlock: this.nodes.$tableHeader,
        getOptionDataTable: this.getOptionDataTable,
        setOptionDataTable: this.setOptionDataTable,
        renderTable: this.renderTable,
        getMediaQuery: this.getMediaQuery
      });
      this.rowsTable = new _RowsTable["default"]({
        parentBlock: this.nodes.$tableBody,
        getDataProducts: this.getDataProducts,
        setDataProducts: this.setDataProducts,
        getOptionDataTable: this.getOptionDataTable,
        setIsNewData: this.setIsNewData,
        setServerDataProducts: this.setServerDataProducts,
        getMediaQuery: this.getMediaQuery,
        renderResult: this.renderResult
      });
      this.toolsTableMenu = new _ToolsTableMenu["default"]({
        parentBlock: this.nodes.$toolbar,
        createNewRows: this.createNewRows,
        saveChanges: this.saveChanges,
        getIsNewData: this.getIsNewData
      });
      this.resultTable = new _ResultTable["default"]({
        parentBlock: this.nodes.$totalTable,
        getDataProducts: this.getDataProducts,
        getOptionsResultTable: this.getOptionsResultTable
      });
    }
  }, {
    key: "initParentNodes",
    value: function initParentNodes() {
      var _this$options = this.options,
        selectorTable = _this$options.selectorTable,
        selectorContextMenu = _this$options.selectorContextMenu,
        selectorResultTable = _this$options.selectorResultTable,
        selectorToolbar = _this$options.selectorToolbar;
      this.nodes.$tableParent = document.getElementById(selectorTable);
      this.nodes.$contextMenuParent = document.getElementById(selectorContextMenu);
      this.nodes.$contextMenuParent.style.position = 'relative';
      this.nodes.$totalTable = document.getElementById(selectorResultTable);
      this.nodes.$toolbar = document.getElementById(selectorToolbar);
    }
  }, {
    key: "render",
    value: function render() {
      this.renderTable();
      this.contextMenu.render();
      this.toolsTableMenu.render();
    }
  }, {
    key: "renderTable",
    value: function renderTable() {
      this.headerTable.render();
      this.rowsTable.render();
      this.resultTable.render();
    }
  }, {
    key: "renderResult",
    value: function renderResult() {
      this.resultTable.render();
    }

    // GET
  }, {
    key: "getOptionDataTable",
    value: function getOptionDataTable() {
      return JSON.parse(JSON.stringify(this.data.optionDataTable));
    }
  }, {
    key: "getOptionsResultTable",
    value: function getOptionsResultTable() {
      return JSON.parse(JSON.stringify(this.data.optionTotalTable));
    }
  }, {
    key: "getDataProducts",
    value: function getDataProducts() {
      return JSON.parse(JSON.stringify(this.data.dataProducts));
    }
  }, {
    key: "getIsNewData",
    value: function getIsNewData() {
      return this.data.isNewData;
    }
  }, {
    key: "getMediaQuery",
    value: function getMediaQuery() {
      var mediaQuery = 'desktop';
      if (window.matchMedia('(max-width: 768px)').matches) {
        mediaQuery = 'tablet';
      }
      if (window.matchMedia('(max-width: 480px)').matches) {
        mediaQuery = 'mobile';
      }
      return mediaQuery;
    }

    // SET
  }, {
    key: "setOptionsResultTable",
    value: function setOptionsResultTable(value) {
      // console.log('setOptionsResultTable > value:', value);
      if (!Array.isArray(value)) {
        console.error('Error change rows data!');
        return;
      }
      this.data.optionTotalTable = value;
    }
  }, {
    key: "setDataProducts",
    value: function setDataProducts(value) {
      // console.log('setDataProducts > value:', value);
      if (!Array.isArray(value)) {
        console.error('Error change rows data!');
        return;
      }
      this.data.dataProducts = JSON.parse(JSON.stringify(value));
    }
  }, {
    key: "setServerDataProducts",
    value: function setServerDataProducts(value, fun) {
      var _this2 = this;
      if (!Array.isArray(value)) {
        console.error('Error change rows data!');
        return;
      }
      (0, _server.setServerAllProducts)(value).then(function (response) {
        console.log(response);
        return response.json();
      }).then(function (json) {
        console.log(Object.values(json));
        _this2.setDataProducts(value);
        _this2.setIsNewData(false);
        _this2.renderTable();
      })["catch"](function (error) {
        console.error(error, 'Error server');
      });
    }
  }, {
    key: "setOptionDataTable",
    value: function setOptionDataTable(value) {
      // console.log('setOptionDataTable > value:', value);
      if (!Array.isArray(value)) {
        console.error('Error change columns data!');
        return;
      }
      this.data.optionDataTable = JSON.parse(JSON.stringify(value));
    }
  }, {
    key: "setIsNewData",
    value: function setIsNewData(value) {
      if (typeof value !== 'boolean') {
        console.error('Error change value IsNewData!');
        return;
      }
      this.data.isNewData = value;
      this.toolsTableMenu.render();
    }
  }, {
    key: "createNewRows",
    value: function createNewRows() {
      this.rowsTable.addNewRows();
    }
  }, {
    key: "createTable",
    value: function createTable() {
      var $tableParent = this.nodes.$tableParent;
      var _this$options2 = this.options,
        classParrentTable = _this$options2.classParrentTable,
        classTable = _this$options2.classTable,
        initTableWidth = _this$options2.initTableWidth;
      if (!$tableParent) {
        console.error('Error, table has no parent! key id="id-table"');
        return;
      }
      $tableParent.innerHTML = '';
      $tableParent.classList = classParrentTable;
      var $table = document.createElement('table');
      $table.id = 'id-testing-table';
      $table.className = classTable;
      $table.className = classTable;
      $table.style.tableLayout = 'fixed';
      $table.style.width = initTableWidth;
      $tableParent.appendChild($table);
      this.nodes.$table = $table;
      var tableHeader = document.createElement('thead');
      $table.appendChild(tableHeader);
      this.nodes.$tableHeader = tableHeader;
      var tableBody = document.createElement('tbody');
      $table.appendChild(tableBody);
      this.nodes.$tableBody = tableBody;
    }
  }, {
    key: "saveChanges",
    value: function saveChanges() {
      this.rowsTable.saveChangeRows();
    }
  }]);
  return ProductTable;
}();
var _default = ProductTable;
exports["default"] = _default;

},{"../data/allData":1,"./helpers/server":4,"./helpers/slowDownEvents":5,"./lib/ContextMenu":6,"./lib/HeaderTable":7,"./lib/ResultTable":8,"./lib/RowsTable":9,"./lib/ToolsTableMenu":10}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
function autocomplete($input, arrAutocomplete) {
  var classWrapper = 'table-body__autocomplete-wrapper';
  var classList = 'table-body__autocomplete-list';
  var classItem = 'table-body__autocomplete-item';
  var classActive = 'active';
  var currentFocus;
  var dataID = $input.dataset.dataId;
  $input.addEventListener('focus', handlerFocus);
  $input.addEventListener('blur', handlerBlur);

  // function handlerFocus

  function handlerFocus(e) {
    // console.log('focus');
    addEvents();
  }

  // function handlerBlur

  function handlerBlur(e) {
    // console.log('Blur');
    removeEvents();
  }

  // function removeEvents

  function removeEvents() {
    $input.removeEventListener('input', handlerInput);
    $input.removeEventListener('keydown', handlerKeydown);
    document.removeEventListener('scroll', handlerScrollDoc);
  }

  // function addEvents

  function addEvents() {
    $input.addEventListener('input', handlerInput);
    $input.addEventListener('keydown', handlerKeydown);
    document.addEventListener('scroll', handlerScrollDoc);
  }

  // function handlerScrollDoc

  function handlerScrollDoc(e) {
    closeAllLists();
    console.log('scroll');
    // removeEvents();
  }

  // function handlerInput

  function handlerInput(e) {
    var inputValue = e.target.value;
    closeAllLists();
    if (!inputValue.trim()) {
      return false;
    }
    currentFocus = -1;
    var $wrapper = document.createElement('div');
    $wrapper.classList = classWrapper;
    $wrapper.style.position = 'absolute';
    $wrapper.style.display = 'none';
    $wrapper.style.zIndex = '999';
    e.target.parentNode.appendChild($wrapper);
    var $list = document.createElement('ul');
    $list.id = dataID;
    $list.classList = classList;
    // $list.style.position = 'fixed';
    $list.style.width = "".concat($input.getBoundingClientRect().width, "px");

    // console.log($input.getBoundingClientRect().width);

    $wrapper.appendChild($list);
    for (var i = 0; i < arrAutocomplete.length; i += 1) {
      var string = arrAutocomplete[i];
      // console.log(string);
      if (string.substr(0, inputValue.length).toUpperCase() === inputValue.toUpperCase()) {
        $wrapper.style.display = '';
        var $item = document.createElement('li');
        $item.classList = classItem;
        $item.innerHTML = "<strong>".concat(string.substr(0, inputValue.length), "</strong>");
        $item.innerHTML += string.substr(inputValue.length);
        $item.innerHTML += "<input type='hidden' value='".concat(string, "'>");
        $item.addEventListener('click', function (event) {
          // console.log('click');
          $input.value = event.currentTarget.getElementsByTagName('input')[0].value;
          closeAllLists();
        });
        $list.appendChild($item);
      }
    }
  }

  // function handlerKeydown
  // TODO: доделать выбор элемента по ID...

  function handlerKeydown(e) {
    var $list = document.getElementById(dataID);
    if ($list) $list = $list.getElementsByTagName('li');

    // console.log(e.keyCode);

    if (e.keyCode === 40) {
      e.preventDefault();
      currentFocus += 1;
      addActiveClass($list);
    } else if (e.keyCode === 38) {
      // вверх
      currentFocus -= 1;
      addActiveClass($list);
    } else if (e.keyCode === 13) {
      if (currentFocus > -1) {
        if ($list) $list[currentFocus].click();
      }
    } else if (e.keyCode === 9 || e.keyCode === 27) {
      closeAllLists();
    }
  }

  // function addActiveClass

  function addActiveClass($list) {
    if (!$list) return false;
    removeActiveClass($list);
    if (currentFocus >= $list.length) currentFocus = 0;
    if (currentFocus < 0) currentFocus = $list.length - 1;
    $list[currentFocus].classList.add(classActive);
    $list[currentFocus].scrollIntoView();
  }

  // function removeActiveClass

  function removeActiveClass($list) {
    for (var i = 0; i < $list.length; i += 1) {
      $list[i].classList.remove(classActive);
    }
  }

  // function closeAllLists

  function closeAllLists(elmnt) {
    var $list = document.getElementsByClassName(classWrapper);
    for (var i = 0; i < $list.length; i += 1) {
      if (elmnt !== $list[i] && elmnt !== $input) {
        $list[i].parentNode.removeChild($list[i]);
      }
    }
  }
  document.addEventListener('click', function (e) {
    closeAllLists(e.target);
  });
}
var _default = autocomplete;
exports["default"] = _default;

},{}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getServerAllProducts = getServerAllProducts;
exports.getServerOptionsDataTable = getServerOptionsDataTable;
exports.getServerOptionsResultTable = getServerOptionsResultTable;
exports.setServerAllProducts = setServerAllProducts;
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function getServerAllProducts() {
  return _getServerAllProducts.apply(this, arguments);
}
function _getServerAllProducts() {
  _getServerAllProducts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
    var response, data;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return fetch('../data/dataProducts.json');
        case 2:
          response = _context.sent;
          _context.next = 5;
          return response.json();
        case 5:
          data = _context.sent;
          return _context.abrupt("return", data);
        case 7:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return _getServerAllProducts.apply(this, arguments);
}
function getServerOptionsDataTable() {
  return _getServerOptionsDataTable.apply(this, arguments);
}
function _getServerOptionsDataTable() {
  _getServerOptionsDataTable = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
    var response, data;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          _context2.next = 2;
          return fetch('../data/optionsDataTable.json');
        case 2:
          response = _context2.sent;
          _context2.next = 5;
          return response.json();
        case 5:
          data = _context2.sent;
          return _context2.abrupt("return", data);
        case 7:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
  return _getServerOptionsDataTable.apply(this, arguments);
}
function getServerOptionsResultTable() {
  return _getServerOptionsResultTable.apply(this, arguments);
}
function _getServerOptionsResultTable() {
  _getServerOptionsResultTable = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
    var response, data;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return fetch('../data/optionsResultTable.json');
        case 2:
          response = _context3.sent;
          _context3.next = 5;
          return response.json();
        case 5:
          data = _context3.sent;
          return _context3.abrupt("return", data);
        case 7:
        case "end":
          return _context3.stop();
      }
    }, _callee3);
  }));
  return _getServerOptionsResultTable.apply(this, arguments);
}
function setServerAllProducts(_x) {
  return _setServerAllProducts.apply(this, arguments);
}
function _setServerAllProducts() {
  _setServerAllProducts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(data) {
    var response, answer;
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          _context4.next = 2;
          return fetch('https://jsonplaceholder.typicode.com/posts', {
            method: 'POST',
            body: JSON.stringify(data),
            headers: {
              'Content-type': 'application/json; charset=UTF-8'
            }
          });
        case 2:
          response = _context4.sent;
          _context4.next = 5;
          return response;
        case 5:
          answer = _context4.sent;
          return _context4.abrupt("return", answer);
        case 7:
        case "end":
          return _context4.stop();
      }
    }, _callee4);
  }));
  return _setServerAllProducts.apply(this, arguments);
}

},{}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.debounce = debounce;
exports.throttle = void 0;
var throttle = function throttle(func, ms) {
  var locked = false;
  return function () {
    if (locked) return;
    var context = this;
    var args = arguments;
    locked = true;
    setTimeout(function () {
      func.apply(context, args);
      locked = false;
    }, ms);
  };
};
exports.throttle = throttle;
function debounce(func, ms, now) {
  var onLast;
  return function () {
    var context = this;
    var args = arguments;
    var onFirst = now && !onLast;
    clearTimeout(onLast);
    onLast = setTimeout(function () {
      onLast = null;
      if (!now) func.apply(context, args);
    }, ms);
    if (onFirst) func.apply(context, args);
  };
}

},{}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var ContextMenu = /*#__PURE__*/function () {
  function ContextMenu(props) {
    _classCallCheck(this, ContextMenu);
    var defaultsOptions = {
      classParent: 'context-menu',
      classButtonMenu: 'context-menu__toggle',
      classMenuList: 'context-menu__list',
      classMenuItem: 'context-menu__item',
      classSubMenu: 'context-menu__sublist',
      classTitleSubMenu: 'context-menu__title-sublist',
      classTitleCheckbox: 'context-menu__checkbox'
    };
    var parentBlock = props.parentBlock,
      getOptionDataTable = props.getOptionDataTable,
      setOptionDataTable = props.setOptionDataTable,
      renderTable = props.renderTable,
      getMediaQuery = props.getMediaQuery;
    this.options = Object.assign(defaultsOptions);
    Object.assign(this, {
      parentBlock: parentBlock,
      getOptionDataTable: getOptionDataTable,
      setOptionDataTable: setOptionDataTable,
      renderTable: renderTable,
      getMediaQuery: getMediaQuery
    });
    this.menuItems = [{
      id: 0,
      key: 'columns',
      lable: 'Отображение столбцов',
      items: this.getOptionDataTable()
    }];
    this.node = {};
    this.node.$menuList = undefined;
    this.node.$menuButtonToggler = undefined;

    // bind this
    this.handlerToggleMenu = this.handlerToggleMenu.bind(this);
    this.handlerMouseEnterMenuItem = this.handlerMouseEnterMenuItem.bind(this);
    this.hendlerOutsideClickEvent = this.hendlerOutsideClickEvent.bind(this);
    this.handlerChangeCheckbox = this.handlerChangeCheckbox.bind(this);
  } // constructor
  _createClass(ContextMenu, [{
    key: "render",
    value: function render() {
      if (this.getMediaQuery() !== 'desktop') {
        this.сlearParentBlock();
        return;
      }
      if (!this.checkData()) {
        console.log('Error DATA, context menu data not found');
        return;
      }
      if (!this.checkParent()) {
        console.log('Error DOMElement, parent block for context menu not found');
        return;
      }
      this.сlearParentBlock();
      this.create();
    }
  }, {
    key: "checkParent",
    value: function checkParent() {
      if (this.parentBlock && this.parentBlock instanceof HTMLElement) {
        return true;
      }
      return false;
    }
  }, {
    key: "checkData",
    value: function checkData() {
      if (Array.isArray(this.getOptionDataTable()) && this.getOptionDataTable().length !== 0) {
        return true;
      }
      return false;
    }
  }, {
    key: "\u0441learParentBlock",
    value: function сlearParentBlock() {
      if (this.parentBlock.hasChildNodes()) {
        this.parentBlock.innerHTML = '';
      }
    }
  }, {
    key: "create",
    value: function create() {
      var classParent = this.options.classParent;
      this.parentBlock.classList.add(classParent);
      this.createToggleButton();
      this.createMenu();
    }
  }, {
    key: "createToggleButton",
    value: function createToggleButton() {
      var _this = this;
      var classButtonMenu = this.options.classButtonMenu;
      var $toggleButton = document.createElement('button');
      $toggleButton.className = classButtonMenu;
      this.parentBlock.appendChild($toggleButton);
      this.node.$menuButtonToggler = $toggleButton;
      setTimeout(function () {
        $toggleButton.addEventListener('click', _this.handlerToggleMenu);
      }, 0);
    }
  }, {
    key: "createMenu",
    value: function createMenu() {
      var _this2 = this;
      var _this$options = this.options,
        classMenuList = _this$options.classMenuList,
        classSubMenu = _this$options.classSubMenu,
        classMenuItem = _this$options.classMenuItem,
        classTitleSubMenu = _this$options.classTitleSubMenu,
        classTitleCheckbox = _this$options.classTitleCheckbox;
      var data = this.menuItems;

      // create menu list
      var $menuList = document.createElement('ul');
      $menuList.className = classMenuList;
      $menuList.style.position = 'absolute';
      $menuList.style.display = 'none';
      this.node.$menuList = $menuList;
      this.parentBlock.appendChild($menuList);

      // create menu items
      var $menuItemsFragment = document.createDocumentFragment();
      [].forEach.call(data, function (item) {
        var lable = item.lable,
          items = item.items;
        var $listItem = document.createElement('li');
        $listItem.className = "".concat(classMenuItem, " drop-down");
        $listItem.addEventListener('mouseenter', _this2.handlerMouseEnterMenuItem);
        var $label = document.createElement('span');
        $label.innerText = lable;
        $listItem.appendChild($label);
        if (Array.isArray(items)) {
          // create submenu list
          var $menuSublist = document.createElement('ul');
          $menuSublist.className = classSubMenu;
          $menuSublist.style.position = 'absolute';
          $menuSublist.style.display = 'none';
          $listItem.appendChild($menuSublist);
          var $labelSublist = document.createElement('div');
          $labelSublist.className = classTitleSubMenu;
          $labelSublist.innerText = lable;
          $menuSublist.appendChild($labelSublist);

          //   create submenu items
          var $menuSubitemsFragment = document.createDocumentFragment();
          [].forEach.call(items, function (subitem) {
            var id = subitem.id,
              key = subitem.key,
              type = subitem.type;
            var _subitem$columnOption = subitem.columnOptions,
              lable = _subitem$columnOption.lable,
              isDisplay = _subitem$columnOption.isDisplay,
              isAlwaysVisible = _subitem$columnOption.isAlwaysVisible;
            if (!isAlwaysVisible && type === 'DATA') {
              var $listSubitem = document.createElement('li');
              $listSubitem.className = classMenuItem;
              var $sublable = document.createElement('div');
              $listSubitem.appendChild($sublable);
              var $checkbox = document.createElement('input');
              $checkbox.type = 'checkbox';
              $checkbox.name = key;
              $checkbox.className = classTitleCheckbox;
              $checkbox.value = lable;
              $checkbox.checked = isDisplay;
              $checkbox.id = "id-".concat(key, "-").concat(id);
              $checkbox.dataset.columnId = id;
              $sublable.appendChild($checkbox);
              $checkbox.addEventListener('change', _this2.handlerChangeCheckbox);
              var $labelCheckbox = document.createElement('label');
              $labelCheckbox.htmlFor = "id-".concat(key, "-").concat(id);
              $sublable.appendChild($labelCheckbox);
              var $labelText = document.createTextNode(lable);
              $labelCheckbox.appendChild($labelText);
              $menuSubitemsFragment.appendChild($listSubitem);
            } // if(type !== 'SYSTEM' && isEditable)
          });

          $menuSublist.appendChild($menuSubitemsFragment);
        }
        $menuItemsFragment.appendChild($listItem);
      });
      $menuList.appendChild($menuItemsFragment);
    }
  }, {
    key: "openMenuList",
    value: function openMenuList() {
      var _this3 = this;
      var _this$node = this.node,
        $menuList = _this$node.$menuList,
        $menuButtonToggler = _this$node.$menuButtonToggler;
      $menuList.style.display = '';
      $menuList.classList.add('open');
      $menuButtonToggler.classList.add('open');
      setTimeout(function () {
        document.addEventListener('click', _this3.hendlerOutsideClickEvent);
      }, 0);
    }
  }, {
    key: "closeMenuList",
    value: function closeMenuList() {
      var _this$node2 = this.node,
        $menuList = _this$node2.$menuList,
        $menuButtonToggler = _this$node2.$menuButtonToggler;
      $menuList.style.display = 'none';
      $menuList.classList.remove('open');
      $menuButtonToggler.classList.remove('open');
      document.removeEventListener('click', this.hendlerOutsideClickEvent);
    }

    // handlers
  }, {
    key: "handlerToggleMenu",
    value: function handlerToggleMenu(event) {
      if (event.target.classList.contains('open')) {
        this.closeMenuList();
      } else {
        this.openMenuList();
      }
    }
  }, {
    key: "handlerMouseEnterMenuItem",
    value: function handlerMouseEnterMenuItem(event) {
      var menuItem = event.target;
      var menuList = menuItem.querySelector('ul');
      var hendlerMoseLive = function hendlerMoseLive() {
        menuList.style.display = 'none';
        menuItem.removeEventListener('mouseleave', hendlerMoseLive);
      };
      menuList.style.display = '';
      menuItem.addEventListener('mouseleave', hendlerMoseLive);
    }
  }, {
    key: "hendlerOutsideClickEvent",
    value: function hendlerOutsideClickEvent(event) {
      var $menuList = this.node.$menuList;
      var $elemEvent = event.target;
      if ($menuList.classList.contains('open')) {
        if (!$menuList.contains($elemEvent)) {
          this.closeMenuList();
          document.removeEventListener('click', this.hendlerOutsideClickEvent);
        }
      }
    }
  }, {
    key: "handlerChangeCheckbox",
    value: function handlerChangeCheckbox(event) {
      var _this4 = this;
      var columns = this.getOptionDataTable();
      var $checkbox = event.target;
      var columnId = $checkbox.dataset.columnId;
      var checked = $checkbox.checked;
      var arr = [].map.call(columns, function (column) {
        if (column.id === Number(columnId)) {
          return _objectSpread(_objectSpread({}, column), {}, {
            columnOptions: _objectSpread(_objectSpread({}, column.columnOptions), {}, {
              isDisplay: checked
            })
          });
        }
        return column;
      });
      setTimeout(function () {
        _this4.setOptionDataTable(arr);
        _this4.renderTable();
      }, 0);
    }
  }, {
    key: "destroy",
    value: function destroy() {
      console.log('destroy(), no functionality!');
    }
  }]);
  return ContextMenu;
}();
var _default = ContextMenu;
exports["default"] = _default;

},{}],7:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var HeaderTable = /*#__PURE__*/function () {
  function HeaderTable(props) {
    _classCallCheck(this, HeaderTable);
    var defaultsOptions = {
      classParent: 'table-header',
      classHeaderRow: 'table-header__row',
      classHeaderColumn: 'table-header__column',
      classHeaderContent: 'table-header__content',
      classColumnResizer: 'table-header__resizer',
      //
      minWidthColumn: 70
    };
    var parentBlock = props.parentBlock,
      getOptionDataTable = props.getOptionDataTable,
      setOptionDataTable = props.setOptionDataTable,
      callData = props.callData,
      renderTable = props.renderTable,
      getMediaQuery = props.getMediaQuery;
    Object.assign(this, {
      parentBlock: parentBlock,
      getOptionDataTable: getOptionDataTable,
      setOptionDataTable: setOptionDataTable,
      callData: callData,
      renderTable: renderTable,
      getMediaQuery: getMediaQuery
    });
    this.options = Object.assign(defaultsOptions);
    this.options.tableWidth = null;
    this.options.totalShowColumns = null;
    this.options.sizeColumns = [];
    this.node = {};
    this.dataOptionTable = [];
    this.dragColumn = false;
    this.dragCurentColumn = undefined;

    // bind this
    this.handlerColumnMouseEnter = this.handlerColumnMouseEnter.bind(this);
    this.handlerColumnDragStart = this.handlerColumnDragStart.bind(this);
    this.handlerColumnDragLeave = this.handlerColumnDragLeave.bind(this);
    this.handlerColumnDragEnd = this.handlerColumnDragEnd.bind(this);
    this.handlerColumnDragOver = this.handlerColumnDragOver.bind(this);
    this.handlerColumnDrop = this.handlerColumnDrop.bind(this);
  } // constructor
  _createClass(HeaderTable, [{
    key: "render",
    value: function render() {
      // console.log('start render > HeaderTable');

      if (this.getMediaQuery() !== 'desktop') {
        this.сlearParentBlock();
        return;
      }
      this.dataOptionTable = this.getOptionDataTable();
      if (!this.checkData()) {
        console.error('Error DATA, header table data not found');
        return;
      }
      if (!this.checkParent()) {
        console.error('Error DOMElement, parent block for header table not found');
        return;
      }
      this.сlearParentBlock();
      this.tableOptionsCalculator();
      this.create();
    }
  }, {
    key: "tableOptionsCalculator",
    value: function tableOptionsCalculator() {
      var $parent = this.parentBlock;
      var dataOptionTable = this.dataOptionTable;
      var minWidthColumn = this.options.minWidthColumn;
      function roundUp(num, precision) {
        precision = Math.pow(10, precision);
        return Math.ceil(num * precision) / precision;
      }
      var widthParent = $parent.getBoundingClientRect().width;
      var sizeColumns = [];
      sizeColumns.areeWidth = widthParent;
      sizeColumns.part = 0;
      sizeColumns.onePart = 0;
      var totalColumnsShown = [].reduce.call(dataOptionTable, function (result, col) {
        if (col.columnOptions.isDisplay) {
          sizeColumns.push({
            id: col.id,
            width: col.columnOptions.width,
            fixid: typeof col.columnOptions.width === 'string'
          });
          if (typeof col.columnOptions.width !== 'string') {
            sizeColumns.part += col.columnOptions.width;
          }
          return result + 1;
        }
        return result;
      }, 0);
      sizeColumns.forEach(function (item, index) {
        if (item.fixid) {
          if (item.width.slice(-2) === 'px') {
            var width = Number(item.width.slice(0, -2));
            sizeColumns[index].width = roundUp(+width, 2);
            sizeColumns.areeWidth -= roundUp(+width, 2);
            sizeColumns.onePart = roundUp(+sizeColumns.areeWidth / sizeColumns.part, 2);
          } else if (item.width.slice(-1) === '%') {
            var _width = Number(item.width.slice(0, -1));
            sizeColumns[index].width = roundUp(+widthParent * +_width / 100, 2);
            sizeColumns.areeWidth -= roundUp(+widthParent * +_width / 100, 2);
            sizeColumns.onePart = roundUp(+sizeColumns.areeWidth / sizeColumns.part, 2);
          }
        }
      });
      sizeColumns.forEach(function (item, index) {
        if (!item.fixid) {
          var max = Math.max(minWidthColumn, roundUp(sizeColumns.onePart * item.width, 2));
          sizeColumns[index].width = max;
        }
      });
      this.options.totalShowColumns = totalColumnsShown;
      this.options.tableWidth = widthParent;
      this.options.sizeColumns = Array.from(sizeColumns);
    }
  }, {
    key: "fixColumnWidth",
    value: function fixColumnWidth() {
      // console.log('run > fixColumnWidth');

      var sizeColumns = this.options.sizeColumns;
      var dataOptionTable = this.dataOptionTable;
      [].forEach.call(sizeColumns, function (item) {
        var indexFixRow = [].findIndex.call(dataOptionTable, function (row) {
          return row.id === item.id;
        });
        dataOptionTable[indexFixRow].columnOptions.width = "".concat(item.width, "px");
      });
      this.setOptionDataTable(dataOptionTable);
    }
  }, {
    key: "checkParent",
    value: function checkParent() {
      // console.log(this.parentBlock);
      if (this.parentBlock && this.parentBlock instanceof HTMLElement) {
        return true;
      }
      return false;
    }
  }, {
    key: "checkData",
    value: function checkData() {
      if (Array.isArray(this.dataOptionTable) && this.dataOptionTable.length !== 0) {
        return true;
      }
      return false;
    }
  }, {
    key: "\u0441learParentBlock",
    value: function сlearParentBlock() {
      if (this.parentBlock.hasChildNodes()) {
        this.parentBlock.innerHTML = '';
      }
    }
  }, {
    key: "create",
    value: function create() {
      var _this = this;
      var $parent = this.parentBlock;
      var dataOptionTable = this.dataOptionTable;
      var sizeColumns = this.options.sizeColumns;
      var _this$options = this.options,
        classParent = _this$options.classParent,
        classHeaderRow = _this$options.classHeaderRow,
        classHeaderColumn = _this$options.classHeaderColumn,
        classHeaderContent = _this$options.classHeaderContent;
      $parent.classList.add(classParent);
      var $tableRow = document.createElement('tr');
      $tableRow.className = classHeaderRow;
      $parent.appendChild($tableRow);
      dataOptionTable.forEach(function (column, index, array) {
        var id = column.id;
        var _column$columnOptions = column.columnOptions,
          title = _column$columnOptions.title,
          isDisplay = _column$columnOptions.isDisplay,
          isResize = _column$columnOptions.isResize,
          isDraggable = _column$columnOptions.isDraggable;
        var isLastiteration = false;
        if (index === array.length - 1) {
          isLastiteration = true;
        }
        if (isDisplay) {
          var tableHeadingColumn = document.createElement('th');
          tableHeadingColumn.className = classHeaderColumn;
          tableHeadingColumn.dataset.headerId = "".concat(id);
          var sizeWidthIndex = sizeColumns.findIndex(function (item) {
            return item.id === id;
          });
          tableHeadingColumn.style.width = "".concat(sizeColumns[sizeWidthIndex].width, "px");
          var contentBlock = document.createElement('div');
          contentBlock.innerText = title;
          contentBlock.className = classHeaderContent;
          contentBlock.style.whiteSpace = 'nowrap';
          contentBlock.style.overflow = 'hidden';
          contentBlock.style.margin = '2px';
          tableHeadingColumn.appendChild(contentBlock);
          $tableRow.appendChild(tableHeadingColumn);
          if (isLastiteration) {
            var $lastColumn = document.createElement('th');
            $lastColumn.style.width = 'auto';
            $tableRow.appendChild($lastColumn);
          }
          if (isResize) {
            _this.createResizableColumn(tableHeadingColumn);
          }
          if (isDraggable && !isLastiteration) {
            tableHeadingColumn.draggable = false;

            // mouse event
            contentBlock.addEventListener('mouseenter', _this.handlerColumnMouseEnter);

            // drag event
            tableHeadingColumn.addEventListener('dragstart', function (event) {
              _this.handlerColumnDragStart(event, column);
            });
            tableHeadingColumn.addEventListener('dragend', function (event) {
              _this.handlerColumnDragEnd(event);
            });
            tableHeadingColumn.addEventListener('dragover', function (event) {
              _this.handlerColumnDragOver(event);
            });
            tableHeadingColumn.addEventListener('dragleave', function (event) {
              _this.handlerColumnDragLeave(event);
            });
            tableHeadingColumn.addEventListener('dragenter', function (event) {
              _this.handlerColumnDragEnter(event);
            });
            tableHeadingColumn.addEventListener('drop', function (event) {
              _this.handlerColumnDrop(event, column);
            });
          }
        }
      });
    }

    // createResizableColumn
  }, {
    key: "createResizableColumn",
    value: function createResizableColumn($column) {
      var classColumnResizer = this.options.classColumnResizer;
      var $table = $column.closest('table');
      var $resizer = document.createElement('div');
      $resizer.className = classColumnResizer;
      $column.appendChild($resizer);
      this.handlerChangeColumnSize($column, $resizer);
      $resizer.style.height = "".concat($table.offsetHeight, "px");
      $resizer.onmouseenter = function (e) {
        $resizer.style.height = "".concat($table.offsetHeight, "px");
      };
    }

    // updateWidthInData
  }, {
    key: "updateWidthInData",
    value: function updateWidthInData($column, widthColumn) {
      var columns = this.dataOptionTable;
      var columnId = Number($column.dataset.headerId);
      if ($column.tagName !== 'TH' && !columnId) return;
      [].forEach.call(columns, function (col, index) {
        if (col.id === columnId) {
          columns[index] = _objectSpread(_objectSpread({}, col), {}, {
            columnOptions: _objectSpread(_objectSpread({}, col.columnOptions), {}, {
              width: widthColumn
            })
          });
        }
      });
      this.setOptionDataTable(columns);
    }

    // handlers
  }, {
    key: "handlerChangeColumnSize",
    value: function handlerChangeColumnSize($column, $resizer) {
      var _this2 = this;
      var x = 0;
      var widthColumn = 0;
      var widthColumnEnd = 0;
      var $table = $column.closest('table');
      var widthTable = $table.getBoundingClientRect().width;
      var mouseDownHandler = function mouseDownHandler(mouseDownEvent) {
        x = mouseDownEvent.clientX;
        var styles = window.getComputedStyle($column);
        widthColumn = parseInt(styles.width, 10);
        var mouseMoveHandler = function mouseMoveHandler(mouseMoveEvent) {
          var dx = mouseMoveEvent.clientX - x;
          if (widthColumn + dx > 20 && widthColumn + dx < widthTable / 2) {
            widthColumnEnd = widthColumn + dx;
            $column.style.width = "".concat(widthColumnEnd, "px");
          }
        };
        var mouseUpHandler = function mouseUpHandler() {
          document.removeEventListener('mousemove', mouseMoveHandler);
          document.removeEventListener('mouseup', mouseUpHandler);
          _this2.tableOptionsCalculator();
          _this2.fixColumnWidth();
          _this2.updateWidthInData($column, "".concat(widthColumnEnd, "px"));
        };
        document.addEventListener('mousemove', mouseMoveHandler);
        document.addEventListener('mouseup', mouseUpHandler);
      };
      $resizer.addEventListener('mousedown', mouseDownHandler);
    }
  }, {
    key: "handlerColumnMouseEnter",
    value: function handlerColumnMouseEnter(event) {
      var $columnDraggable = event.target.closest('[data-header-id]');
      var handlerColumnMouseLeave = function handlerColumnMouseLeave() {
        $columnDraggable.draggable = false;
        event.target.removeEventListener('mouseleave', handlerColumnMouseLeave);
      };
      event.target.addEventListener('mouseleave', handlerColumnMouseLeave);
      $columnDraggable.draggable = true;
    }

    // event drag and drop
  }, {
    key: "handlerColumnDragStart",
    value: function handlerColumnDragStart(e, column) {
      // при начале перетаскивания элемента
      setTimeout(function () {
        e.target.style.opacity = '0.3';
      }, 100);
      var $parent = e.target.closest('thead');
      [].forEach.call($parent.querySelectorAll('[draggable]'), function (elem) {
        elem.classList.add('drag-overlay-on');
      });
      this.dragColumn = true;
      this.dragCurentColumn = column;
    }
  }, {
    key: "handlerColumnDragEnd",
    value: function handlerColumnDragEnd(e) {
      var _this3 = this;
      // когда перетаскивание завершается
      this.dragColumn = false;
      this.dragCurentColumn = null;
      e.target.style.display = '';
      e.currentTarget.style.opacity = '1';
      if (this.dropColumn) {
        this.dropColumn = false;
        setTimeout(function () {
          _this3.renderTable();
        }, 0);
      }
    }
  }, {
    key: "handlerColumnDragOver",
    value: function handlerColumnDragOver(e) {
      // когда элемент перетаскивается в допустимую зону
      if (this.dragColumn) {
        e.preventDefault();
        e.dataTransfer.dropEffect = 'move';
      }
    }
  }, {
    key: "handlerColumnDragEnter",
    value: function handlerColumnDragEnter(e) {
      // когда элемент попадает в допустимую зону
      if (this.dropColumn) {
        e.currentTarget.classList.add('drag-hover');
      }
    }
  }, {
    key: "handlerColumnDragLeave",
    value: function handlerColumnDragLeave(e) {
      // когда элемент покидает допустимую зону
      e.currentTarget.classList.remove('drag-hover');
    }
  }, {
    key: "handlerColumnDrop",
    value: function handlerColumnDrop(e, column) {
      // когда элемент отпускают в допустимую зону

      e.preventDefault();
      e.currentTarget.classList.remove('drag-hover');
      var columns = this.dataOptionTable;
      var $dragColumn = this.dragCurentColumn;
      var dropIndex = [].findIndex.call(columns, function (col) {
        return col.id === column.id;
      });
      var dragIndex = [].findIndex.call(columns, function (col) {
        return col.id === $dragColumn.id;
      });
      var cut = columns.splice(dragIndex, 1)[0];
      columns.splice(dropIndex, 0, cut);
      this.setOptionDataTable(columns);
      this.dropColumn = true;
    }
  }, {
    key: "destroy",
    value: function destroy() {
      console.log('destroy(), no functionality!');
    }
  }]);
  return HeaderTable;
}();
var _default = HeaderTable;
exports["default"] = _default;

},{}],8:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var ResultTable = /*#__PURE__*/function () {
  function ResultTable(props) {
    _classCallCheck(this, ResultTable);
    var defaultsOptions = {
      classParent: 'result-table',
      //
      classGeneralList: 'result-table__general-list',
      classGeneralItem: 'result-table__general-item',
      classGeneralLable: 'result-table__general-lable',
      classGeneralTotal: 'result-table__general-total',
      //
      classResultinglList: 'result-table__resulting-list',
      classResultinglItem: 'result-table__resulting-item',
      classResultinglLable: 'result-table__resulting-lable',
      classResultinglTotal: 'result-table__resulting-total'
    };
    var parentBlock = props.parentBlock,
      getDataProducts = props.getDataProducts,
      getOptionsResultTable = props.getOptionsResultTable;
    Object.assign(this, {
      parentBlock: parentBlock,
      getDataProducts: getDataProducts,
      getOptionsResultTable: getOptionsResultTable
    });
    this.options = Object.assign(defaultsOptions);
    this.lists = {};
    this.lists.general = {};
    this.lists.general.listClass = this.options.classGeneralList;
    this.lists.general.itemClass = this.options.classGeneralItem;
    this.lists.general.lableClass = this.options.classGeneralLable;
    this.lists.general.totalClass = this.options.classGeneralTotal;
    this.lists.resulting = {};
    this.lists.resulting.listClass = this.options.classResultinglList;
    this.lists.resulting.itemClass = this.options.classResultinglItem;
    this.lists.resulting.lableClass = this.options.classResultinglLable;
    this.lists.resulting.totalClass = this.options.classResultinglTotal;
    this.resultTableList = this.getOptionsResultTable();
    this.node = {};

    // bind this
    this.createList = this.createList.bind(this);
  } // constructor
  _createClass(ResultTable, [{
    key: "render",
    value: function render() {
      // console.log(this.resultTableList);

      if (!this.checkData()) {
        console.error('Error DATA, body table data not found');
        return;
      }
      if (!this.checkParent()) {
        console.error('Error DOMElement, parent block for body table not found');
        return;
      }
      this.сlearParentBlock();
      this.completeTotals();
      this.create();
    }
  }, {
    key: "checkParent",
    value: function checkParent() {
      if (this.parentBlock && this.parentBlock instanceof HTMLElement) {
        return true;
      }
      return false;
    }
  }, {
    key: "checkData",
    value: function checkData() {
      if (Array.isArray(this.getDataProducts()) && this.getDataProducts().length !== 0) {
        return true;
      }
      return false;
    }
  }, {
    key: "\u0441learParentBlock",
    value: function сlearParentBlock() {
      if (this.parentBlock.hasChildNodes()) {
        this.parentBlock.innerHTML = '';
      }
    }
  }, {
    key: "create",
    value: function create() {
      var $parent = this.parentBlock;
      $parent.classList.add(this.options.classParent);
      $parent.appendChild(this.createList('general'));
      $parent.appendChild(this.createList('resulting'));
      this.createList();
    }
  }, {
    key: "createList",
    value: function createList() {
      var propertyList = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'general';
      if (!this.lists.hasOwnProperty(propertyList)) {
        console.log("Error Property, properties not found ".concat(propertyList, "!"));
        return;
      }
      var _this$lists$propertyL = this.lists[propertyList],
        listClass = _this$lists$propertyL.listClass,
        itemClass = _this$lists$propertyL.itemClass,
        lableClass = _this$lists$propertyL.lableClass,
        totalClass = _this$lists$propertyL.totalClass;
      var resultTableList = this.resultTableList;
      var $list = document.createElement('ul');
      $list.className = listClass;
      [].forEach.call(resultTableList, function (item) {
        if (item.list === propertyList) {
          var label = item.label,
            unit = item.unit,
            result = item.result;
          var $item = document.createElement('li');
          $item.className = itemClass;
          var $lable = document.createElement('span');
          $lable.className = lableClass;
          $lable.innerText = "".concat(label, ":");
          $item.appendChild($lable);
          var $total = document.createElement('span');
          $total.className = totalClass;
          $total.innerText = "".concat(result === null ? 'N/A' : result, " ").concat(unit);
          $item.appendChild($total);
          $list.appendChild($item);
        }
      });
      return $list;
    }
  }, {
    key: "completeTotals",
    value: function completeTotals() {
      var resultTableList = this.resultTableList;
      var data = this.getDataProducts();
      function countResult(countKey) {
        return [].reduce.call(data, function (sum, item) {
          if ({}.hasOwnProperty.call(item, countKey) && Number.isFinite(Number(item[countKey]))) {
            if (!item.isDeleted) {
              return sum + Number(item[countKey]);
            }
          }
          return sum;
        }, 0);
      }
      [].forEach.call(resultTableList, function (item) {
        item.result = countResult(item.countKey);
      });
    }
  }, {
    key: "destroy",
    value: function destroy() {
      console.log('destroy(), no functionality!');
    }
  }]);
  return ResultTable;
}();
var _default = ResultTable;
exports["default"] = _default;

},{}],9:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _autocomplete = _interopRequireDefault(require("../helpers/autocomplete"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var RowsTable = /*#__PURE__*/function () {
  function RowsTable(props) {
    _classCallCheck(this, RowsTable);
    var defaultsOptions = {
      maxRows: 100,
      classParent: 'table-body',
      classRow: 'table-body__row',
      classTempRow: 'table-body__temp-row',
      classTempRowItem: 'table-body__temp-item',
      //
      classColumn: 'table-body__column',
      classLabelColumn: 'table-body__lable',
      classContentBlock: 'table-body__content',
      classInputBlock: 'table-body__input-value',
      classStaticBlock: 'table-body__statick-value',
      classSystemBlockСapture: 'table-body__capture',
      //
      classSystemBlockActionButton: 'table-body__actions-button',
      classSystemBlockActionList: 'table-body__actions-list',
      classSystemBlockActionItem: 'table-body__actions-item',
      //
      classDragHover: 'drag-hover',
      classDragOverlay: 'overlay-on',
      classDragBefore: 'insert-before',
      classDragAfter: 'insert-after',
      classDragDraggrable: 'draggrable'
    };
    var parentBlock = props.parentBlock,
      getDataProducts = props.getDataProducts,
      getOptionDataTable = props.getOptionDataTable,
      getMediaQuery = props.getMediaQuery,
      setDataProducts = props.setDataProducts,
      setServerDataProducts = props.setServerDataProducts,
      setIsNewData = props.setIsNewData,
      renderResult = props.renderResult;
    Object.assign(this, {
      parentBlock: parentBlock,
      getDataProducts: getDataProducts,
      getOptionDataTable: getOptionDataTable,
      getMediaQuery: getMediaQuery,
      setDataProducts: setDataProducts,
      setServerDataProducts: setServerDataProducts,
      setIsNewData: setIsNewData,
      renderResult: renderResult
    });
    this.options = Object.assign(defaultsOptions);
    this.newRow = {};
    this.newRow.isNewRow = false;
    this.newRow.idNewRow = null;
    this.newRow.objectNewRow = {};
    this.node = {};
    this.dragRow = false;
    this.dragCurentIndex = undefined;
    this.data = {};
    this.data.rows = {};
    this.data.columns = {};

    // bind this
    this.handlerRowMouseEnter = this.handlerRowMouseEnter.bind(this);
    this.handlerRowDragEnd = this.handlerRowDragEnd.bind(this);
    this.handlerActionRemoveRow = this.handlerActionRemoveRow.bind(this);
    this.addNewRows = this.addNewRows.bind(this);
    this.saveChangeRows = this.saveChangeRows.bind(this);
    this.removeRow = this.removeRow.bind(this);
    this.createInputBlock = this.createInputBlock.bind(this);
  } // constructor
  _createClass(RowsTable, [{
    key: "render",
    value: function render() {
      // console.log(this.getMediaQuery());

      this.init();
      if (!this.checkDataRows()) {
        console.log('Error DATA, body table data not found');
        return;
      }
      if (!this.checkDataColumns()) {
        console.log('Error DATA, body table data not found');
        return;
      }
      if (!this.checkParent()) {
        console.log('Error DOMElement, parent block for body table not found');
        return;
      }
      this.update();
    }
  }, {
    key: "update",
    value: function update() {
      this.сlearParentBlock();
      this.create();
      this.renderResult();
    }
  }, {
    key: "init",
    value: function init() {
      this.data.rows = this.getDataProducts();
      this.data.columns = this.getOptionDataTable();
    }

    // checkParent
  }, {
    key: "checkParent",
    value: function checkParent() {
      // console.log(this.parentBlock);
      if (this.parentBlock && this.parentBlock instanceof HTMLElement) {
        return true;
      }
      return false;
    }

    // checkDataRows
  }, {
    key: "checkDataRows",
    value: function checkDataRows() {
      if (Array.isArray(this.getDataProducts()) && this.getDataProducts().length !== 0) {
        return true;
      }
      return false;
    }

    // checkDataColumns
  }, {
    key: "checkDataColumns",
    value: function checkDataColumns() {
      if (Array.isArray(this.getOptionDataTable()) && this.getOptionDataTable().length !== 0) {
        return true;
      }
      return false;
    }

    // checkValueRows
  }, {
    key: "checkValueRows",
    value: function checkValueRows() {
      // console.log('check value!');
      return true;
    }
  }, {
    key: "\u0441learParentBlock",
    value: function сlearParentBlock() {
      if (this.parentBlock.hasChildNodes()) {
        this.parentBlock.innerHTML = '';
      }
    }

    // create
  }, {
    key: "create",
    value: function create() {
      var _this = this;
      var $parent = this.parentBlock;
      var rows = this.data.rows;
      var columns = this.data.columns;
      var _this$options = this.options,
        classRow = _this$options.classRow,
        classColumn = _this$options.classColumn,
        classContentBlock = _this$options.classContentBlock,
        classLabelColumn = _this$options.classLabelColumn;
      var limitRows = Math.min(rows.length, this.options.maxRows);
      var counter = 0;
      var _loop = function _loop() {
        var row = rows[i];
        var id = row.id,
          isDeleted = row.isDeleted;
        var count = counter;
        if (!isDeleted) {
          var tableRow = document.createElement('tr');
          tableRow.className = classRow;
          // drag #event
          if (_this.getMediaQuery() === 'desktop') {
            tableRow.draggable = false;
            tableRow.ondragstart = function (event) {
              _this.handlerRowDragStart(event, id);
            };
            tableRow.ondragend = function (event) {
              _this.handlerRowDragEnd(event);
            };
            tableRow.ondragover = function (event) {
              _this.handlerRowDragOver(event, id);
            };
            tableRow.ondragenter = function (event) {
              _this.handlerRowDragEnter(event, id);
            };
            tableRow.ondragleave = function (event) {
              _this.handlerRowDragLeave(event);
            };
            tableRow.ondrop = function (event) {
              _this.handlerRowDrop(event, id);
            };
          }
          var fragment = document.createDocumentFragment();
          columns.forEach(function (column, index, array) {
            var key = column.key,
              type = column.type;
            var _column$columnOptions = column.columnOptions,
              lable = _column$columnOptions.lable,
              isAutocomplete = _column$columnOptions.isAutocomplete,
              isDisplay = _column$columnOptions.isDisplay,
              isEditable = _column$columnOptions.isEditable,
              mediaQuery = _column$columnOptions.mediaQuery;
            var isMedia = function isMedia() {
              if (mediaQuery.includes(_this.getMediaQuery())) {
                return true;
              }
              return false;
            };
            if (isDisplay && isMedia()) {
              var $tableHeadingColumn = document.createElement('td');
              $tableHeadingColumn.className = classColumn;
              $tableHeadingColumn.style.position = 'relative';
              var isLastiteration = false;
              if (index === array.length - 1) {
                isLastiteration = true;
              }
              var value = '';
              var $contentBlock = document.createElement('div');
              $contentBlock.className = classContentBlock;
              $contentBlock.style.overflow = 'hidden';
              $tableHeadingColumn.appendChild($contentBlock);
              if (type === 'DATA' && {}.hasOwnProperty.call(row, key)) {
                value = String(row[key]);
                if (isEditable) {
                  var $inputBlock = _this.createInputBlock(value, id, key, isAutocomplete);
                  $inputBlock.dataset.dataId = "".concat(key, "-").concat(id);
                  $contentBlock.appendChild($inputBlock);
                } else {
                  var $textBlock = _this.createStaticBlock(value);
                  $contentBlock.appendChild($textBlock);
                }
              }
              if (type === 'SYSTEM') {
                if (key === 'index') {
                  var dragBlock = _this.createSystemBlockСapture();
                  $contentBlock.appendChild(dragBlock);
                  var _$textBlock = _this.createStaticBlock("".concat(count + 1));
                  $contentBlock.appendChild(_$textBlock);
                }
                if (key === 'action') {
                  var $action = _this.createSystemBlockAction(id);
                  $contentBlock.style.overflow = 'visible';
                  $contentBlock.appendChild($action);
                }
              }
              if (_this.getMediaQuery() !== 'desktop') {
                var $labelColumn = document.createElement('div');
                $labelColumn.className = classLabelColumn;
                $labelColumn.innerHTML = lable;
                fragment.appendChild($labelColumn);
              }
              fragment.appendChild($tableHeadingColumn);
              if (isLastiteration && _this.getMediaQuery() === 'desktop') {
                var $lastColumn = document.createElement('td');
                $lastColumn.style.width = 'auto';
                fragment.appendChild($lastColumn);
              }
            }
          });
          counter += 1;
          tableRow.appendChild(fragment);
          $parent.appendChild(tableRow);
        } // if (!isDeleted)
      };
      for (var i = 0; i < limitRows; i += 1) {
        _loop();
      }
    }

    // createInputBlock
  }, {
    key: "createInputBlock",
    value: function createInputBlock(value, dataID, key, isAutocomplete) {
      var _this2 = this;
      var classInputBlock = this.options.classInputBlock;
      var rows = this.data.rows;
      var $inputBlock = document.createElement('input');

      // #even handler change

      var handlerChange = function handlerChange(event) {
        var indexChangeableRow = [].findIndex.call(rows, function (row) {
          return row.id === dataID;
        });
        rows[indexChangeableRow][key] = event.target.value;
        _this2.setDataProducts(_this2.data.rows);
        _this2.setIsNewData(true);
        _this2.renderResult();
      };
      $inputBlock.type = 'cc-text';
      $inputBlock.value = value;
      $inputBlock.className = classInputBlock;
      $inputBlock.onchange = handlerChange;
      if (isAutocomplete) {
        var arrayAutocomplete = [].map.call(rows, function (row) {
          return row[key];
        });
        (0, _autocomplete["default"])($inputBlock, arrayAutocomplete);
      }
      return $inputBlock;
    }

    // createStaticBlock
  }, {
    key: "createStaticBlock",
    value: function createStaticBlock(value) {
      var classStaticBlock = this.options.classStaticBlock;
      var $staticBlock = document.createElement('div');
      $staticBlock.className = classStaticBlock;
      $staticBlock.innerText = value;
      return $staticBlock;
    }

    // createSystemBlockСapture
  }, {
    key: "createSystemBlock\u0421apture",
    value: function createSystemBlockСapture() {
      var classSystemBlockСapture = this.options.classSystemBlockСapture;
      var $dragBlock = document.createElement('div');
      $dragBlock.className = classSystemBlockСapture;
      // #event
      $dragBlock.onmouseenter = this.handlerRowMouseEnter;
      return $dragBlock;
    }

    // createSystemBlockAction
  }, {
    key: "createSystemBlockAction",
    value: function createSystemBlockAction() {
      var dataID = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var _this$options2 = this.options,
        classSystemBlockActionList = _this$options2.classSystemBlockActionList,
        classSystemBlockActionItem = _this$options2.classSystemBlockActionItem,
        classSystemBlockActionButton = _this$options2.classSystemBlockActionButton;
      function hiddenActionMenu() {
        document.querySelectorAll('[data-action-menu]').forEach(function (itemMenu) {
          itemMenu.style.display = 'none';
        });
      }
      function hendlerOutsideClick() {
        console.log('click');
        hiddenActionMenu();
        document.removeEventListener('click', hendlerOutsideClick);
      }
      function handlerActionClick(e) {
        e.stopPropagation();
        hiddenActionMenu();
        var $menu = e.target.firstElementChild || e.target.firstChild;
        if ($menu && $menu.tagName === 'UL') {
          if ($menu.style.display === 'none') {
            $menu.style.display = '';
            document.addEventListener('click', hendlerOutsideClick);
          } else {
            $menu.style.display = 'none';
            document.removeEventListener('click', hendlerOutsideClick);
          }
        }
      }
      var $actionToggle = document.createElement('div');
      $actionToggle.className = classSystemBlockActionButton;
      $actionToggle.style.position = 'relative';
      // mouse #event
      $actionToggle.onclick = handlerActionClick;
      var $actionList = document.createElement('ul');
      $actionList.className = classSystemBlockActionList;
      $actionList.dataset.actionMenu = 'row';
      $actionList.style.position = 'absolute';
      $actionList.style.display = 'none';
      $actionToggle.appendChild($actionList);
      var actions = [{
        name: 'Удалить',
        action: this.handlerActionRemoveRow
      }];
      [].forEach.call(actions, function (action) {
        var $actionItem = document.createElement('li');
        $actionItem.className = classSystemBlockActionItem;
        $actionItem.innerText = action.name;
        $actionItem.dataset.dataId = dataID;
        $actionItem.onclick = action.action;
        $actionList.appendChild($actionItem);
      });
      return $actionToggle;
    }

    // createTempRow
  }, {
    key: "createTempRow",
    value: function createTempRow() {
      var _this$options3 = this.options,
        classTempRow = _this$options3.classTempRow,
        classTempRowItem = _this$options3.classTempRowItem;
      var $row = document.createElement('tr');
      $row.style.position = 'relative';
      $row.className = classTempRow;
      $row.dataset.tempRow = '';
      var $innerBlock = document.createElement('div');
      $innerBlock.className = classTempRowItem;
      $row.appendChild($innerBlock);
      return $row;
    }

    // removeTempRow
  }, {
    key: "removeTempRow",
    value: function removeTempRow() {
      document.querySelectorAll('[data-temp-row]').forEach(function (row) {
        row.parentNode.removeChild(row);
      });
    }

    // removeRow
  }, {
    key: "removeRow",
    value: function removeRow() {
      var dataID = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      if (dataID === null && typeof dataID !== 'number') {
        console.log('Data error! not correct form ID');
        return false;
      }
      var rows = this.data.rows;
      var indexRowDeleted = [].findIndex.call(rows, function (row) {
        return row.id === dataID;
      });
      rows[indexRowDeleted].isDeleted = true;
      this.setDataProducts(this.data.rows);
      this.render();
      this.setIsNewData(true);
      return true;
    }

    // addNewRows
  }, {
    key: "addNewRows",
    value: function addNewRows() {
      // if (this.newRow.isNewRow) {
      //   if (!this.saveChangeRows()) {
      //     return false;
      //   }
      // }

      var rows = this.data.rows;
      var generateId = function generateId() {
        var id = rows.length + 1;
        var checkIdInData = function checkIdInData(n) {
          if (rows.some(function (e) {
            return e.id === n;
          })) {
            // console.log('n+1 >', n);
            checkIdInData(n += 1);
          } else {
            id = n;
          }
          return n;
        };
        return checkIdInData(id);
      };
      var newId = generateId();
      var templateRow = Object.keys(_objectSpread({}, rows.slice(-1)[0])).reduce(function (a, v) {
        return _objectSpread(_objectSpread({}, a), {}, _defineProperty({}, v, ''));
      }, {});
      templateRow.id = newId;
      templateRow.isDeleted = false;
      this.newRow.isNewRow = true;
      this.newRow.idNewRow = newId;
      this.newRow.objectNewRow = _objectSpread({}, templateRow);
      [].push.call(rows, _objectSpread({}, templateRow));
      this.setDataProducts(this.data.rows);
      this.render();
      this.setIsNewData(true);
      return true;
      // console.log('addNewRows > add!');
    }

    // saveChangeRows
  }, {
    key: "saveChangeRows",
    value: function saveChangeRows() {
      if (!this.checkValueRows()) return false;
      if (this.newRow.isNewRow) {
        this.newRow.isNewRow = false;
        this.newRow.idNewRow = null;
        this.newRow.objectNewRow = {};
      }
      this.setServerDataProducts(this.data.rows);
      return true;
    }

    // handlers
  }, {
    key: "handlerActionRemoveRow",
    value: function handlerActionRemoveRow(event) {
      event.stopPropagation();
      this.removeRow(Number(event.target.dataset.dataId));
    }

    // handlerActionClick(event) {
    //   event.stopPropagation();
    //   console.log('handlerActionClick > ', event.target);
    // }
  }, {
    key: "handlerRowMouseEnter",
    value: function handlerRowMouseEnter(event) {
      var $rowDraggable = event.target.closest('tr[draggable]');
      var handlerRowMouseLeave = function handlerRowMouseLeave() {
        $rowDraggable.draggable = false;
        event.target.removeEventListener('mouseleave', handlerRowMouseLeave);
      };
      event.target.addEventListener('mouseleave', handlerRowMouseLeave);
      $rowDraggable.draggable = true;
    }

    // event drag and drop
  }, {
    key: "handlerRowDragStart",
    value: function handlerRowDragStart(e, rowId) {
      // при начале перетаскивания элемента
      var _this$options4 = this.options,
        classDragDraggrable = _this$options4.classDragDraggrable,
        classDragOverlay = _this$options4.classDragOverlay;
      if (e.target.tagName !== 'TR') return;
      setTimeout(function () {
        e.target.classList.add(classDragDraggrable);
        e.target.style.opacity = '0.3';
      }, 100);
      var $parent = e.target.closest('tbody');
      [].forEach.call($parent.querySelectorAll('[draggable]'), function (elem) {
        elem.classList.add(classDragOverlay);
      });
      this.dragRow = true;
      this.dragCurentIndex = rowId;
    }
  }, {
    key: "handlerRowDragEnd",
    value: function handlerRowDragEnd(e) {
      var _this3 = this;
      // когда перетаскивание завершается

      var _this$options5 = this.options,
        classDragDraggrable = _this$options5.classDragDraggrable,
        classDragOverlay = _this$options5.classDragOverlay;
      this.removeTempRow();
      if (e.target.tagName !== 'TR') return;
      var $parent = e.target.closest('tbody');
      [].forEach.call($parent.querySelectorAll('[draggable]'), function (elem) {
        elem.classList.remove(classDragOverlay);
      });
      e.currentTarget.style.opacity = '1';
      e.currentTarget.classList.remove(classDragDraggrable);
      if (this.dropRow) {
        this.dragRow = false;
        this.dragCurentIndex = null;
        setTimeout(function () {
          _this3.setDataProducts(_this3.data.rows);
          _this3.render();
        }, 0);
      }
    }
  }, {
    key: "handlerRowDragOver",
    value: function handlerRowDragOver(e, rowId) {
      var _this4 = this;
      // когда элемент перетаскивается в допустимую зону

      if (this.dragRow) {
        var rows = this.data.rows;
        e.dataTransfer.dropEffect = 'move';
        var dropIndex = [].findIndex.call(rows, function (row) {
          return row.id === rowId;
        });
        var dragIndex = [].findIndex.call(rows, function (row) {
          return row.id === _this4.dragCurentIndex;
        });
        if (dropIndex !== dragIndex) {
          e.preventDefault();
        }
      }
    }
  }, {
    key: "handlerRowDragEnter",
    value: function handlerRowDragEnter(e, rowId) {
      var _this5 = this;
      // когда элемент попадает в допустимую зону
      this.removeTempRow();
      if (this.dragRow) {
        var rows = this.data.rows;
        var _this$options6 = this.options,
          classDragHover = _this$options6.classDragHover,
          classDragBefore = _this$options6.classDragBefore,
          classDragAfter = _this$options6.classDragAfter;
        e.currentTarget.classList.add(classDragHover);
        var dropIndex = [].findIndex.call(rows, function (row) {
          return row.id === rowId;
        });
        var dragIndex = [].findIndex.call(rows, function (row) {
          return row.id === _this5.dragCurentIndex;
        });
        if (dropIndex !== dragIndex) {
          var $tempRow = this.createTempRow();
          if (dropIndex < dragIndex) {
            // before
            e.currentTarget.classList.add(classDragBefore);
            // append Before
            e.currentTarget.parentNode.insertBefore($tempRow, e.currentTarget);
          }
          if (dropIndex > dragIndex) {
            // after
            e.currentTarget.classList.add(classDragAfter);
            // append After
            e.currentTarget.parentNode.insertBefore($tempRow, e.currentTarget.nextSibling);
          }
        }
      }
    }
  }, {
    key: "handlerRowDragLeave",
    value: function handlerRowDragLeave(e) {
      // когда элемент покидает допустимую зону
      if (this.dragRow) {
        var _this$options7 = this.options,
          classDragHover = _this$options7.classDragHover,
          classDragBefore = _this$options7.classDragBefore,
          classDragAfter = _this$options7.classDragAfter;
        e.currentTarget.classList.remove(classDragHover);
        e.currentTarget.classList.remove(classDragBefore);
        e.currentTarget.classList.remove(classDragAfter);
      }
    }
  }, {
    key: "handlerRowDrop",
    value: function handlerRowDrop(e, rowId) {
      var _this6 = this;
      // когда элемент отпускают в допустимую зону
      e.preventDefault();
      if (this.dragRow) {
        var _this$options8 = this.options,
          classDragHover = _this$options8.classDragHover,
          classDragBefore = _this$options8.classDragBefore,
          classDragAfter = _this$options8.classDragAfter;
        e.currentTarget.classList.remove(classDragHover);
        e.currentTarget.classList.remove(classDragBefore);
        e.currentTarget.classList.remove(classDragAfter);

        // this.removeTempRow();

        var rows = this.data.rows;
        var dropIndex = [].findIndex.call(rows, function (row) {
          return row.id === rowId;
        });
        var dragIndex = [].findIndex.call(rows, function (row) {
          return row.id === _this6.dragCurentIndex;
        });
        var cut = rows.splice(dragIndex, 1)[0];
        rows.splice(dropIndex, 0, cut);
        this.dropRow = true;
        this.setIsNewData(true);
      }
    }
  }, {
    key: "destroy",
    value: function destroy() {
      console.log('destroy(), no functionality!');
    }
  }]);
  return RowsTable;
}();
var _default = RowsTable;
exports["default"] = _default;

},{"../helpers/autocomplete":3}],10:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var ToolsTableMenu = /*#__PURE__*/function () {
  function ToolsTableMenu(props) {
    _classCallCheck(this, ToolsTableMenu);
    var defaultsOptions = {
      classParent: 'tools-table',
      classButtonAddRow: 'tools-table__add-row button-primary button-primary--simple',
      classButtonSave: 'tools-table__save-change button-primary button-primary--accept',
      classButtonСancel: 'tools-table__сancel-change',
      //
      textButtonAddRow: 'Добавить строку',
      textButtonSave: 'Сохранить'
    };
    var parentBlock = props.parentBlock,
      createNewRows = props.createNewRows,
      saveChanges = props.saveChanges,
      getIsNewData = props.getIsNewData,
      getMediaQuery = props.getMediaQuery;
    Object.assign(this, {
      parentBlock: parentBlock,
      createNewRows: createNewRows,
      saveChanges: saveChanges,
      getIsNewData: getIsNewData,
      getMediaQuery: getMediaQuery
    });
    this.options = Object.assign(defaultsOptions);
    this.node = {};

    // bind this
    this.handlerClickAddRowButton = this.handlerClickAddRowButton.bind(this);
    this.handlerClickSaveButton = this.handlerClickSaveButton.bind(this);
  } // constructor
  _createClass(ToolsTableMenu, [{
    key: "render",
    value: function render() {
      if (!this.checkParent()) {
        console.log('Error DOMElement, parent block for ToolsTableMenu, not found');
        return;
      }
      var $parent = this.parentBlock;
      var classParent = this.options.classParent;
      $parent.classList.add(classParent);
      this.сlearParentBlock();
      this.createButtonAddRow();
      if (this.getIsNewData()) this.createButtonSave();
    }
  }, {
    key: "checkParent",
    value: function checkParent() {
      if (this.parentBlock && this.parentBlock instanceof HTMLElement) {
        return true;
      }
      return false;
    }
  }, {
    key: "\u0441learParentBlock",
    value: function сlearParentBlock() {
      if (this.parentBlock.hasChildNodes()) {
        this.parentBlock.innerHTML = '';
      }
    }
  }, {
    key: "createButtonAddRow",
    value: function createButtonAddRow() {
      var _this = this;
      var $parent = this.parentBlock;
      var _this$options = this.options,
        classButtonAddRow = _this$options.classButtonAddRow,
        textButtonAddRow = _this$options.textButtonAddRow;
      var $addRowButton = document.createElement('button');
      $addRowButton.className = classButtonAddRow;
      $addRowButton.innerText = textButtonAddRow;
      $parent.appendChild($addRowButton);
      setTimeout(function () {
        $addRowButton.addEventListener('click', _this.handlerClickAddRowButton);
      }, 0);
    }
  }, {
    key: "createButtonSave",
    value: function createButtonSave() {
      var _this2 = this;
      var $parent = this.parentBlock;
      var _this$options2 = this.options,
        classButtonSave = _this$options2.classButtonSave,
        textButtonSave = _this$options2.textButtonSave;
      var $saveButton = document.createElement('button');
      $saveButton.className = classButtonSave;
      $saveButton.innerText = textButtonSave;
      $parent.appendChild($saveButton);
      setTimeout(function () {
        $saveButton.addEventListener('click', _this2.handlerClickSaveButton);
      }, 0);
    }
  }, {
    key: "handlerClickAddRowButton",
    value: function handlerClickAddRowButton() {
      this.createNewRows();
    }
  }, {
    key: "handlerClickSaveButton",
    value: function handlerClickSaveButton() {
      this.saveChanges();
    }
  }, {
    key: "destroy",
    value: function destroy() {
      console.log('destroy(), no functionality!');
    }
  }]);
  return ToolsTableMenu;
}();
var _default = ToolsTableMenu;
exports["default"] = _default;

},{}],11:[function(require,module,exports){
"use strict";

var _core = _interopRequireDefault(require("./core"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function initApp() {
  var table = new _core["default"]();
}
document.addEventListener('DOMContentLoaded', initApp);

},{"./core":2}],12:[function(require,module,exports){
"use strict";

require("./components/modules/table/scripts/table");

},{"./components/modules/table/scripts/table":11}]},{},[12])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvY29tcG9uZW50cy9tb2R1bGVzL3RhYmxlL2RhdGEvYWxsRGF0YS5qcyIsInNyYy9jb21wb25lbnRzL21vZHVsZXMvdGFibGUvc2NyaXB0cy9jb3JlLmpzIiwic3JjL2NvbXBvbmVudHMvbW9kdWxlcy90YWJsZS9zY3JpcHRzL2hlbHBlcnMvYXV0b2NvbXBsZXRlLmpzIiwic3JjL2NvbXBvbmVudHMvbW9kdWxlcy90YWJsZS9zY3JpcHRzL2hlbHBlcnMvc2VydmVyLmpzIiwic3JjL2NvbXBvbmVudHMvbW9kdWxlcy90YWJsZS9zY3JpcHRzL2hlbHBlcnMvc2xvd0Rvd25FdmVudHMuanMiLCJzcmMvY29tcG9uZW50cy9tb2R1bGVzL3RhYmxlL3NjcmlwdHMvbGliL0NvbnRleHRNZW51LmpzIiwic3JjL2NvbXBvbmVudHMvbW9kdWxlcy90YWJsZS9zY3JpcHRzL2xpYi9IZWFkZXJUYWJsZS5qcyIsInNyYy9jb21wb25lbnRzL21vZHVsZXMvdGFibGUvc2NyaXB0cy9saWIvUmVzdWx0VGFibGUuanMiLCJzcmMvY29tcG9uZW50cy9tb2R1bGVzL3RhYmxlL3NjcmlwdHMvbGliL1Jvd3NUYWJsZS5qcyIsInNyYy9jb21wb25lbnRzL21vZHVsZXMvdGFibGUvc2NyaXB0cy9saWIvVG9vbHNUYWJsZU1lbnUuanMiLCJzcmMvY29tcG9uZW50cy9tb2R1bGVzL3RhYmxlL3NjcmlwdHMvdGFibGUuanMiLCJzcmMvc2NyaXB0cy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7OztBQ0FBLElBQU0sUUFBUSxHQUFHLENBQ2Y7RUFDRSxFQUFFLEVBQUUsQ0FBQztFQUNMLFNBQVMsRUFBRSxvQkFBb0I7RUFDL0IsUUFBUSxFQUFFLG1DQUFtQztFQUM3QyxLQUFLLEVBQUUsSUFBSTtFQUNYLFFBQVEsRUFBRSxFQUFFO0VBQ1osS0FBSyxFQUFFLElBQUk7RUFDWCxNQUFNLEVBQUUs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LEVBQUEsQ0FBQSxLQUFBLGdCQUFBO0FBQUEsU0FBQSxpQkFBQSxjQUFBLFNBQUE7QUFBQSxTQUFBLDRCQUFBLENBQUEsRUFBQSxNQUFBLFNBQUEsQ0FBQSxxQkFBQSxDQUFBLHNCQUFBLGlCQUFBLENBQUEsQ0FBQSxFQUFBLE1BQUEsT0FBQSxDQUFBLEdBQUEsTUFBQSxDQUFBLFNBQUEsQ0FBQSxRQUFBLENBQUEsSUFBQSxDQUFBLENBQUEsRUFBQSxLQUFBLGFBQUEsQ0FBQSxpQkFBQSxDQUFBLENBQUEsV0FBQSxFQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsV0FBQSxDQUFBLElBQUEsTUFBQSxDQUFBLGNBQUEsQ0FBQSxtQkFBQSxLQUFBLENBQUEsSUFBQSxDQUFBLENBQUEsT0FBQSxDQUFBLCtEQUFBLElBQUEsQ0FBQSxDQUFBLFVBQUEsaUJBQUEsQ0FBQSxDQUFBLEVBQUEsTUFBQTtBQUFBLFNBQUEsa0JBQUEsR0FBQSxFQUFBLEdBQUEsUUFBQSxHQUFBLFlBQUEsR0FBQSxHQUFBLEdBQUEsQ0FBQSxNQUFBLEVBQUEsR0FBQSxHQUFBLEdBQUEsQ0FBQSxNQUFBLFdBQUEsQ0FBQSxNQUFBLElBQUEsT0FBQSxLQUFBLENBQUEsR0FBQSxHQUFBLENBQUEsR0FBQSxHQUFBLEVBQUEsQ0FBQSxJQUFBLElBQUEsQ0FBQSxDQUFBLElBQUEsR0FBQSxDQUFBLENBQUEsVUFBQSxJQUFBO0FBQUEsU0FBQSxzQkFBQSxHQUFBLEVBQUEsQ0FBQSxRQUFBLEVBQUEsV0FBQSxHQUFBLGdDQUFBLE1BQUEsSUFBQSxHQUFBLENBQUEsTUFBQSxDQUFBLFFBQUEsS0FBQSxHQUFBLDRCQUFBLEVBQUEsUUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsSUFBQSxPQUFBLEVBQUEsT0FBQSxFQUFBLGlCQUFBLEVBQUEsSUFBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLElBQUEsQ0FBQSxHQUFBLEdBQUEsSUFBQSxRQUFBLENBQUEsUUFBQSxNQUFBLENBQUEsRUFBQSxNQUFBLEVBQUEsVUFBQSxFQUFB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QUFBLENBQUEsR0FBQSxFQUFBLEdBQUEsSUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLFVBQUEsTUFBQSxZQUFBLE1BQUEsUUFBQSxTQUFBLEdBQUEsQ0FBQSxHQUFBLFdBQUEsTUFBQSxtQkFBQSxHQUFBLElBQUEsTUFBQSxZQUFBLE9BQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxLQUFBLFdBQUEsR0FBQSxDQUFBLEdBQUEsSUFBQSxLQUFBLGdCQUFBLEtBQUEsT0FBQSxFQUFBLE9BQUEsRUFBQSxJQUFBLEVBQUEsV0FBQSxRQUFBLGNBQUEsR0FBQSxPQUFBLElBQUEsT0FBQSxDQUFBLFNBQUEsWUFBQSxTQUFBLEdBQUEsT0FBQSxHQUFBLFNBQUEsRUFBQSxTQUFBLEdBQUEsTUFBQSxDQUFBLE1BQUEsQ0FBQSxjQUFBLENBQUEsU0FBQSxHQUFBLE9BQUEsT0FBQSxPQUFBLENBQUEsV0FBQSxnQkFBQSxjQUFBLENBQUEsU0FBQSxlQUFBLEtBQUEsRUFBQSxnQkFBQSxDQUFBLE9BQUEsRUFBQSxJQUFBLEVBQUEsT0FBQSxNQUFBLFNBQUEsYUFBQSxTQUFBLEVBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxtQkFBQSxJQUFBLFlBQUEsR0FBQSxFQUFBLEVBQUEsQ0FBQSxJQUFBLENBQUEsR0FBQSxFQUFBLEdBQUEsY0FBQSxHQUFBLGFBQUEsSUFBQSxXQUFBLEdBQUEsRUFBQSxHQUFBLFFBQUEsT0FBQSxDQUFBLElBQUEsR0FBQSxJQUFBLE1BQUEsZ0JBQUEsZ0JBQUEsVUFBQSxjQUFBLGtCQUFBLGNBQUEsMkJBQUEsU0FBQSxpQkFBQSxPQUFBLE1BQUEsQ0FBQSxpQkFBQSxFQUFBLGNBQUEscUNBQUEsUUFBQSxHQUFBLE1BQUEsQ0FBQSxjQUFBLEVBQUEsdUJBQUEsR0FBQSxRQUFBLElBQUEsUUFBQSxDQUFBLFFBQUEsQ0FBQSxNQUFBLFFBQUEsdUJBQUEsSUFBQSx1QkFBQSxLQUFBLEVBQUEsSUFBQSxNQUFBLENBQUEsSUFBQSxDQUFBLHVCQUFBLEVBQUEsY0FBQSxNQUFBLGlCQUFBLEdBQUEsdUJBQUEsT0FBQSxFQUFBLEdBQUEsMEJBQUEsQ0FBQSxTQUFBLEdBQUEsU0FBQSxDQUFBLFNBQUEsR0FBQSxNQUFBLENBQUEsTUFBQSxDQUFBLGlCQUFBLFlBQUEsc0JBQUEsU0FBQSxnQ0FBQSxPQUFBLFdBQUEsTUFBQSxJQUFBLE1BQUEsQ0FBQSxTQUFBLEVBQUEsTUFBQSxZQUFBLEdBQUEsZ0JBQUEsT0FBQSxDQUFBLE1BQUEsRUFBQSxHQUFBLHNCQUFBLGNBQUEsU0FBQSxFQUFBLFdBQUEsYUFBQSxPQUFBLE1BQUEsRUFBQSxHQUFBLEVBQUEsT0FBQSxFQUFBLE1BQUEsUUFBQSxNQUFBLEdBQUEsUUFBQSxDQUFBLFNBQUEsQ0FBQSxNQUFBLEdBQUEsU0FBQSxFQUFBLEdBQUEsbUJBQUEsTUFBQSxDQUFBLElBQUEsUUFBQSxNQUFBLEdBQUEsTUFBQSxDQUFBLEdBQUEsRUFBQSxLQUFBLEdBQUEsTUFBQSxDQUFBLEtBQUEsU0FBQSxLQUFBLGdCQUFBLE9BQUEsQ0FBQSxLQUFBLEtBQUEsTUFBQSxDQUFBLElBQUEsQ0FBQSxLQUFBLGVBQUEsV0FBQSxDQUFBLE9BQUEsQ0FBQSxLQUFBLENBQUEsT0FBQSxFQUFBLElBQUEsV0FBQSxLQUFBLElBQUEsTUFBQSxTQUFBLEtBQUEsRUFBQSxPQUFBLEVBQUEsTUFBQSxnQkFBQSxHQUFBLElBQUEsTUFBQSxVQUFBLEdBQUEsRUFBQSxPQUFBLEVBQUEsTUFBQSxRQUFBLFdBQUEsQ0FBQSxPQUFBLENBQUEsS0FBQSxFQUFBLElBQUEsV0FBQSxTQUFBLElBQUEsTUFBQSxDQUFBLEtBQUEsR0FBQSxTQUFBLEVBQUEsT0FBQSxDQUFBLE1BQUEsZ0JBQUEsS0FBQSxXQUFBLE1BQUEsVUFBQSxLQUFBLEVBQUEsT0FBQSxFQUFBLE1BQUEsU0FBQSxNQUFBLENBQUEsTUFBQSxDQUFBLEdBQUEsU0FBQSxlQUFBLEVBQUEsY0FBQSxvQkFBQSxLQUFBLFdBQUEsTUFBQSxNQUFBLEVBQUEsR0FBQSxhQUFBLDJCQUFBLGVBQUEsV0FBQSxXQUFBLE9BQUEsRUFBQSxNQUFBLElBQUEsTUFBQSxDQUFBLE1BQUEsRUFBQSxHQUFBLEVBQUEsT0FBQSxFQUFBLE1BQUEsZ0JBQUEsZUFBQSxHQUFBLGVBQUEsR0FBQSxlQUFBLENBQUEsSUFBQSxDQUFBLDBCQUFBLEVBQUEsMEJBQUEsSUFBQSwwQkFBQSxxQkFBQSxpQkFBQSxPQUFBLEVBQUEsSUFBQSxFQUFBLE9BQUEsUUFBQSxLQUFBLHNDQUFBLE1BQUEsRUFBQSxHQUFBLHdCQUFBLEtBQUEsWUFBQSxLQUFBLHNEQUFBLEtBQUEsb0JBQUEsTUFBQSxRQUFBLEdBQUEsU0FBQSxVQUFBLFdBQUEsT0FBQSxDQUFBLE1BQUEsR0FBQSxNQUFBLEVBQUEsT0FBQSxDQUFBLEdBQUEsR0FBQSxHQUFBLFVBQUEsUUFBQSxHQUFBLE9BQUEsQ0FBQSxRQUFBLE1BQUEsUUFBQSxRQUFBLGNBQUEsR0FBQSxtQkFBQSxDQUFBLFFBQUEsRUFBQSxPQUFBLE9BQUEsY0FBQSxRQUFBLGNBQUEsS0FBQSxnQkFBQSxtQkFBQSxjQUFBLHFCQUFBLE9BQUEsQ0FBQSxNQUFBLEVBQUEsT0FBQSxDQUFBLElBQUEsR0FBQSxPQUFBLENBQUEsS0FBQSxHQUFBLE9BQUEsQ0FBQSxHQUFBLHNCQUFBLE9BQUEsQ0FBQSxNQUFBLDZCQUFBLEtBQUEsUUFBQSxLQUFBLGdCQUFBLE9BQUEsQ0FBQSxHQUFBLEVBQUEsT0FBQSxDQUFBLGlCQUFBLENBQUEsT0FBQSxDQUFBLEdBQUEsdUJBQUEsT0FBQSxDQUFBLE1BQUEsSUFBQSxPQUFBLENBQUEsTUFBQSxXQUFBLE9BQUEsQ0FBQSxHQUFBLEdBQUEsS0FBQSxvQkFBQSxNQUFBLEdBQUEsUUFBQSxDQUFBLE9BQUEsRUFBQSxJQUFBLEVBQUEsT0FBQSxvQkFBQSxNQUFBLENBQUEsSUFBQSxRQUFBLEtBQUEsR0FBQSxPQUFBLENBQUEsSUFBQSxtQ0FBQSxNQUFBLENBQUEsR0FBQSxLQUFBLGdCQUFBLHFCQUFBLEtBQUEsRUFBQSxNQUFBLENBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxPQUFBLENBQUEsSUFBQSxrQkFBQSxNQUFBLENBQUEsSUFBQSxLQUFBLEtBQUEsZ0JBQUEsT0FBQSxDQUFBLE1BQUEsWUFBQSxPQUFBLENBQUEsR0FBQSxHQUFBLE1BQUEsQ0FBQSxHQUFBLG1CQUFBLG9CQUFBLFFBQUEsRUFBQSxPQUFBLFFBQUEsVUFBQSxHQUFBLE9BQUEsQ0FBQSxNQUFBLEVBQUEsTUFBQSxHQUFBLFFBQUEsQ0FBQSxRQUFBLENBQUEsVUFBQSxPQUFBLFNBQUEsS0FBQSxNQUFBLFNBQUEsT0FBQSxDQUFBLFFBQUEscUJBQUEsVUFBQSxJQUFBLFFBQUEsQ0FBQSxRQUFBLGVBQUEsT0FBQSxDQUFBLE1BQUEsYUFBQSxPQUFBLENBQUEsR0FBQSxHQUFBLFNBQUEsRUFBQSxtQkFBQSxDQUFBLFFBQUEsRUFBQSxPQUFBLGVBQUEsT0FBQSxDQUFBLE1BQUEsa0JBQUEsVUFBQSxLQUFBLE9BQUEsQ0FBQSxNQUFBLFlBQUEsT0FBQSxDQUFBLEdBQUEsT0FBQSxTQUFBLHVDQUFBLFVBQUEsaUJBQUEsZ0JBQUEsTUFBQSxNQUFBLEdBQUEsUUFBQSxDQUFBLE1BQUEsRUFBQSxRQUFBLENBQUEsUUFBQSxFQUFBLE9BQUEsQ0FBQSxHQUFBLG1CQUFBLE1BQUEsQ0FBQSxJQUFBLFNBQUEsT0FBQSxDQUFBLE1BQUEsWUFBQSxPQUFBLENBQUEsR0FBQSxHQUFBLE1BQUEsQ0FBQSxHQUFBLEVBQUEsT0FBQSxDQUFBLFFBQUEsU0FBQSxnQkFBQSxNQUFBLElBQUEsR0FBQSxNQUFBLENBQUEsR0FBQSxTQUFBLElBQUEsR0FBQSxJQUFBLENBQUEsSUFBQSxJQUFBLE9BQUEsQ0FBQSxRQUFBLENBQUEsVUFBQSxJQUFBLElBQUEsQ0FBQSxLQUFBLEVBQUEsT0FBQSxDQUFBLElBQUEsR0FBQSxRQUFBLENBQUEsT0FBQSxlQUFBLE9BQUEsQ0FBQSxNQUFBLEtBQUEsT0FBQSxDQUFBLE1BQUEsV0FBQSxPQUFBLENBQUEsR0FBQSxHQUFBLFNBQUEsR0FBQSxPQUFBLENBQUEsUUFBQSxTQUFBLGdCQUFBLElBQUEsSUFBQSxJQUFBLE9BQUEsQ0FBQSxNQUFBLFlBQUEsT0FBQSxDQUFBLEdBQUEsT0FBQSxTQUFBLHNDQUFBLE9BQUEsQ0FBQSxRQUFBLFNBQUEsZ0JBQUEsY0FBQSxhQUFBLElBQUEsUUFBQSxLQUFBLEtBQUEsTUFBQSxFQUFBLElBQUEsWUFBQSxJQUFBLEtBQUEsS0FBQSxDQUFBLFFBQUEsR0FBQSxJQUFBLFdBQUEsSUFBQSxLQUFBLEtBQUEsQ0FBQSxVQUFBLEdBQUEsSUFBQSxLQUFBLEtBQUEsQ0FBQSxRQUFBLEdBQUEsSUFBQSxXQUFBLFVBQUEsQ0FBQSxJQUFBLENBQUEsS0FBQSxjQUFBLGNBQUEsS0FBQSxRQUFBLE1BQUEsR0FBQSxLQUFBLENBQUEsVUFBQSxRQUFBLE1BQUEsQ0FBQSxJQUFBLG9CQUFBLE1BQUEsQ0FBQSxHQUFBLEVBQUEsS0FBQSxDQUFBLFVBQUEsR0FBQSxNQUFBLGFBQUEsUUFBQSxXQUFBLFNBQUEsVUFBQSxNQUFBLE1BQUEsYUFBQSxXQUFBLENBQUEsT0FBQSxDQUFBLFlBQUEsY0FBQSxLQUFBLGlCQUFBLE9BQUEsUUFBQSxRQUFBLFFBQUEsUUFBQSxjQUFBLEdBQUEsUUFBQSxDQUFBLGNBQUEsT0FBQSxjQUFBLFNBQUEsY0FBQSxDQUFBLElBQUEsQ0FBQSxRQUFBLDRCQUFBLFFBQUEsQ0FBQSxJQUFBLFNBQUEsUUFBQSxPQUFBLEtBQUEsQ0FBQSxRQUFBLENBQUEsTUFBQSxTQUFBLENBQUEsT0FBQSxJQUFBLFlBQUEsS0FBQSxhQUFBLENBQUEsR0FBQSxRQUFBLENBQUEsTUFBQSxPQUFBLE1BQUEsQ0FBQSxJQUFBLENBQUEsUUFBQSxFQUFBLENBQUEsVUFBQSxJQUFBLENBQUEsS0FBQSxHQUFBLFFBQUEsQ0FBQSxDQUFBLEdBQUEsSUFBQSxDQUFBLElBQUEsT0FBQSxJQUFBLFNBQUEsSUFBQSxDQUFBLEtBQUEsR0FBQSxTQUFBLEVBQUEsSUFBQSxDQUFBLElBQUEsT0FBQSxJQUFBLFlBQUEsSUFBQSxDQUFBLElBQUEsR0FBQSxJQUFBLGVBQUEsSUFBQSxFQUFBLFVBQUEsZUFBQSxXQUFBLGFBQUEsS0FBQSxFQUFBLFNBQUEsRUFBQSxJQUFBLGlCQUFBLGlCQUFBLENBQUEsU0FBQSxHQUFBLDBCQUFBLEVBQUEsY0FBQSxDQUFBLEVBQUEsbUJBQUEsS0FBQSxFQUFBLDBCQUFBLEVBQUEsWUFBQSxTQUFBLGNBQUEsQ0FBQSwwQkFBQSxtQkFBQSxLQUFBLEVBQUEsaUJBQUEsRUFBQSxZQUFBLFNBQUEsaUJBQUEsQ0FBQSxXQUFBLEdBQUEsTUFBQSxDQUFBLDBCQUFBLEVBQUEsaUJBQUEsd0JBQUEsT0FBQSxDQUFBLG1CQUFBLGFBQUEsTUFBQSxRQUFBLElBQUEsd0JBQUEsTUFBQSxJQUFBLE1BQUEsQ0FBQSxXQUFBLFdBQUEsSUFBQSxLQUFBLElBQUEsS0FBQSxpQkFBQSw2QkFBQSxJQUFBLENBQUEsV0FBQSxJQUFBLElBQUEsQ0FBQSxJQUFBLE9BQUEsT0FBQSxDQUFBLElBQUEsYUFBQSxNQUFBLFdBQUEsTUFBQSxDQUFBLGNBQUEsR0FBQSxNQUFBLENBQUEsY0FBQSxDQUFBLE1BQUEsRUFBQSwwQkFBQSxLQUFBLE1BQUEsQ0FBQSxTQUFBLEdBQUEsMEJBQUEsRUFBQSxNQUFBLENBQUEsTUFBQSxFQUFBLGlCQUFBLHlCQUFBLE1BQUEsQ0FBQSxTQUFBLEdBQUEsTUFBQSxDQUFBLE1BQUEsQ0FBQSxFQUFBLEdBQUEsTUFBQSxLQUFBLE9BQUEsQ0FBQSxLQUFBLGFBQUEsR0FBQSxhQUFBLE9BQUEsRUFBQSxHQUFBLE9BQUEscUJBQUEsQ0FBQSxhQUFBLENBQUEsU0FBQSxHQUFBLE1BQUEsQ0FBQSxhQUFBLENBQUEsU0FBQSxFQUFBLG1CQUFBLGlDQUFBLE9BQUEsQ0FBQSxhQUFBLEdBQUEsYUFBQSxFQUFBLE9BQUEsQ0FBQSxLQUFBLGFBQUEsT0FBQSxFQUFBLE9BQUEsRUFBQSxJQUFBLEVBQUEsV0FBQSxFQUFBLFdBQUEsZUFBQSxXQUFBLEtBQUEsV0FBQSxHQUFBLE9BQUEsT0FBQSxJQUFBLE9BQUEsYUFBQSxDQUFBLElBQUEsQ0FBQSxPQUFBLEVBQUEsT0FBQSxFQUFBLElBQUEsRUFBQSxXQUFBLEdBQUEsV0FBQSxVQUFBLE9BQUEsQ0FBQSxtQkFBQSxDQUFBLE9BQUEsSUFBQSxJQUFBLEdBQUEsSUFBQSxDQUFBLElBQUEsR0FBQSxJQUFBLFdBQUEsTUFBQSxXQUFBLE1BQUEsQ0FBQSxJQUFBLEdBQUEsTUFBQSxDQUFBLEtBQUEsR0FBQSxJQUFBLENBQUEsSUFBQSxXQUFBLHFCQUFBLENBQUEsRUFBQSxHQUFBLE1BQUEsQ0FBQSxFQUFBLEVBQUEsaUJBQUEsZ0JBQUEsTUFBQSxDQUFBLEVBQUEsRUFBQSxjQUFBLGlDQUFBLE1BQUEsQ0FBQSxFQUFBLDZEQUFBLE9BQUEsQ0FBQSxJQUFBLGFBQUEsR0FBQSxRQUFBLE1BQUEsR0FBQSxNQUFBLENBQUEsR0FBQSxHQUFBLElBQUEsZ0JBQUEsR0FBQSxJQUFBLE1BQUEsRUFBQSxJQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsVUFBQSxJQUFBLENBQUEsT0FBQSxhQUFBLEtBQUEsV0FBQSxJQUFBLENBQUEsTUFBQSxTQUFBLEdBQUEsR0FBQSxJQUFBLENBQUEsR0FBQSxRQUFBLEdBQUEsSUFBQSxNQUFBLFNBQUEsSUFBQSxDQUFBLEtBQUEsR0FBQSxHQUFBLEVBQUEsSUFBQSxDQUFBLElBQUEsT0FBQSxJQUFBLFdBQUEsSUFBQSxDQUFBLElBQUEsT0FBQSxJQUFBLFFBQUEsT0FBQSxDQUFBLE1BQUEsR0FBQSxNQUFBLEVBQUEsT0FBQSxDQUFBLFNBQUEsS0FBQSxXQUFBLEVBQUEsT0FBQSxFQUFBLEtBQUEsV0FBQSxNQUFBLGFBQUEsYUFBQSxJQUFBLFdBQUEsSUFBQSxXQUFBLElBQUEsUUFBQSxLQUFBLEdBQUEsU0FBQSxPQUFBLElBQUEsWUFBQSxRQUFBLGNBQUEsTUFBQSxnQkFBQSxHQUFBLEdBQUEsU0FBQSxPQUFBLFVBQUEsQ0FBQSxPQUFBLENBQUEsYUFBQSxJQUFBLGFBQUEsV0FBQSxJQUFBLGtCQUFBLElBQUEsQ0FBQSxNQUFBLE9BQUEsTUFBQSxDQUFBLElBQUEsT0FBQSxJQUFBLE1BQUEsS0FBQSxFQUFBLElBQUEsQ0FBQSxLQUFBLGNBQUEsSUFBQSxJQUFBLFNBQUEsTUFBQSxJQUFBLFdBQUEsS0FBQSxTQUFBLElBQUEsV0FBQSxVQUFBLFFBQUEsVUFBQSxJQUFBLFVBQUEsa0JBQUEsVUFBQSxDQUFBLElBQUEsUUFBQSxVQUFBLENBQUEsR0FBQSxjQUFBLElBQUEsS0FBQSxpQkFBQSxXQUFBLGtCQUFBLFNBQUEsYUFBQSxJQUFBLFFBQUEsU0FBQSxNQUFBLE9BQUEsa0JBQUEsT0FBQSxHQUFBLEVBQUEsTUFBQSxXQUFBLE1BQUEsQ0FBQSxJQUFBLFlBQUEsTUFBQSxDQUFBLEdBQUEsR0FBQSxTQUFBLEVBQUEsT0FBQSxDQUFBLElBQUEsR0FBQSxHQUFBLEVBQUEsTUFBQSxLQUFBLE9BQUEsQ0FBQSxNQUFBLFdBQUEsT0FBQSxDQUFBLEdBQUEsR0FBQSxTQUFBLEtBQUEsTUFBQSxhQUFBLENBQUEsUUFBQSxVQUFBLENBQUEsTUFBQSxNQUFBLENBQUEsU0FBQSxDQUFBLFFBQUEsS0FBQSxRQUFBLFVBQUEsQ0FBQSxDQUFBLEdBQUEsTUFBQSxHQUFBLEtBQUEsQ0FBQSxVQUFBLGlCQUFBLEtBQUEsQ0FBQSxNQUFBLFNBQUEsTUFBQSxhQUFBLEtBQUEsQ0FBQSxNQUFBLFNBQUEsSUFBQSxRQUFBLFFBQUEsR0FBQSxNQUFBLENBQUEsSUFBQSxDQUFBLEtBQUEsZUFBQSxVQUFBLEdBQUEsTUFBQSxDQUFBLElBQUEsQ0FBQSxLQUFBLHFCQUFBLFFBQUEsSUFBQSxVQUFBLGFBQUEsSUFBQSxHQUFBLEtBQUEsQ0FBQSxRQUFBLFNBQUEsTUFBQSxDQUFBLEtBQUEsQ0FBQSxRQUFBLGdCQUFBLElBQUEsR0FBQSxLQUFBLENBQUEsVUFBQSxTQUFBLE1BQUEsQ0FBQSxLQUFBLENBQUEsVUFBQSxjQUFBLFFBQUEsYUFBQSxJQUFBLEdBQUEsS0FBQSxDQUFBLFFBQUEsU0FBQSxNQUFBLENBQUEsS0FBQSxDQUFBLFFBQUEscUJBQUEsVUFBQSxZQUFBLEtBQUEscURBQUEsSUFBQSxHQUFBLEtBQUEsQ0FBQSxVQUFBLFNBQUEsTUFBQSxDQUFBLEtBQUEsQ0FBQSxVQUFBLFlBQUEsTUFBQSxXQUFBLE9BQUEsSUFBQSxFQUFBLEdBQUEsYUFBQSxDQUFBLFFBQUEsVUFBQSxDQUFBLE1BQUEsTUFBQSxDQUFBLFNBQUEsQ0FBQSxRQUFBLEtBQUEsUUFBQSxVQUFBLENBQUEsQ0FBQSxPQUFBLEtBQUEsQ0FBQSxNQUFBLFNBQUEsSUFBQSxJQUFBLE1BQUEsQ0FBQSxJQUFBLENBQUEsS0FBQSx3QkFBQSxJQUFBLEdBQUEsS0FBQSxDQUFBLFVBQUEsUUFBQSxZQUFBLEdBQUEsS0FBQSxhQUFBLFlBQUEsaUJBQUEsSUFBQSxtQkFBQSxJQUFBLEtBQUEsWUFBQSxDQUFBLE1BQUEsSUFBQSxHQUFBLElBQUEsR0FBQSxJQUFBLFlBQUEsQ0FBQSxVQUFBLEtBQUEsWUFBQSxjQUFBLE1BQUEsR0FBQSxZQUFBLEdBQUEsWUFBQSxDQUFBLFVBQUEsY0FBQSxNQUFBLENBQUEsSUFBQSxHQUFBLElBQUEsRUFBQSxNQUFBLENBQUEsR0FBQSxHQUFBLEdBQUEsRUFBQSxZQUFBLFNBQUEsTUFBQSxnQkFBQSxJQUFBLEdBQUEsWUFBQSxDQUFBLFVBQUEsRUFBQSxnQkFBQSxTQUFBLFFBQUEsQ0FBQSxNQUFBLE1BQUEsUUFBQSxXQUFBLFNBQUEsTUFBQSxFQUFBLFFBQUEsb0JBQUEsTUFBQSxDQUFBLElBQUEsUUFBQSxNQUFBLENBQUEsR0FBQSxxQkFBQSxNQUFBLENBQUEsSUFBQSxtQkFBQSxNQUFBLENBQUEsSUFBQSxRQUFBLElBQUEsR0FBQSxNQUFBLENBQUEsR0FBQSxnQkFBQSxNQUFBLENBQUEsSUFBQSxTQUFBLElBQUEsUUFBQSxHQUFBLEdBQUEsTUFBQSxDQUFBLEdBQUEsT0FBQSxNQUFBLGtCQUFBLElBQUEseUJBQUEsTUFBQSxDQUFBLElBQUEsSUFBQSxRQUFBLFVBQUEsSUFBQSxHQUFBLFFBQUEsR0FBQSxnQkFBQSxLQUFBLE1BQUEsV0FBQSxPQUFBLFVBQUEsYUFBQSxDQUFBLFFBQUEsVUFBQSxDQUFBLE1BQUEsTUFBQSxDQUFBLFNBQUEsQ0FBQSxRQUFBLEtBQUEsUUFBQSxVQUFBLENBQUEsQ0FBQSxPQUFBLEtBQUEsQ0FBQSxVQUFBLEtBQUEsVUFBQSxjQUFBLFFBQUEsQ0FBQSxLQUFBLENBQUEsVUFBQSxFQUFBLEtBQUEsQ0FBQSxRQUFBLEdBQUEsYUFBQSxDQUFBLEtBQUEsR0FBQSxnQkFBQSx5QkFBQSxPQUFBLE1BQUEsYUFBQSxDQUFBLFFBQUEsVUFBQSxDQUFBLE1BQUEsTUFBQSxDQUFBLFNBQUEsQ0FBQSxRQUFBLEtBQUEsUUFBQSxVQUFBLENBQUEsQ0FBQSxPQUFBLEtBQUEsQ0FBQSxNQUFBLEtBQUEsTUFBQSxRQUFBLE1BQUEsR0FBQSxLQUFBLENBQUEsVUFBQSxrQkFBQSxNQUFBLENBQUEsSUFBQSxRQUFBLE1BQUEsR0FBQSxNQUFBLENBQUEsR0FBQSxFQUFBLGFBQUEsQ0FBQSxLQUFBLFlBQUEsTUFBQSxnQkFBQSxLQUFBLDhCQUFBLGFBQUEsV0FBQSxjQUFBLFFBQUEsRUFBQSxVQUFBLEVBQUEsT0FBQSxnQkFBQSxRQUFBLEtBQUEsUUFBQSxFQUFBLE1BQUEsQ0FBQSxRQUFBLEdBQUEsVUFBQSxFQUFBLFVBQUEsRUFBQSxPQUFBLEVBQUEsT0FBQSxvQkFBQSxNQUFBLFVBQUEsR0FBQSxHQUFBLFNBQUEsR0FBQSxnQkFBQSxPQUFBLE9BQUE7QUFBQSxTQUFBLG1CQUFBLEdBQUEsRUFBQSxPQUFBLEVBQUEsTUFBQSxFQUFBLEtBQUEsRUFBQSxNQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsY0FBQSxJQUFBLEdBQUEsR0FBQSxDQUFBLEdBQUEsRUFBQSxHQUFBLE9BQUEsS0FBQSxHQUFBLElBQUEsQ0FBQSxLQUFBLFdBQUEsS0FBQSxJQUFBLE1BQUEsQ0FBQSxLQUFBLGlCQUFBLElBQUEsQ0FBQSxJQUFBLElBQUEsT0FBQSxDQUFBLEtBQUEsWUFBQSxPQUFBLENBQUEsT0FBQSxDQUFBLEtBQUEsRUFBQSxJQUFBLENBQUEsS0FBQSxFQUFBLE1BQUE7QUFBQSxTQUFBLGtCQUFBLEVBQUEsNkJBQUEsSUFBQSxTQUFBLElBQUEsR0FBQSxTQUFBLGFBQUEsT0FBQSxXQUFBLE9BQUEsRUFBQSxNQUFBLFFBQUEsR0FBQSxHQUFB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LFNBQUEsUUFBQSxHQUFBLHNDQUFBLE9BQUEsd0JBQUEsTUFBQSx1QkFBQSxNQUFBLENBQUEsUUFBQSxhQUFBLEdBQUEsa0JBQUEsR0FBQSxnQkFBQSxHQUFBLFdBQUEsR0FBQSx5QkFBQSxNQUFBLElBQUEsR0FBQSxDQUFBLFdBQUEsS0FBQSxNQUFBLElBQUEsR0FBQSxLQUFBLE1BQUEsQ0FBQSxTQUFBLHFCQUFBLEdBQUEsS0FBQSxPQUFBLENBQUEsR0FBQTtBQUFBLFNBQUEsUUFBQSxNQUFBLEVBQUEsY0FBQSxRQUFBLElBQUEsR0FBQSxNQUFBLENBQUEsSUFBQSxDQUFBLE1BQUEsT0FBQSxNQUFBLENBQUEscUJBQUEsUUFBQSxPQUFBLEdBQUEsTUFBQSxDQUFBLHFCQUFBLENBQUEsTUFBQSxHQUFBLGNBQUEsS0FBQSxPQUFBLEdBQUEsT0FBQSxDQUFBLE1BQUEsV0FBQSxHQUFBLFdBQUEsTUFBQSxDQUFBLHdCQUFBLENBQUEsTUFBQSxFQUFBLEdBQUEsRUFBQSxVQUFBLE9BQUEsSUFBQSxDQUFBLElBQUEsQ0FBQSxLQUFBLENBQUEsSUFBQSxFQUFBLE9BQUEsWUFBQSxJQUFBO0FBQUEsU0FBQSxjQUFBLE1BQUEsYUFBQSxDQUFBLE1BQUEsQ0FBQSxHQUFBLFNBQUEsQ0FBQSxNQUFBLEVBQUEsQ0FBQSxVQUFBLE1BQUEsV0FBQSxTQUFBLENBQUEsQ0FBQSxJQUFBLFNBQUEsQ0FBQSxDQUFBLFFBQUEsQ0FBQSxPQUFBLE9BQUEsQ0FBQSxNQUFBLENBQUEsTUFBQSxPQUFBLE9BQUEsV0FBQSxHQUFBLElBQUEsZUFBQSxDQUFBLE1BQUEsRUFBQSxHQUFBLEVBQUEsTUFBQSxDQUFBLEdBQUEsU0FBQSxNQUFBLENBQUEseUJBQUEsR0FBQSxNQUFBLENBQUEsZ0JBQUEsQ0FBQSxNQUFBLEVBQUEsTUFBQSxDQUFBLHlCQUFBLENBQUEsTUFBQSxLQUFBLE9BQUEsQ0FBQSxNQUFBLENBQUEsTUFBQSxHQUFBLE9BQUEsV0FBQSxHQUFBLElBQUEsTUFBQSxDQUFBLGNBQUEsQ0FBQSxNQUFBLEVBQUEsR0FBQSxFQUFBLE1BQUEsQ0FBQSx3QkFBQSxDQUFBLE1BQUEsRUFBQSxHQUFBLGlCQUFBLE1BQUE7QUFBQSxTQUFBLGdCQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsS0FBQSxJQUFBLEdBQUEsR0FBQSxjQUFBLENBQUEsR0FBQSxPQUFBLEdBQUEsSUFBQSxHQUFBLElBQUEsTUFBQSxDQUFBLGNBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBQSxJQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsVUFBQSxRQUFBLFlBQUEsUUFBQSxRQUFBLG9CQUFBLEdBQUEsQ0FBQSxHQUFBLElBQUEsS0FBQSxXQUFBLEdBQUE7QUFBQSxTQUFBLGdCQUFBLFFBQUEsRUFBQSxXQUFBLFVBQUEsUUFBQSxZQUFBLFdBQUEsZUFBQSxTQUFBO0FBQUEsU0FBQSxrQkFBQSxNQUFBLEVBQUEsS0FBQSxhQUFBLENBQUEsTUFBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLE1BQUEsRUFBQSxDQUFBLFVBQUEsVUFBQSxHQUFBLEtBQUEsQ0FBQSxDQUFBLEdBQUEsVUFBQSxDQUFBLFVBQUEsR0FBQSxVQUFBLENBQUEsVUFBQSxXQUFBLFVBQUEsQ0FBQSxZQUFBLHdCQUFBLFVBQUEsRUFBQSxVQUFBLENBQUEsUUFBQSxTQUFBLE1BQUEsQ0FBQSxjQUFBLENBQUEsTUFBQSxFQUFBLGNBQUEsQ0FBQSxVQUFBLENBQUEsR0FBQSxHQUFBLFVBQUE7QUFBQSxTQUFBLGFBQUEsV0FBQSxFQUFBLFVBQUEsRUFBQSxXQUFBLFFBQUEsVUFBQSxFQUFBLGlCQUFBLENBQUEsV0FBQSxDQUFBLFNBQUEsRUFBQSxVQUFBLE9BQUEsV0FBQSxFQUFBLGlCQUFBLENBQUEsV0FBQSxFQUFBLFdBQUEsR0FBQSxNQUFBLENBQUEsY0FBQSxDQUFBLFdBQUEsaUJBQUEsUUFBQSxtQkFBQSxXQUFBO0FBQUEsU0FBQSxlQUFBLEdBQUEsUUFBQSxHQUFBLEdBQUEsWUFBQSxDQUFBLEdBQUEsb0JBQUEsT0FBQSxDQUFBLEdBQUEsaUJBQUEsR0FBQSxHQUFBLE1BQUEsQ0FBQSxHQUFBO0FBQUEsU0FB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O01BQ3ZCLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNwQjtFQUFDO0lBQUEsR0FBQTtJQUFBLEtBQUEsRUFFRCxTQUFBLFFBQUEsRUFBVTtNQUNSLE9BQU8sQ0FBQyxHQUFHLENBQUMsOEJBQThCLENBQUM7SUFDN0M7RUFBQztFQUFBLE9BQUEsY0FBQTtBQUFBO0FBQUEsSUFBQSxRQUFBLEdBR1ksY0FBYztBQUFBLE9BQUEsY0FBQSxRQUFBOzs7OztBQ25HN0IsSUFBQSxLQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBO0FBQWtDLFNBQUEsdUJBQUEsR0FBQSxXQUFBLEdBQUEsSUFBQSxHQUFBLENBQUEsVUFBQSxHQUFBLEdBQUEsZ0JBQUEsR0FBQTtBQUVsQyxTQUFTLE9BQU8sQ0FBQSxFQUFHO0VBQ2pCLElBQU0sS0FBSyxHQUFHLElBQUksZ0JBQVksQ0FBQyxDQUFDO0FBQ2xDO0FBRUEsUUFBUSxDQUFDLGdCQUFnQixDQUFDLGtCQUFrQixFQUFFLE9BQU8sQ0FBQzs7Ozs7QUNEdEQsT0FBQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gcihlLG4sdCl7ZnVuY3Rpb24gbyhpLGYpe2lmKCFuW2ldKXtpZighZVtpXSl7dmFyIGM9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighZiYmYylyZXR1cm4gYyhpLCEwKTtpZih1KXJldHVybiB1KGksITApO3ZhciBhPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIraStcIidcIik7dGhyb3cgYS5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGF9dmFyIHA9bltpXT17ZXhwb3J0czp7fX07ZVtpXVswXS5jYWxsKHAuZXhwb3J0cyxmdW5jdGlvbihyKXt2YXIgbj1lW2ldWzFdW3JdO3JldHVybiBvKG58fHIpfSxwLHAuZXhwb3J0cyxyLGUsbix0KX1yZXR1cm4gbltpXS5leHBvcnRzfWZvcih2YXIgdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGk9MDtpPHQubGVuZ3RoO2krKylvKHRbaV0pO3JldHVybiBvfXJldHVybiByfSkoKSIsImNvbnN0IHByb2R1Y3RzID0gW1xuICB7XG4gICAgaWQ6IDEsXG4gICAgc2hvcnROYW1lOiAn0JzRgNCw0LzQvtGA0L3Ri9C5INGJ0LXQsdC10L3RjCAxJyxcbiAgICBsb25nTmFtZTogJ9Cc0YDQsNC80L7RgNC90YvQuSDRidC10LHQtdC90Ywg0YTRgC4gMi01INC80LwsIDI10LrQsycsXG4gICAgcHJpY2U6IDEyMzEsXG4gICAgcXVhbnRpdHk6IDEyLFxuICAgIHRvdGFsOiAxMjMxLFxuICAgIHdlaWdodDogMyxcbiAgICBzaGlwcGluZ9Chb3N0OiAzMDAsXG4gICAgbWF4Q2FwYWNpdHk6IDI0MDAsXG4gICAgaXNEZWxldGVkOiBmYWxzZSxcbiAgfSxcbiAge1xuICAgIGlkOiAyLFxuICAgIHNob3J0TmFtZTogJ9Cc0YDQsNC80L7RgNC90YvQuSDRidC10LHQtdC90YwgMicsXG4gICAgbG9uZ05hbWU6ICfQnNGA0LDQvNC+0YDQvdGL0Lkg0YnQtdCx0LXQvdGMINGE0YAuIDItNSDQvNC8LCAyNdC60LMnLFxuICAgIHByaWNlOiAxMzMxLFxuICAgIHF1YW50aXR5OiAxNSxcbiAgICB0b3RhbDogMTMzMSxcbiAgICB3ZWlnaHQ6IDMsXG4gICAgc2hpcHBpbmfQoW9zdDogMzAwLFxuICAgIG1heENhcGFjaXR5OiAyNDAwLFxuICAgIGlzRGVsZXRlZDogdHJ1ZSxcbiAgfSxcbiAge1xuICAgIGlkOiAzLFxuICAgIHNob3J0TmFtZTogJ9Cc0YDQsNC80L7RgNC90YvQuSDRidC10LHQtdC90YwgMycsXG4gICAgbG9uZ05hbWU6ICfQnNGA0LDQvNC+0YDQvdGL0Lkg0YnQtdCx0LXQvdGMINGE0YAuIDItNSDQvNC8LCAyNdC60LMnLFxuICAgIHByaWNlOiAxNDMxLFxuICAgIHF1YW50aXR5OiAxNyxcbiAgICB0b3RhbDogMTQzMSxcbiAgICB3ZWlnaHQ6IDMsXG4gICAgc2hpcHBpbmfQoW9zdDogMzAwLFxuICAgIG1heENhcGFjaXR5OiAyNDAwLFxuICAgIGlzRGVsZXRlZDogZmFsc2UsXG4gIH0sXG4gIHtcbiAgICBpZDogNCxcbiAgICBzaG9ydE5hbWU6ICfQnNGA0LDQvNC+0YDQvdGL0Lkg0YnQtdCx0LXQvdGMIDQnLFxuICAgIGxvbmdOYW1lOiAn0JzRgNCw0LzQvtGA0L3Ri9C5INGJ0LXQsdC10L3RjCDRhNGALiAyLTUg0LzQvCwgMjXQutCzJyxcbiAgICBwcmljZTogMTUzMSxcbiAgICBxdWFudGl0eTogMTMsXG4gICAgdG90YWw6IDE1MzEsXG4gICAgd2VpZ2h0OiAzLFxuICAgIHNoaXBwaW5n0KFvc3Q6IDMwMCxcbiAgICBtYXhDYXBhY2l0eTogMjQwMCxcbiAgICBpc0RlbGV0ZWQ6IGZhbHNlLFxuICB9LFxuICB7XG4gICAgaWQ6IDUsXG4gICAgc2hvcnROYW1lOiAn0JzRgNCw0LzQvtGA0L3Ri9C5INGJ0LXQsdC10L3RjCA1JyxcbiAgICBsb25nTmFtZTogJ9Cc0YDQsNC80L7RgNC90YvQuSDRidC10LHQtdC90Ywg0YTRgC4gMi01INC80LwsIDI10LrQsycsXG4gICAgcHJpY2U6IDEyNTEsXG4gICAgcXVhbnRpdHk6IDE0LFxuICAgIHRvdGFsOiAxMjUxLFxuICAgIHdlaWdodDogMyxcbiAgICBzaGlwcGluZ9Chb3N0OiAzMDAsXG4gICAgbWF4Q2FwYWNpdHk6IDI0MDAsXG4gICAgaXNEZWxldGVkOiBmYWxzZSxcbiAgfSxcbiAge1xuICAgIGlkOiA2LFxuICAgIHNob3J0TmFtZTogJ9Cc0YDQsNC80L7RgNC90YvQuSDRidC10LHQtdC90YwgNicsXG4gICAgbG9uZ05hbWU6ICfQnNGA0LDQvNC+0YDQvdGL0Lkg0YnQtdCx0LXQvdGMINGE0YAuIDItNSDQvNC8LCAyNdC60LMnLFxuICAgIHByaWNlOiAxMzcxLFxuICAgIHF1YW50aXR5OiAxOCxcbiAgICB0b3RhbDogMTM3MSxcbiAgICB3ZWlnaHQ6IDMsXG4gICAgc2hpcHBpbmfQoW9zdDogMzAwLFxuICAgIG1heENhcGFjaXR5OiAyNDAwLFxuICAgIGlzRGVsZXRlZDogZmFsc2UsXG4gIH0sXG4gIHtcbiAgICBpZDogNyxcbiAgICBzaG9ydE5hbWU6ICfQnNGA0LDQvNC+0YDQvdGL0Lkg0YnQtdCx0LXQvdGMIDcnLFxuICAgIGxvbmdOYW1lOiAn0JzRgNCw0LzQvtGA0L3Ri9C5INGJ0LXQsdC10L3RjCDRhNGALiAyLTUg0LzQvCwgMjXQutCzJyxcbiAgICBwcmljZTogMTM1MSxcbiAgICBxdWFudGl0eTogOSxcbiAgICB0b3RhbDogMTM1MSxcbiAgICB3ZWlnaHQ6IDMsXG4gICAgc2hpcHBpbmfQoW9zdDogMzAwLFxuICAgIG1heENhcGFjaXR5OiAyNDAwLFxuICAgIGlzRGVsZXRlZDogZmFsc2UsXG4gIH0sXG5cbl07XG5cbmNvbnN0IHRhYmxlQ29sdW1ucyA9IFtcbiAge1xuICAgIGlkOiAwLFxuICAgIGtleTogJ2luZGV4JyxcbiAgICB0eXBlOiAnU1lTVEVNJywgLy8gU1lTVEVNIHwgREFUQVxuICAgIGNvbHVtbk9wdGlvbnM6IHtcbiAgICAgIHRpdGxlOiAn0J3QvtC80LXRgCcsXG4gICAgICBsYWJsZTogJ9Cd0L7QvNC10YAnLFxuICAgICAgdmFsaWRhdGVkOiAnJyxcbiAgICAgIHdpZHRoOiAnNDhweCcsXG4gICAgICBpc0F1dG9jb21wbGV0ZTogZmFsc2UsXG4gICAgICBpc0Rpc3BsYXk6IHRydWUsXG4gICAgICBpc0Fsd2F5c1Zpc2libGU6IHRydWUsXG4gICAgICBpc1Jlc2l6ZTogZmFsc2UsXG4gICAgICBpc0RyYWdnYWJsZTogZmFsc2UsXG4gICAgICBpc0VkaXRhYmxlOiBmYWxzZSxcbiAgICAgIG1lZGlhUXVlcnk6IFsnZGVza3RvcCddLFxuICAgIH0sXG4gIH0sXG4gIHtcbiAgICBpZDogMSxcbiAgICBrZXk6ICdhY3Rpb24nLFxuICAgIHR5cGU6ICdTWVNURU0nLCAvLyBTWVNURU0gfCBEQVRBXG4gICAgY29sdW1uT3B0aW9uczoge1xuICAgICAgdGl0bGU6ICfQlCcsXG4gICAgICBsYWJsZTogJ9CU0LXQudGB0YLQstC40LUnLFxuICAgICAgdmFsaWRhdGVkOiAnJyxcbiAgICAgIHdpZHRoOiAnMjJweCcsXG4gICAgICBpc0F1dG9jb21wbGV0ZTogZmFsc2UsXG4gICAgICBpc0Rpc3BsYXk6IHRydWUsXG4gICAgICBpc0Fsd2F5c1Zpc2libGU6IHRydWUsXG4gICAgICBpc1Jlc2l6ZTogZmFsc2UsXG4gICAgICBpc0RyYWdnYWJsZTogZmFsc2UsXG4gICAgICBpc0VkaXRhYmxlOiBmYWxzZSxcbiAgICAgIG1lZGlhUXVlcnk6IFsnZGVza3RvcCcsICd0YWJsZXQnLCAnbW9iaWxlJ10sXG4gICAgfSxcbiAgfSxcbiAge1xuICAgIGlkOiAzLFxuICAgIGtleTogJ2xvbmdOYW1lJyxcbiAgICB0eXBlOiAnREFUQScsIC8vIFNZU1RFTSB8IERBVEFcbiAgICBjb2x1bW5PcHRpb25zOiB7XG4gICAgICB0aXRsZTogJ9Cd0LDQuNC80LXQvdC+0LLQsNC90LjQtSDQtdC00LXQvdC40YbRiycsXG4gICAgICBsYWJsZTogJ9Cd0LDQuNC80LXQvdC+0LLQsNC90LjQtSDQtdC00LXQvdC40YbRiycsXG4gICAgICB2YWxpZGF0ZWQ6ICd0ZXh0JyxcbiAgICAgIHdpZHRoOiAyLjg1LFxuICAgICAgaXNBdXRvY29tcGxldGU6IHRydWUsXG4gICAgICBpc0Rpc3BsYXk6IHRydWUsXG4gICAgICBpc0Fsd2F5c1Zpc2libGU6IHRydWUsXG4gICAgICBpc1Jlc2l6ZTogdHJ1ZSxcbiAgICAgIGlzRHJhZ2dhYmxlOiB0cnVlLFxuICAgICAgaXNFZGl0YWJsZTogdHJ1ZSxcbiAgICAgIG1lZGlhUXVlcnk6IFsnZGVza3RvcCcsICd0YWJsZXQnLCAnbW9iaWxlJ10sXG4gICAgfSxcbiAgfSxcbiAge1xuICAgIGlkOiA0LFxuICAgIGtleTogJ3ByaWNlJyxcbiAgICB0eXBlOiAnREFUQScsIC8vIFNZU1RFTSB8IERBVEFcbiAgICBjb2x1bW5PcHRpb25zOiB7XG4gICAgICB0aXRsZTogJ9Cm0LXQvdCwJyxcbiAgICAgIGxhYmxlOiAn0KbQtdC90LAnLFxuICAgICAgdmFsaWRhdGVkOiAnbnVtYmVyJyxcbiAgICAgIHdpZHRoOiAxLFxuICAgICAgaXNBdXRvY29tcGxldGU6IGZhbHNlLFxuICAgICAgaXNEaXNwbGF5OiB0cnVlLFxuICAgICAgaXNBbHdheXNWaXNpYmxlOiB0cnVlLFxuICAgICAgaXNSZXNpemU6IHRydWUsXG4gICAgICBpc0RyYWdnYWJsZTogdHJ1ZSxcbiAgICAgIGlzRWRpdGFibGU6IHRydWUsXG4gICAgICBtZWRpYVF1ZXJ5OiBbJ2Rlc2t0b3AnLCAndGFibGV0JywgJ21vYmlsZSddLFxuICAgIH0sXG4gIH0sXG4gIHtcbiAgICBpZDogNSxcbiAgICBrZXk6ICdxdWFudGl0eScsXG4gICAgdHlwZTogJ0RBVEEnLCAvLyBTWVNURU0gfCBEQVRBXG4gICAgY29sdW1uT3B0aW9uczoge1xuICAgICAgdGl0bGU6ICfQmtC+0Lst0LLQvicsXG4gICAgICBsYWJsZTogJ9Ca0L7Quy3QstC+JyxcbiAgICAgIHZhbGlkYXRlZDogJ251bWJlcicsXG4gICAgICB3aWR0aDogMSxcbiAgICAgIGlzQXV0b2NvbXBsZXRlOiBmYWxzZSxcbiAgICAgIGlzRGlzcGxheTogdHJ1ZSxcbiAgICAgIGlzQWx3YXlzVmlzaWJsZTogdHJ1ZSxcbiAgICAgIGlzUmVzaXplOiB0cnVlLFxuICAgICAgaXNEcmFnZ2FibGU6IHRydWUsXG4gICAgICBpc0VkaXRhYmxlOiB0cnVlLFxuICAgICAgbWVkaWFRdWVyeTogWydkZXNrdG9wJywgJ3RhYmxldCcsICdtb2JpbGUnXSxcbiAgICB9LFxuICB9LFxuICB7XG4gICAgaWQ6IDYsXG4gICAga2V5OiAnc2hvcnROYW1lJyxcbiAgICB0eXBlOiAnREFUQScsIC8vIFNZU1RFTSB8IERBVEFcbiAgICBjb2x1bW5PcHRpb25zOiB7XG4gICAgICB0aXRsZTogJ9Cd0LDQt9Cy0LDQvdC40LUg0YLQvtCy0LDRgNCwJyxcbiAgICAgIGxhYmxlOiAn0J3QsNC30LLQsNC90LjQtSDRgtC+0LLQsNGA0LAnLFxuICAgICAgdmFsaWRhdGVkOiAndGV4dCcsXG4gICAgICB3aWR0aDogJzEwJScsXG4gICAgICBpc0F1dG9jb21wbGV0ZTogdHJ1ZSxcbiAgICAgIGlzRGlzcGxheTogdHJ1ZSxcbiAgICAgIGlzQWx3YXlzVmlzaWJsZTogZmFsc2UsXG4gICAgICBpc1Jlc2l6ZTogdHJ1ZSxcbiAgICAgIGlzRHJhZ2dhYmxlOiB0cnVlLFxuICAgICAgaXNFZGl0YWJsZTogdHJ1ZSxcbiAgICAgIG1lZGlhUXVlcnk6IFsnZGVza3RvcCcsICd0YWJsZXQnLCAnbW9iaWxlJ10sXG4gICAgfSxcbiAgfSxcbiAge1xuICAgIGlkOiAxMCxcbiAgICBrZXk6ICd3ZWlnaHQnLFxuICAgIHR5cGU6ICdEQVRBJywgLy8gU1lTVEVNIHwgREFUQVxuICAgIGNvbHVtbk9wdGlvbnM6IHtcbiAgICAgIHRpdGxlOiAn0JLQtdGBJyxcbiAgICAgIGxhYmxlOiAn0JLQtdGBJyxcbiAgICAgIHZhbGlkYXRlZDogJycsXG4gICAgICB3aWR0aDogMC42MyxcbiAgICAgIGlzQXV0b2NvbXBsZXRlOiBmYWxzZSxcbiAgICAgIGlzRGlzcGxheTogZmFsc2UsXG4gICAgICBpc0Fsd2F5c1Zpc2libGU6IGZhbHNlLFxuICAgICAgaXNSZXNpemU6IHRydWUsXG4gICAgICBpc0RyYWdnYWJsZTogdHJ1ZSxcbiAgICAgIGlzRWRpdGFibGU6IHRydWUsXG4gICAgICBtZWRpYVF1ZXJ5OiBbJ2Rlc2t0b3AnLCAndGFibGV0JywgJ21vYmlsZSddLFxuICAgIH0sXG4gIH0sXG4gIHtcbiAgICBpZDogOCxcbiAgICBrZXk6ICdzaGlwcGluZ9Chb3N0JyxcbiAgICB0eXBlOiAnREFUQScsIC8vIFNZU1RFTSB8IERBVEFcbiAgICBjb2x1bW5PcHRpb25zOiB7XG4gICAgICB0aXRsZTogJ9Cm0LXQvdCwINC00L7RgdGC0LDQstC60LgsINGA0YPQsScsXG4gICAgICBsYWJsZTogJ9Cm0LXQvdCwINC00L7RgdGC0LDQstC60LgsINGA0YPQsScsXG4gICAgICB2YWxpZGF0ZWQ6ICdudW1iZXInLFxuICAgICAgd2lkdGg6ICcxMCUnLFxuICAgICAgaXNBdXRvY29tcGxldGU6IGZhbHNlLFxuICAgICAgaXNEaXNwbGF5OiBmYWxzZSxcbiAgICAgIGlzQWx3YXlzVmlzaWJsZTogZmFsc2UsXG4gICAgICBpc1Jlc2l6ZTogdHJ1ZSxcbiAgICAgIGlzRHJhZ2dhYmxlOiB0cnVlLFxuICAgICAgaXNFZGl0YWJsZTogZmFsc2UsXG4gICAgICBtZWRpYVF1ZXJ5OiBbJ2Rlc2t0b3AnLCAndGFibGV0JywgJ21vYmlsZSddLFxuICAgIH0sXG4gIH0sXG4gIHtcbiAgICBpZDogOSxcbiAgICBrZXk6ICdtYXhDYXBhY2l0eScsXG4gICAgdHlwZTogJ0RBVEEnLCAvLyBTWVNURU0gfCBEQVRBXG4gICAgY29sdW1uT3B0aW9uczoge1xuICAgICAgdGl0bGU6ICdNYXgg0LPRgNGD0LfQvtC/0L7QtNGK0LXQvNC90L7RgdGC0YwsINC60LMnLFxuICAgICAgbGFibGU6ICdNYXgg0LPRgNGD0LfQvtC/0L7QtNGK0LXQvNC90L7RgdGC0YwsINC60LMnLFxuICAgICAgdmFsaWRhdGVkOiAnbnVtYmVyJyxcbiAgICAgIHdpZHRoOiAxLFxuICAgICAgaXNBdXRvY29tcGxldGU6IGZhbHNlLFxuICAgICAgaXNEaXNwbGF5OiBmYWxzZSxcbiAgICAgIGlzQWx3YXlzVmlzaWJsZTogZmFsc2UsXG4gICAgICBpc1Jlc2l6ZTogdHJ1ZSxcbiAgICAgIGlzRHJhZ2dhYmxlOiB0cnVlLFxuICAgICAgaXNFZGl0YWJsZTogdHJ1ZSxcbiAgICAgIG1lZGlhUXVlcnk6IFsnZGVza3RvcCcsICd0YWJsZXQnLCAnbW9iaWxlJ10sXG4gICAgfSxcbiAgfSxcbiAge1xuICAgIGlkOiA3LFxuICAgIGtleTogJ3RvdGFsJyxcbiAgICB0eXBlOiAnREFUQScsIC8vIFNZU1RFTSB8IERBVEFcbiAgICBjb2x1bW5PcHRpb25zOiB7XG4gICAgICB0aXRsZTogJ9CY0YLQvtCz0L4nLFxuICAgICAgbGFibGU6ICfQmNGC0L7Qs9C+JyxcbiAgICAgIHZhbGlkYXRlZDogJycsXG4gICAgICB3aWR0aDogMC42MyxcbiAgICAgIGlzQXV0b2NvbXBsZXRlOiBmYWxzZSxcbiAgICAgIGlzRGlzcGxheTogdHJ1ZSxcbiAgICAgIGlzQWx3YXlzVmlzaWJsZTogdHJ1ZSxcbiAgICAgIGlzUmVzaXplOiB0cnVlLFxuICAgICAgaXNEcmFnZ2FibGU6IGZhbHNlLFxuICAgICAgaXNFZGl0YWJsZTogdHJ1ZSxcbiAgICAgIG1lZGlhUXVlcnk6IFsnZGVza3RvcCcsICd0YWJsZXQnLCAnbW9iaWxlJ10sXG4gICAgfSxcbiAgfSxcblxuXTtcbmNvbnN0IHJlc3VsdFRhYmxlTGlzdCA9IFtcbiAge1xuICAgIGlkOiAwLFxuICAgIGtleTogJ3N1bScsXG4gICAgbGFiZWw6ICfQodGD0LzQvNCwJyxcbiAgICB1bml0OiAn0YDRg9CxJyxcbiAgICBjb3VudEtleTogJ3RvdGFsJyxcbiAgICBsaXN0OiAnZ2VuZXJhbCcsXG4gICAgcmVzdWx0OiBudWxsLFxuICB9LFxuICB7XG4gICAgaWQ6IDEsXG4gICAga2V5OiAncXVhbnRpdHknLFxuICAgIGxhYmVsOiAn0JrQvtC7LdCy0L4nLFxuICAgIHVuaXQ6ICfRiNGCJyxcbiAgICBjb3VudEtleTogJ3F1YW50aXR5JyxcbiAgICBsaXN0OiAnZ2VuZXJhbCcsXG4gICAgcmVzdWx0OiBudWxsLFxuICB9LFxuICB7XG4gICAgaWQ6IDIsXG4gICAga2V5OiAndG90YWxfd2VpZ2h0JyxcbiAgICBsYWJlbDogJ9Ce0LHRidC40Lkg0LLQtdGBJyxcbiAgICB1bml0OiAn0LrQsycsXG4gICAgY291bnRLZXk6ICd3ZWlnaHQnLFxuICAgIGxpc3Q6ICdnZW5lcmFsJyxcbiAgICByZXN1bHQ6IG51bGwsXG4gIH0sXG4gIHtcbiAgICBpZDogMyxcbiAgICBrZXk6ICd0b3RhbF9zdW0nLFxuICAgIGxhYmVsOiAn0J7QsdGJ0LDRjyDRgdGD0LzQvNCwJyxcbiAgICB1bml0OiAn0YDRg9CxJyxcbiAgICBjb3VudEtleTogJ3RvdGFsJyxcbiAgICBsaXN0OiAncmVzdWx0aW5nJyxcbiAgICByZXN1bHQ6IG51bGwsXG4gIH0sXG5dO1xuXG5leHBvcnQgeyBwcm9kdWN0cywgdGFibGVDb2x1bW5zLCByZXN1bHRUYWJsZUxpc3QgfTtcbiIsImltcG9ydCBIZWFkZXJUYWJsZSBmcm9tICcuL2xpYi9IZWFkZXJUYWJsZSc7XG5pbXBvcnQgUm93c1RhYmxlIGZyb20gJy4vbGliL1Jvd3NUYWJsZSc7XG5pbXBvcnQgUmVzdWx0VGFibGUgZnJvbSAnLi9saWIvUmVzdWx0VGFibGUnO1xuaW1wb3J0IENvbnRleHRNZW51IGZyb20gJy4vbGliL0NvbnRleHRNZW51JztcbmltcG9ydCBUb29sc1RhYmxlTWVudSBmcm9tICcuL2xpYi9Ub29sc1RhYmxlTWVudSc7XG5pbXBvcnQgeyB0aHJvdHRsZSB9IGZyb20gJy4vaGVscGVycy9zbG93RG93bkV2ZW50cyc7XG5pbXBvcnQgeyBwcm9kdWN0cywgdGFibGVDb2x1bW5zLCByZXN1bHRUYWJsZUxpc3QgfSBmcm9tICcuLi9kYXRhL2FsbERhdGEnO1xuaW1wb3J0IHtcbiAgZ2V0U2VydmVyQWxsUHJvZHVjdHMsXG4gIGdldFNlcnZlck9wdGlvbnNEYXRhVGFibGUsXG4gIGdldFNlcnZlck9wdGlvbnNSZXN1bHRUYWJsZSxcbiAgc2V0U2VydmVyQWxsUHJvZHVjdHMsXG59IGZyb20gJy4vaGVscGVycy9zZXJ2ZXInO1xuXG5jbGFzcyBQcm9kdWN0VGFibGUge1xuICBjb25zdHJ1Y3RvcihleHRPcHRpb25zKSB7XG4gICAgY29uc3QgZGVmYXVsdHNPcHRpb25zID0ge1xuICAgICAgc2VsZWN0b3JUYWJsZTogJ2lkLXRhYmxlJyxcbiAgICAgIHNlbGVjdG9yVG9vbGJhcjogJ2lkLXRvb2xiYXInLFxuICAgICAgc2VsZWN0b3JDb250ZXh0TWVudTogJ2lkLWNvbnRleHQtbWVudScsXG4gICAgICBzZWxlY3RvclJlc3VsdFRhYmxlOiAnaWQtcmVzdWx0LXRhYmxlJyxcbiAgICAgIC8vXG4gICAgICBjbGFzc1BhcnJlbnRUYWJsZTogJ3RhYmxlLXdyYXBwZXInLFxuICAgICAgY2xhc3NUYWJsZTogJ3RhYmxlJyxcbiAgICAgIC8vXG4gICAgICBkZWJhZzogdHJ1ZSxcbiAgICB9O1xuXG4gICAgLy8gT3B0aW9uc1xuXG4gICAgdGhpcy5vcHRpb25zID0gT2JqZWN0LmFzc2lnbihleHRPcHRpb25zIHx8IHt9LCBkZWZhdWx0c09wdGlvbnMpO1xuXG4gICAgdGhpcy5vcHRpb25zLmluaXRUYWJsZVdpZHRoID0gJzk5JSc7XG5cbiAgICAvLyBEYXRhXG5cbiAgICB0aGlzLmRhdGEgPSB7fTtcblxuICAgIHRoaXMuZGF0YS5kYXRhUHJvZHVjdHMgPSB7fTtcbiAgICB0aGlzLmRhdGEub3B0aW9uRGF0YVRhYmxlID0ge307XG4gICAgdGhpcy5kYXRhLm9wdGlvblRvdGFsVGFibGUgPSB7fTtcblxuICAgIHRoaXMuZGF0YS5pc05ld0RhdGEgPSBmYWxzZTtcblxuICAgIC8vIE5vZGVzXG5cbiAgICB0aGlzLm5vZGVzID0ge307XG4gICAgdGhpcy5ub2Rlcy4kdGFibGVQYXJlbnQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5ub2Rlcy4kY29udGV4dE1lbnVQYXJlbnQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5ub2Rlcy4kdG90YWxUYWJsZSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLm5vZGVzLiR0b29sYmFyID0gdW5kZWZpbmVkO1xuXG4gICAgdGhpcy5pbml0UGFyZW50Tm9kZXMoKTtcblxuICAgIHRoaXMubm9kZXMuJHRhYmxlID0gdW5kZWZpbmVkO1xuICAgIHRoaXMubm9kZXMuJHRhYmxlSGVhZGVyID0gdW5kZWZpbmVkO1xuICAgIHRoaXMubm9kZXMuJHRhYmxlQm9keSA9IHVuZGVmaW5lZDtcblxuICAgIC8vIGJpbmRcblxuICAgIHRoaXMuZ2V0RGF0YVByb2R1Y3RzID0gdGhpcy5nZXREYXRhUHJvZHVjdHMuYmluZCh0aGlzKTtcbiAgICB0aGlzLnNldERhdGFQcm9kdWN0cyA9IHRoaXMuc2V0RGF0YVByb2R1Y3RzLmJpbmQodGhpcyk7XG5cbiAgICB0aGlzLmdldE9wdGlvbkRhdGFUYWJsZSA9IHRoaXMuZ2V0T3B0aW9uRGF0YVRhYmxlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5zZXRPcHRpb25EYXRhVGFibGUgPSB0aGlzLnNldE9wdGlvbkRhdGFUYWJsZS5iaW5kKHRoaXMpO1xuXG4gICAgdGhpcy5nZXRPcHRpb25zUmVzdWx0VGFibGUgPSB0aGlzLmdldE9wdGlvbnNSZXN1bHRUYWJsZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuc2V0T3B0aW9uc1Jlc3VsdFRhYmxlID0gdGhpcy5zZXRPcHRpb25zUmVzdWx0VGFibGUuYmluZCh0aGlzKTtcblxuICAgIHRoaXMuc2V0U2VydmVyRGF0YVByb2R1Y3RzID0gdGhpcy5zZXRTZXJ2ZXJEYXRhUHJvZHVjdHMuYmluZCh0aGlzKTtcblxuICAgIHRoaXMucmVuZGVyVGFibGUgPSB0aGlzLnJlbmRlclRhYmxlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5yZW5kZXJSZXN1bHQgPSB0aGlzLnJlbmRlclJlc3VsdC5iaW5kKHRoaXMpO1xuXG4gICAgdGhpcy5jcmVhdGVOZXdSb3dzID0gdGhpcy5jcmVhdGVOZXdSb3dzLmJpbmQodGhpcyk7XG4gICAgdGhpcy5zYXZlQ2hhbmdlcyA9IHRoaXMuc2F2ZUNoYW5nZXMuYmluZCh0aGlzKTtcblxuICAgIHRoaXMuZ2V0SXNOZXdEYXRhID0gdGhpcy5nZXRJc05ld0RhdGEuYmluZCh0aGlzKTtcbiAgICB0aGlzLnNldElzTmV3RGF0YSA9IHRoaXMuc2V0SXNOZXdEYXRhLmJpbmQodGhpcyk7XG5cbiAgICB0aGlzLmdldE1lZGlhUXVlcnkgPSB0aGlzLmdldE1lZGlhUXVlcnkuYmluZCh0aGlzKTtcblxuICAgIC8vIGNyZWF0ZSBwYXJlbnQgbm9kZXNcblxuICAgIHRoaXMuY3JlYXRlVGFibGUoKTtcblxuICAgIC8vIGluaXREYXRhXG5cbiAgICB0aGlzLmluaXREYXRhKCk7XG4gIH0gLy8gY29uc3RydWN0b3JcblxuICAvLyBpbml0RGF0YVxuXG4gIGluaXREYXRhKCkge1xuICAgIFByb21pc2VcbiAgICAgIC5hbGwoW1xuICAgICAgICBnZXRTZXJ2ZXJBbGxQcm9kdWN0cygpLFxuICAgICAgICBnZXRTZXJ2ZXJPcHRpb25zRGF0YVRhYmxlKCksXG4gICAgICAgIGdldFNlcnZlck9wdGlvbnNSZXN1bHRUYWJsZSgpLFxuICAgICAgXSlcbiAgICAgIC50aGVuKChbZGF0YVByb2R1Y3RzLCBvcHRpb25zRGF0YVRhYmxlLCBvcHRpb25Ub3RhbFRhYmxlXSkgPT4ge1xuICAgICAgICBjb25zb2xlLndhcm4oJ0xvYWQgc2VydmVyIGRhdGEuLi4nKTtcblxuICAgICAgICB0aGlzLnNldERhdGFQcm9kdWN0cyhkYXRhUHJvZHVjdHMpO1xuICAgICAgICB0aGlzLnNldE9wdGlvbkRhdGFUYWJsZShvcHRpb25zRGF0YVRhYmxlKTtcbiAgICAgICAgdGhpcy5zZXRPcHRpb25zUmVzdWx0VGFibGUob3B0aW9uVG90YWxUYWJsZSk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yLCAnRXJyb3Igc2VydmVyIGRhdGEhJyk7XG4gICAgICAgIGNvbnNvbGUud2FybignTG9hZCBsb2NhbCBkYXRhLi4uJyk7XG5cbiAgICAgICAgdGhpcy5zZXREYXRhUHJvZHVjdHMocHJvZHVjdHMpO1xuICAgICAgICB0aGlzLnNldE9wdGlvbkRhdGFUYWJsZSh0YWJsZUNvbHVtbnMpO1xuICAgICAgICB0aGlzLnNldE9wdGlvbnNSZXN1bHRUYWJsZShyZXN1bHRUYWJsZUxpc3QpO1xuICAgICAgfSlcbiAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgdGhpcy5pbml0Q29tcG9uZW50cygpO1xuICAgICAgfSlcbiAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRocm90dGxlKHRoaXMucmVuZGVyVGFibGUsIDYwKSk7XG4gICAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgICB9KTtcbiAgfVxuXG4gIGluaXRDb21wb25lbnRzKCkge1xuICAgIHRoaXMuY29udGV4dE1lbnUgPSBuZXcgQ29udGV4dE1lbnUoe1xuICAgICAgcGFyZW50QmxvY2s6IHRoaXMubm9kZXMuJGNvbnRleHRNZW51UGFyZW50LFxuICAgICAgZ2V0T3B0aW9uRGF0YVRhYmxlOiB0aGlzLmdldE9wdGlvbkRhdGFUYWJsZSxcbiAgICAgIHNldE9wdGlvbkRhdGFUYWJsZTogdGhpcy5zZXRPcHRpb25EYXRhVGFibGUsXG4gICAgICByZW5kZXJUYWJsZTogdGhpcy5yZW5kZXJUYWJsZSxcbiAgICAgIGdldE1lZGlhUXVlcnk6IHRoaXMuZ2V0TWVkaWFRdWVyeSxcbiAgICB9KTtcblxuICAgIHRoaXMuaGVhZGVyVGFibGUgPSBuZXcgSGVhZGVyVGFibGUoe1xuICAgICAgcGFyZW50QmxvY2s6IHRoaXMubm9kZXMuJHRhYmxlSGVhZGVyLFxuICAgICAgZ2V0T3B0aW9uRGF0YVRhYmxlOiB0aGlzLmdldE9wdGlvbkRhdGFUYWJsZSxcbiAgICAgIHNldE9wdGlvbkRhdGFUYWJsZTogdGhpcy5zZXRPcHRpb25EYXRhVGFibGUsXG4gICAgICByZW5kZXJUYWJsZTogdGhpcy5yZW5kZXJUYWJsZSxcbiAgICAgIGdldE1lZGlhUXVlcnk6IHRoaXMuZ2V0TWVkaWFRdWVyeSxcbiAgICB9KTtcblxuICAgIHRoaXMucm93c1RhYmxlID0gbmV3IFJvd3NUYWJsZSh7XG4gICAgICBwYXJlbnRCbG9jazogdGhpcy5ub2Rlcy4kdGFibGVCb2R5LFxuICAgICAgZ2V0RGF0YVByb2R1Y3RzOiB0aGlzLmdldERhdGFQcm9kdWN0cyxcbiAgICAgIHNldERhdGFQcm9kdWN0czogdGhpcy5zZXREYXRhUHJvZHVjdHMsXG4gICAgICBnZXRPcHRpb25EYXRhVGFibGU6IHRoaXMuZ2V0T3B0aW9uRGF0YVRhYmxlLFxuICAgICAgc2V0SXNOZXdEYXRhOiB0aGlzLnNldElzTmV3RGF0YSxcbiAgICAgIHNldFNlcnZlckRhdGFQcm9kdWN0czogdGhpcy5zZXRTZXJ2ZXJEYXRhUHJvZHVjdHMsXG4gICAgICBnZXRNZWRpYVF1ZXJ5OiB0aGlzLmdldE1lZGlhUXVlcnksXG4gICAgICByZW5kZXJSZXN1bHQ6IHRoaXMucmVuZGVyUmVzdWx0LFxuICAgIH0pO1xuXG4gICAgdGhpcy50b29sc1RhYmxlTWVudSA9IG5ldyBUb29sc1RhYmxlTWVudSh7XG4gICAgICBwYXJlbnRCbG9jazogdGhpcy5ub2Rlcy4kdG9vbGJhcixcbiAgICAgIGNyZWF0ZU5ld1Jvd3M6IHRoaXMuY3JlYXRlTmV3Um93cyxcbiAgICAgIHNhdmVDaGFuZ2VzOiB0aGlzLnNhdmVDaGFuZ2VzLFxuICAgICAgZ2V0SXNOZXdEYXRhOiB0aGlzLmdldElzTmV3RGF0YSxcbiAgICB9KTtcblxuICAgIHRoaXMucmVzdWx0VGFibGUgPSBuZXcgUmVzdWx0VGFibGUoe1xuICAgICAgcGFyZW50QmxvY2s6IHRoaXMubm9kZXMuJHRvdGFsVGFibGUsXG4gICAgICBnZXREYXRhUHJvZHVjdHM6IHRoaXMuZ2V0RGF0YVByb2R1Y3RzLFxuICAgICAgZ2V0T3B0aW9uc1Jlc3VsdFRhYmxlOiB0aGlzLmdldE9wdGlvbnNSZXN1bHRUYWJsZSxcbiAgICB9KTtcbiAgfVxuXG4gIGluaXRQYXJlbnROb2RlcygpIHtcbiAgICBjb25zdCB7XG4gICAgICBzZWxlY3RvclRhYmxlLFxuICAgICAgc2VsZWN0b3JDb250ZXh0TWVudSxcbiAgICAgIHNlbGVjdG9yUmVzdWx0VGFibGUsXG4gICAgICBzZWxlY3RvclRvb2xiYXIsXG4gICAgfSA9IHRoaXMub3B0aW9ucztcblxuICAgIHRoaXMubm9kZXMuJHRhYmxlUGFyZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoc2VsZWN0b3JUYWJsZSk7XG5cbiAgICB0aGlzLm5vZGVzLiRjb250ZXh0TWVudVBhcmVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHNlbGVjdG9yQ29udGV4dE1lbnUpO1xuICAgIHRoaXMubm9kZXMuJGNvbnRleHRNZW51UGFyZW50LnN0eWxlLnBvc2l0aW9uID0gJ3JlbGF0aXZlJztcblxuICAgIHRoaXMubm9kZXMuJHRvdGFsVGFibGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChzZWxlY3RvclJlc3VsdFRhYmxlKTtcbiAgICB0aGlzLm5vZGVzLiR0b29sYmFyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoc2VsZWN0b3JUb29sYmFyKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICB0aGlzLnJlbmRlclRhYmxlKCk7XG4gICAgdGhpcy5jb250ZXh0TWVudS5yZW5kZXIoKTtcbiAgICB0aGlzLnRvb2xzVGFibGVNZW51LnJlbmRlcigpO1xuICB9XG5cbiAgcmVuZGVyVGFibGUoKSB7XG4gICAgdGhpcy5oZWFkZXJUYWJsZS5yZW5kZXIoKTtcbiAgICB0aGlzLnJvd3NUYWJsZS5yZW5kZXIoKTtcbiAgICB0aGlzLnJlc3VsdFRhYmxlLnJlbmRlcigpO1xuICB9XG5cbiAgcmVuZGVyUmVzdWx0KCkge1xuICAgIHRoaXMucmVzdWx0VGFibGUucmVuZGVyKCk7XG4gIH1cblxuICAvLyBHRVRcblxuICBnZXRPcHRpb25EYXRhVGFibGUoKSB7XG4gICAgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy5kYXRhLm9wdGlvbkRhdGFUYWJsZSkpO1xuICB9XG5cbiAgZ2V0T3B0aW9uc1Jlc3VsdFRhYmxlKCkge1xuICAgIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMuZGF0YS5vcHRpb25Ub3RhbFRhYmxlKSk7XG4gIH1cblxuICBnZXREYXRhUHJvZHVjdHMoKSB7XG4gICAgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy5kYXRhLmRhdGFQcm9kdWN0cykpO1xuICB9XG5cbiAgZ2V0SXNOZXdEYXRhKCkge1xuICAgIHJldHVybiB0aGlzLmRhdGEuaXNOZXdEYXRhO1xuICB9XG5cbiAgZ2V0TWVkaWFRdWVyeSgpIHtcbiAgICBsZXQgbWVkaWFRdWVyeSA9ICdkZXNrdG9wJztcblxuICAgIGlmICh3aW5kb3cubWF0Y2hNZWRpYSgnKG1heC13aWR0aDogNzY4cHgpJykubWF0Y2hlcykge1xuICAgICAgbWVkaWFRdWVyeSA9ICd0YWJsZXQnO1xuICAgIH1cbiAgICBpZiAod2luZG93Lm1hdGNoTWVkaWEoJyhtYXgtd2lkdGg6IDQ4MHB4KScpLm1hdGNoZXMpIHtcbiAgICAgIG1lZGlhUXVlcnkgPSAnbW9iaWxlJztcbiAgICB9XG5cbiAgICByZXR1cm4gbWVkaWFRdWVyeTtcbiAgfVxuXG4gIC8vIFNFVFxuXG4gIHNldE9wdGlvbnNSZXN1bHRUYWJsZSh2YWx1ZSkge1xuICAgIC8vIGNvbnNvbGUubG9nKCdzZXRPcHRpb25zUmVzdWx0VGFibGUgPiB2YWx1ZTonLCB2YWx1ZSk7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgY2hhbmdlIHJvd3MgZGF0YSEnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5kYXRhLm9wdGlvblRvdGFsVGFibGUgPSB2YWx1ZTtcbiAgfVxuXG4gIHNldERhdGFQcm9kdWN0cyh2YWx1ZSkge1xuICAgIC8vIGNvbnNvbGUubG9nKCdzZXREYXRhUHJvZHVjdHMgPiB2YWx1ZTonLCB2YWx1ZSk7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgY2hhbmdlIHJvd3MgZGF0YSEnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5kYXRhLmRhdGFQcm9kdWN0cyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodmFsdWUpKTtcbiAgfVxuXG4gIHNldFNlcnZlckRhdGFQcm9kdWN0cyh2YWx1ZSwgZnVuKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgY2hhbmdlIHJvd3MgZGF0YSEnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc2V0U2VydmVyQWxsUHJvZHVjdHModmFsdWUpXG4gICAgICAudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2cocmVzcG9uc2UpO1xuICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xuICAgICAgfSlcbiAgICAgIC50aGVuKChqc29uKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKE9iamVjdC52YWx1ZXMoanNvbikpO1xuICAgICAgICB0aGlzLnNldERhdGFQcm9kdWN0cyh2YWx1ZSk7XG4gICAgICAgIHRoaXMuc2V0SXNOZXdEYXRhKGZhbHNlKTtcbiAgICAgICAgdGhpcy5yZW5kZXJUYWJsZSgpO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnJvciwgJ0Vycm9yIHNlcnZlcicpO1xuICAgICAgfSk7XG4gIH1cblxuICBzZXRPcHRpb25EYXRhVGFibGUodmFsdWUpIHtcbiAgICAvLyBjb25zb2xlLmxvZygnc2V0T3B0aW9uRGF0YVRhYmxlID4gdmFsdWU6JywgdmFsdWUpO1xuICAgIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGNoYW5nZSBjb2x1bW5zIGRhdGEhJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuZGF0YS5vcHRpb25EYXRhVGFibGUgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHZhbHVlKSk7XG4gIH1cblxuICBzZXRJc05ld0RhdGEodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnYm9vbGVhbicpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGNoYW5nZSB2YWx1ZSBJc05ld0RhdGEhJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuZGF0YS5pc05ld0RhdGEgPSB2YWx1ZTtcblxuICAgIHRoaXMudG9vbHNUYWJsZU1lbnUucmVuZGVyKCk7XG4gIH1cblxuICBjcmVhdGVOZXdSb3dzKCkge1xuICAgIHRoaXMucm93c1RhYmxlLmFkZE5ld1Jvd3MoKTtcbiAgfVxuXG4gIGNyZWF0ZVRhYmxlKCkge1xuICAgIGNvbnN0IHsgJHRhYmxlUGFyZW50IH0gPSB0aGlzLm5vZGVzO1xuICAgIGNvbnN0IHsgY2xhc3NQYXJyZW50VGFibGUsIGNsYXNzVGFibGUsIGluaXRUYWJsZVdpZHRoIH0gPSB0aGlzLm9wdGlvbnM7XG5cbiAgICBpZiAoISR0YWJsZVBhcmVudCkge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IsIHRhYmxlIGhhcyBubyBwYXJlbnQhIGtleSBpZD1cImlkLXRhYmxlXCInKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAkdGFibGVQYXJlbnQuaW5uZXJIVE1MID0gJyc7XG4gICAgJHRhYmxlUGFyZW50LmNsYXNzTGlzdCA9IGNsYXNzUGFycmVudFRhYmxlO1xuXG4gICAgY29uc3QgJHRhYmxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGFibGUnKTtcbiAgICAkdGFibGUuaWQgPSAnaWQtdGVzdGluZy10YWJsZSc7XG4gICAgJHRhYmxlLmNsYXNzTmFtZSA9IGNsYXNzVGFibGU7XG4gICAgJHRhYmxlLmNsYXNzTmFtZSA9IGNsYXNzVGFibGU7XG4gICAgJHRhYmxlLnN0eWxlLnRhYmxlTGF5b3V0ID0gJ2ZpeGVkJztcbiAgICAkdGFibGUuc3R5bGUud2lkdGggPSBpbml0VGFibGVXaWR0aDtcbiAgICAkdGFibGVQYXJlbnQuYXBwZW5kQ2hpbGQoJHRhYmxlKTtcbiAgICB0aGlzLm5vZGVzLiR0YWJsZSA9ICR0YWJsZTtcblxuICAgIGNvbnN0IHRhYmxlSGVhZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGhlYWQnKTtcbiAgICAkdGFibGUuYXBwZW5kQ2hpbGQodGFibGVIZWFkZXIpO1xuICAgIHRoaXMubm9kZXMuJHRhYmxlSGVhZGVyID0gdGFibGVIZWFkZXI7XG5cbiAgICBjb25zdCB0YWJsZUJvZHkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0Ym9keScpO1xuICAgICR0YWJsZS5hcHBlbmRDaGlsZCh0YWJsZUJvZHkpO1xuICAgIHRoaXMubm9kZXMuJHRhYmxlQm9keSA9IHRhYmxlQm9keTtcbiAgfVxuXG4gIHNhdmVDaGFuZ2VzKCkge1xuICAgIHRoaXMucm93c1RhYmxlLnNhdmVDaGFuZ2VSb3dzKCk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUHJvZHVjdFRhYmxlO1xuIiwiZnVuY3Rpb24gYXV0b2NvbXBsZXRlKCRpbnB1dCwgYXJyQXV0b2NvbXBsZXRlKSB7XG4gIGNvbnN0IGNsYXNzV3JhcHBlciA9ICd0YWJsZS1ib2R5X19hdXRvY29tcGxldGUtd3JhcHBlcic7XG4gIGNvbnN0IGNsYXNzTGlzdCA9ICd0YWJsZS1ib2R5X19hdXRvY29tcGxldGUtbGlzdCc7XG4gIGNvbnN0IGNsYXNzSXRlbSA9ICd0YWJsZS1ib2R5X19hdXRvY29tcGxldGUtaXRlbSc7XG4gIGNvbnN0IGNsYXNzQWN0aXZlID0gJ2FjdGl2ZSc7XG5cbiAgbGV0IGN1cnJlbnRGb2N1cztcbiAgY29uc3QgZGF0YUlEID0gJGlucHV0LmRhdGFzZXQuZGF0YUlkO1xuXG4gICRpbnB1dC5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsIGhhbmRsZXJGb2N1cyk7XG4gICRpbnB1dC5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgaGFuZGxlckJsdXIpO1xuXG4gIC8vIGZ1bmN0aW9uIGhhbmRsZXJGb2N1c1xuXG4gIGZ1bmN0aW9uIGhhbmRsZXJGb2N1cyhlKSB7XG4gICAgLy8gY29uc29sZS5sb2coJ2ZvY3VzJyk7XG4gICAgYWRkRXZlbnRzKCk7XG4gIH1cblxuICAvLyBmdW5jdGlvbiBoYW5kbGVyQmx1clxuXG4gIGZ1bmN0aW9uIGhhbmRsZXJCbHVyKGUpIHtcbiAgICAvLyBjb25zb2xlLmxvZygnQmx1cicpO1xuICAgIHJlbW92ZUV2ZW50cygpO1xuICB9XG5cbiAgLy8gZnVuY3Rpb24gcmVtb3ZlRXZlbnRzXG5cbiAgZnVuY3Rpb24gcmVtb3ZlRXZlbnRzKCkge1xuICAgICRpbnB1dC5yZW1vdmVFdmVudExpc3RlbmVyKCdpbnB1dCcsIGhhbmRsZXJJbnB1dCk7XG4gICAgJGlucHV0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBoYW5kbGVyS2V5ZG93bik7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgaGFuZGxlclNjcm9sbERvYyk7XG4gIH1cblxuICAvLyBmdW5jdGlvbiBhZGRFdmVudHNcblxuICBmdW5jdGlvbiBhZGRFdmVudHMoKSB7XG4gICAgJGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgaGFuZGxlcklucHV0KTtcbiAgICAkaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGhhbmRsZXJLZXlkb3duKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBoYW5kbGVyU2Nyb2xsRG9jKTtcbiAgfVxuXG4gIC8vIGZ1bmN0aW9uIGhhbmRsZXJTY3JvbGxEb2NcblxuICBmdW5jdGlvbiBoYW5kbGVyU2Nyb2xsRG9jKGUpIHtcbiAgICBjbG9zZUFsbExpc3RzKCk7XG4gICAgY29uc29sZS5sb2coJ3Njcm9sbCcpO1xuICAgIC8vIHJlbW92ZUV2ZW50cygpO1xuICB9XG5cbiAgLy8gZnVuY3Rpb24gaGFuZGxlcklucHV0XG5cbiAgZnVuY3Rpb24gaGFuZGxlcklucHV0KGUpIHtcbiAgICBjb25zdCBpbnB1dFZhbHVlID0gZS50YXJnZXQudmFsdWU7XG5cbiAgICBjbG9zZUFsbExpc3RzKCk7XG5cbiAgICBpZiAoIWlucHV0VmFsdWUudHJpbSgpKSB7IHJldHVybiBmYWxzZTsgfVxuXG4gICAgY3VycmVudEZvY3VzID0gLTE7XG5cbiAgICBjb25zdCAkd3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICR3cmFwcGVyLmNsYXNzTGlzdCA9IGNsYXNzV3JhcHBlcjtcbiAgICAkd3JhcHBlci5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgJHdyYXBwZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAkd3JhcHBlci5zdHlsZS56SW5kZXggPSAnOTk5JztcbiAgICBlLnRhcmdldC5wYXJlbnROb2RlLmFwcGVuZENoaWxkKCR3cmFwcGVyKTtcblxuICAgIGNvbnN0ICRsaXN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndWwnKTtcbiAgICAkbGlzdC5pZCA9IGRhdGFJRDtcbiAgICAkbGlzdC5jbGFzc0xpc3QgPSBjbGFzc0xpc3Q7XG4gICAgLy8gJGxpc3Quc3R5bGUucG9zaXRpb24gPSAnZml4ZWQnO1xuICAgICRsaXN0LnN0eWxlLndpZHRoID0gYCR7JGlucHV0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRofXB4YDtcblxuICAgIC8vIGNvbnNvbGUubG9nKCRpbnB1dC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCk7XG5cbiAgICAkd3JhcHBlci5hcHBlbmRDaGlsZCgkbGlzdCk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFyckF1dG9jb21wbGV0ZS5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgY29uc3Qgc3RyaW5nID0gYXJyQXV0b2NvbXBsZXRlW2ldO1xuICAgICAgLy8gY29uc29sZS5sb2coc3RyaW5nKTtcbiAgICAgIGlmIChcbiAgICAgICAgc3RyaW5nXG4gICAgICAgICAgLnN1YnN0cigwLCBpbnB1dFZhbHVlLmxlbmd0aClcbiAgICAgICAgICAudG9VcHBlckNhc2UoKVxuICAgICAgICAgID09PSBpbnB1dFZhbHVlXG4gICAgICAgICAgICAudG9VcHBlckNhc2UoKVxuICAgICAgKSB7XG4gICAgICAgICR3cmFwcGVyLnN0eWxlLmRpc3BsYXkgPSAnJztcblxuICAgICAgICBjb25zdCAkaXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XG4gICAgICAgICRpdGVtLmNsYXNzTGlzdCA9IGNsYXNzSXRlbTtcbiAgICAgICAgJGl0ZW0uaW5uZXJIVE1MID0gYDxzdHJvbmc+JHtzdHJpbmcuc3Vic3RyKDAsIGlucHV0VmFsdWUubGVuZ3RoKX08L3N0cm9uZz5gO1xuICAgICAgICAkaXRlbS5pbm5lckhUTUwgKz0gc3RyaW5nLnN1YnN0cihpbnB1dFZhbHVlLmxlbmd0aCk7XG4gICAgICAgICRpdGVtLmlubmVySFRNTCArPSBgPGlucHV0IHR5cGU9J2hpZGRlbicgdmFsdWU9JyR7c3RyaW5nfSc+YDtcbiAgICAgICAgJGl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAvLyBjb25zb2xlLmxvZygnY2xpY2snKTtcbiAgICAgICAgICAkaW5wdXQudmFsdWUgPSBldmVudC5jdXJyZW50VGFyZ2V0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdpbnB1dCcpWzBdLnZhbHVlO1xuICAgICAgICAgIGNsb3NlQWxsTGlzdHMoKTtcbiAgICAgICAgfSk7XG4gICAgICAgICRsaXN0LmFwcGVuZENoaWxkKCRpdGVtKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBmdW5jdGlvbiBoYW5kbGVyS2V5ZG93blxuICAvLyBUT0RPOiDQtNC+0LTQtdC70LDRgtGMINCy0YvQsdC+0YAg0Y3Qu9C10LzQtdC90YLQsCDQv9C+IElELi4uXG5cbiAgZnVuY3Rpb24gaGFuZGxlcktleWRvd24oZSkge1xuICAgIGxldCAkbGlzdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGRhdGFJRCk7XG5cbiAgICBpZiAoJGxpc3QpICRsaXN0ID0gJGxpc3QuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2xpJyk7XG5cbiAgICAvLyBjb25zb2xlLmxvZyhlLmtleUNvZGUpO1xuXG4gICAgaWYgKGUua2V5Q29kZSA9PT0gNDApIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGN1cnJlbnRGb2N1cyArPSAxO1xuICAgICAgYWRkQWN0aXZlQ2xhc3MoJGxpc3QpO1xuICAgIH0gZWxzZSBpZiAoZS5rZXlDb2RlID09PSAzOCkgeyAvLyDQstCy0LXRgNGFXG4gICAgICBjdXJyZW50Rm9jdXMgLT0gMTtcbiAgICAgIGFkZEFjdGl2ZUNsYXNzKCRsaXN0KTtcbiAgICB9IGVsc2UgaWYgKGUua2V5Q29kZSA9PT0gMTMpIHtcbiAgICAgIGlmIChjdXJyZW50Rm9jdXMgPiAtMSkge1xuICAgICAgICBpZiAoJGxpc3QpICRsaXN0W2N1cnJlbnRGb2N1c10uY2xpY2soKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGUua2V5Q29kZSA9PT0gOSB8fCBlLmtleUNvZGUgPT09IDI3KSB7XG4gICAgICBjbG9zZUFsbExpc3RzKCk7XG4gICAgfVxuICB9XG5cbiAgLy8gZnVuY3Rpb24gYWRkQWN0aXZlQ2xhc3NcblxuICBmdW5jdGlvbiBhZGRBY3RpdmVDbGFzcygkbGlzdCkge1xuICAgIGlmICghJGxpc3QpIHJldHVybiBmYWxzZTtcblxuICAgIHJlbW92ZUFjdGl2ZUNsYXNzKCRsaXN0KTtcblxuICAgIGlmIChjdXJyZW50Rm9jdXMgPj0gJGxpc3QubGVuZ3RoKSBjdXJyZW50Rm9jdXMgPSAwO1xuICAgIGlmIChjdXJyZW50Rm9jdXMgPCAwKSBjdXJyZW50Rm9jdXMgPSAoJGxpc3QubGVuZ3RoIC0gMSk7XG5cbiAgICAkbGlzdFtjdXJyZW50Rm9jdXNdLmNsYXNzTGlzdC5hZGQoY2xhc3NBY3RpdmUpO1xuICAgICRsaXN0W2N1cnJlbnRGb2N1c10uc2Nyb2xsSW50b1ZpZXcoKTtcbiAgfVxuXG4gIC8vIGZ1bmN0aW9uIHJlbW92ZUFjdGl2ZUNsYXNzXG5cbiAgZnVuY3Rpb24gcmVtb3ZlQWN0aXZlQ2xhc3MoJGxpc3QpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8ICRsaXN0Lmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAkbGlzdFtpXS5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzQWN0aXZlKTtcbiAgICB9XG4gIH1cblxuICAvLyBmdW5jdGlvbiBjbG9zZUFsbExpc3RzXG5cbiAgZnVuY3Rpb24gY2xvc2VBbGxMaXN0cyhlbG1udCkge1xuICAgIGNvbnN0ICRsaXN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShjbGFzc1dyYXBwZXIpO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAkbGlzdC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKGVsbW50ICE9PSAkbGlzdFtpXSAmJiBlbG1udCAhPT0gJGlucHV0KSB7XG4gICAgICAgICRsaXN0W2ldLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoJGxpc3RbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICBjbG9zZUFsbExpc3RzKGUudGFyZ2V0KTtcbiAgfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGF1dG9jb21wbGV0ZTtcbiIsImFzeW5jIGZ1bmN0aW9uIGdldFNlcnZlckFsbFByb2R1Y3RzKCkge1xuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCcuLi9kYXRhL2RhdGFQcm9kdWN0cy5qc29uJyk7XG4gIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldFNlcnZlck9wdGlvbnNEYXRhVGFibGUoKSB7XG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJy4uL2RhdGEvb3B0aW9uc0RhdGFUYWJsZS5qc29uJyk7XG4gIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldFNlcnZlck9wdGlvbnNSZXN1bHRUYWJsZSgpIHtcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgnLi4vZGF0YS9vcHRpb25zUmVzdWx0VGFibGUuanNvbicpO1xuICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG5hc3luYyBmdW5jdGlvbiBzZXRTZXJ2ZXJBbGxQcm9kdWN0cyhkYXRhKSB7XG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJ2h0dHBzOi8vanNvbnBsYWNlaG9sZGVyLnR5cGljb2RlLmNvbS9wb3N0cycsIHtcbiAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICBib2R5OiBKU09OLnN0cmluZ2lmeShkYXRhKSxcbiAgICBoZWFkZXJzOiB7XG4gICAgICAnQ29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9VVRGLTgnLFxuICAgIH0sXG4gIH0pO1xuXG4gIGNvbnN0IGFuc3dlciA9IGF3YWl0IHJlc3BvbnNlO1xuXG4gIHJldHVybiBhbnN3ZXI7XG59XG5cbmV4cG9ydCB7XG4gIGdldFNlcnZlckFsbFByb2R1Y3RzLFxuICBnZXRTZXJ2ZXJPcHRpb25zRGF0YVRhYmxlLFxuICBnZXRTZXJ2ZXJPcHRpb25zUmVzdWx0VGFibGUsXG4gIHNldFNlcnZlckFsbFByb2R1Y3RzLFxufTtcbiIsImNvbnN0IHRocm90dGxlID0gKGZ1bmMsIG1zKSA9PiB7XG4gIGxldCBsb2NrZWQgPSBmYWxzZTtcblxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmIChsb2NrZWQpIHJldHVybjtcblxuICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzO1xuICAgIGNvbnN0IGFyZ3MgPSBhcmd1bWVudHM7XG5cbiAgICBsb2NrZWQgPSB0cnVlO1xuXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgbG9ja2VkID0gZmFsc2U7XG4gICAgfSwgbXMpO1xuICB9O1xufTtcblxuZnVuY3Rpb24gZGVib3VuY2UoZnVuYywgbXMsIG5vdykge1xuICBsZXQgb25MYXN0O1xuXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgY29udGV4dCA9IHRoaXM7XG4gICAgY29uc3QgYXJncyA9IGFyZ3VtZW50cztcblxuICAgIGNvbnN0IG9uRmlyc3QgPSBub3cgJiYgIW9uTGFzdDtcblxuICAgIGNsZWFyVGltZW91dChvbkxhc3QpO1xuXG4gICAgb25MYXN0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBvbkxhc3QgPSBudWxsO1xuICAgICAgaWYgKCFub3cpIGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgfSwgbXMpO1xuXG4gICAgaWYgKG9uRmlyc3QpIGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gIH07XG59XG5cbmV4cG9ydCB7IHRocm90dGxlLCBkZWJvdW5jZSB9O1xuIiwiY2xhc3MgQ29udGV4dE1lbnUge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIGNvbnN0IGRlZmF1bHRzT3B0aW9ucyA9IHtcbiAgICAgIGNsYXNzUGFyZW50OiAnY29udGV4dC1tZW51JyxcbiAgICAgIGNsYXNzQnV0dG9uTWVudTogJ2NvbnRleHQtbWVudV9fdG9nZ2xlJyxcbiAgICAgIGNsYXNzTWVudUxpc3Q6ICdjb250ZXh0LW1lbnVfX2xpc3QnLFxuICAgICAgY2xhc3NNZW51SXRlbTogJ2NvbnRleHQtbWVudV9faXRlbScsXG4gICAgICBjbGFzc1N1Yk1lbnU6ICdjb250ZXh0LW1lbnVfX3N1Ymxpc3QnLFxuICAgICAgY2xhc3NUaXRsZVN1Yk1lbnU6ICdjb250ZXh0LW1lbnVfX3RpdGxlLXN1Ymxpc3QnLFxuICAgICAgY2xhc3NUaXRsZUNoZWNrYm94OiAnY29udGV4dC1tZW51X19jaGVja2JveCcsXG4gICAgfTtcbiAgICBjb25zdCB7XG4gICAgICBwYXJlbnRCbG9jaywgZ2V0T3B0aW9uRGF0YVRhYmxlLCBzZXRPcHRpb25EYXRhVGFibGUsIHJlbmRlclRhYmxlLCBnZXRNZWRpYVF1ZXJ5LFxuICAgIH0gPSBwcm9wcztcblxuICAgIHRoaXMub3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oZGVmYXVsdHNPcHRpb25zKTtcbiAgICBPYmplY3QuYXNzaWduKHRoaXMsIHtcbiAgICAgIHBhcmVudEJsb2NrLCBnZXRPcHRpb25EYXRhVGFibGUsIHNldE9wdGlvbkRhdGFUYWJsZSwgcmVuZGVyVGFibGUsIGdldE1lZGlhUXVlcnksXG4gICAgfSk7XG5cbiAgICB0aGlzLm1lbnVJdGVtcyA9IFtcbiAgICAgIHtcbiAgICAgICAgaWQ6IDAsXG4gICAgICAgIGtleTogJ2NvbHVtbnMnLFxuICAgICAgICBsYWJsZTogJ9Ce0YLQvtCx0YDQsNC20LXQvdC40LUg0YHRgtC+0LvQsdGG0L7QsicsXG4gICAgICAgIGl0ZW1zOiB0aGlzLmdldE9wdGlvbkRhdGFUYWJsZSgpLFxuICAgICAgfSxcbiAgICBdO1xuXG4gICAgdGhpcy5ub2RlID0ge307XG4gICAgdGhpcy5ub2RlLiRtZW51TGlzdCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLm5vZGUuJG1lbnVCdXR0b25Ub2dnbGVyID0gdW5kZWZpbmVkO1xuXG4gICAgLy8gYmluZCB0aGlzXG4gICAgdGhpcy5oYW5kbGVyVG9nZ2xlTWVudSA9IHRoaXMuaGFuZGxlclRvZ2dsZU1lbnUuYmluZCh0aGlzKTtcbiAgICB0aGlzLmhhbmRsZXJNb3VzZUVudGVyTWVudUl0ZW0gPSB0aGlzLmhhbmRsZXJNb3VzZUVudGVyTWVudUl0ZW0uYmluZCh0aGlzKTtcbiAgICB0aGlzLmhlbmRsZXJPdXRzaWRlQ2xpY2tFdmVudCA9IHRoaXMuaGVuZGxlck91dHNpZGVDbGlja0V2ZW50LmJpbmQodGhpcyk7XG4gICAgdGhpcy5oYW5kbGVyQ2hhbmdlQ2hlY2tib3ggPSB0aGlzLmhhbmRsZXJDaGFuZ2VDaGVja2JveC5iaW5kKHRoaXMpO1xuICB9IC8vIGNvbnN0cnVjdG9yXG5cbiAgcmVuZGVyKCkge1xuICAgIGlmICh0aGlzLmdldE1lZGlhUXVlcnkoKSAhPT0gJ2Rlc2t0b3AnKSB7XG4gICAgICB0aGlzLtGBbGVhclBhcmVudEJsb2NrKCk7XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuY2hlY2tEYXRhKCkpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdFcnJvciBEQVRBLCBjb250ZXh0IG1lbnUgZGF0YSBub3QgZm91bmQnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuY2hlY2tQYXJlbnQoKSkge1xuICAgICAgY29uc29sZS5sb2coJ0Vycm9yIERPTUVsZW1lbnQsIHBhcmVudCBibG9jayBmb3IgY29udGV4dCBtZW51IG5vdCBmb3VuZCcpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMu0YFsZWFyUGFyZW50QmxvY2soKTtcblxuICAgIHRoaXMuY3JlYXRlKCk7XG4gIH1cblxuICBjaGVja1BhcmVudCgpIHtcbiAgICBpZiAodGhpcy5wYXJlbnRCbG9jayAmJiB0aGlzLnBhcmVudEJsb2NrIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjaGVja0RhdGEoKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5nZXRPcHRpb25EYXRhVGFibGUoKSkgJiYgdGhpcy5nZXRPcHRpb25EYXRhVGFibGUoKS5sZW5ndGggIT09IDApIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICDRgWxlYXJQYXJlbnRCbG9jaygpIHtcbiAgICBpZiAodGhpcy5wYXJlbnRCbG9jay5oYXNDaGlsZE5vZGVzKCkpIHtcbiAgICAgIHRoaXMucGFyZW50QmxvY2suaW5uZXJIVE1MID0gJyc7XG4gICAgfVxuICB9XG5cbiAgY3JlYXRlKCkge1xuICAgIGNvbnN0IHsgY2xhc3NQYXJlbnQgfSA9IHRoaXMub3B0aW9ucztcblxuICAgIHRoaXMucGFyZW50QmxvY2suY2xhc3NMaXN0LmFkZChjbGFzc1BhcmVudCk7XG5cbiAgICB0aGlzLmNyZWF0ZVRvZ2dsZUJ1dHRvbigpO1xuICAgIHRoaXMuY3JlYXRlTWVudSgpO1xuICB9XG5cbiAgY3JlYXRlVG9nZ2xlQnV0dG9uKCkge1xuICAgIGNvbnN0IHsgY2xhc3NCdXR0b25NZW51IH0gPSB0aGlzLm9wdGlvbnM7XG5cbiAgICBjb25zdCAkdG9nZ2xlQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgJHRvZ2dsZUJ1dHRvbi5jbGFzc05hbWUgPSBjbGFzc0J1dHRvbk1lbnU7XG4gICAgdGhpcy5wYXJlbnRCbG9jay5hcHBlbmRDaGlsZCgkdG9nZ2xlQnV0dG9uKTtcblxuICAgIHRoaXMubm9kZS4kbWVudUJ1dHRvblRvZ2dsZXIgPSAkdG9nZ2xlQnV0dG9uO1xuXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAkdG9nZ2xlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5oYW5kbGVyVG9nZ2xlTWVudSk7XG4gICAgfSwgMCk7XG4gIH1cblxuICBjcmVhdGVNZW51KCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGNsYXNzTWVudUxpc3QsXG4gICAgICBjbGFzc1N1Yk1lbnUsXG4gICAgICBjbGFzc01lbnVJdGVtLFxuICAgICAgY2xhc3NUaXRsZVN1Yk1lbnUsXG4gICAgICBjbGFzc1RpdGxlQ2hlY2tib3gsXG4gICAgfSA9IHRoaXMub3B0aW9ucztcblxuICAgIGNvbnN0IGRhdGEgPSB0aGlzLm1lbnVJdGVtcztcblxuICAgIC8vIGNyZWF0ZSBtZW51IGxpc3RcbiAgICBjb25zdCAkbWVudUxpc3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd1bCcpO1xuICAgICRtZW51TGlzdC5jbGFzc05hbWUgPSBjbGFzc01lbnVMaXN0O1xuICAgICRtZW51TGlzdC5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgJG1lbnVMaXN0LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG5cbiAgICB0aGlzLm5vZGUuJG1lbnVMaXN0ID0gJG1lbnVMaXN0O1xuXG4gICAgdGhpcy5wYXJlbnRCbG9jay5hcHBlbmRDaGlsZCgkbWVudUxpc3QpO1xuXG4gICAgLy8gY3JlYXRlIG1lbnUgaXRlbXNcbiAgICBjb25zdCAkbWVudUl0ZW1zRnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG5cbiAgICBbXS5mb3JFYWNoLmNhbGwoZGF0YSwgKGl0ZW0pID0+IHtcbiAgICAgIGNvbnN0IHsgbGFibGUsIGl0ZW1zIH0gPSBpdGVtO1xuICAgICAgY29uc3QgJGxpc3RJdGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcbiAgICAgICRsaXN0SXRlbS5jbGFzc05hbWUgPSBgJHtjbGFzc01lbnVJdGVtfSBkcm9wLWRvd25gO1xuICAgICAgJGxpc3RJdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCB0aGlzLmhhbmRsZXJNb3VzZUVudGVyTWVudUl0ZW0pO1xuXG4gICAgICBjb25zdCAkbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICAkbGFiZWwuaW5uZXJUZXh0ID0gbGFibGU7XG4gICAgICAkbGlzdEl0ZW0uYXBwZW5kQ2hpbGQoJGxhYmVsKTtcblxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoaXRlbXMpKSB7XG4gICAgICAgIC8vIGNyZWF0ZSBzdWJtZW51IGxpc3RcbiAgICAgICAgY29uc3QgJG1lbnVTdWJsaXN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndWwnKTtcbiAgICAgICAgJG1lbnVTdWJsaXN0LmNsYXNzTmFtZSA9IGNsYXNzU3ViTWVudTtcbiAgICAgICAgJG1lbnVTdWJsaXN0LnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgICAgICAgJG1lbnVTdWJsaXN0LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgICRsaXN0SXRlbS5hcHBlbmRDaGlsZCgkbWVudVN1Ymxpc3QpO1xuXG4gICAgICAgIGNvbnN0ICRsYWJlbFN1Ymxpc3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgJGxhYmVsU3VibGlzdC5jbGFzc05hbWUgPSBjbGFzc1RpdGxlU3ViTWVudTtcbiAgICAgICAgJGxhYmVsU3VibGlzdC5pbm5lclRleHQgPSBsYWJsZTtcbiAgICAgICAgJG1lbnVTdWJsaXN0LmFwcGVuZENoaWxkKCRsYWJlbFN1Ymxpc3QpO1xuXG4gICAgICAgIC8vICAgY3JlYXRlIHN1Ym1lbnUgaXRlbXNcbiAgICAgICAgY29uc3QgJG1lbnVTdWJpdGVtc0ZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuXG4gICAgICAgIFtdLmZvckVhY2guY2FsbChpdGVtcywgKHN1Yml0ZW0pID0+IHtcbiAgICAgICAgICBjb25zdCB7IGlkLCBrZXksIHR5cGUgfSA9IHN1Yml0ZW07XG4gICAgICAgICAgY29uc3QgeyBsYWJsZSwgaXNEaXNwbGF5LCBpc0Fsd2F5c1Zpc2libGUgfSA9IHN1Yml0ZW0uY29sdW1uT3B0aW9ucztcblxuICAgICAgICAgIGlmICghaXNBbHdheXNWaXNpYmxlICYmIHR5cGUgPT09ICdEQVRBJykge1xuICAgICAgICAgICAgY29uc3QgJGxpc3RTdWJpdGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcbiAgICAgICAgICAgICRsaXN0U3ViaXRlbS5jbGFzc05hbWUgPSBjbGFzc01lbnVJdGVtO1xuXG4gICAgICAgICAgICBjb25zdCAkc3VibGFibGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICRsaXN0U3ViaXRlbS5hcHBlbmRDaGlsZCgkc3VibGFibGUpO1xuXG4gICAgICAgICAgICBjb25zdCAkY2hlY2tib3ggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgICAgICAgICAgJGNoZWNrYm94LnR5cGUgPSAnY2hlY2tib3gnO1xuICAgICAgICAgICAgJGNoZWNrYm94Lm5hbWUgPSBrZXk7XG4gICAgICAgICAgICAkY2hlY2tib3guY2xhc3NOYW1lID0gY2xhc3NUaXRsZUNoZWNrYm94O1xuICAgICAgICAgICAgJGNoZWNrYm94LnZhbHVlID0gbGFibGU7XG4gICAgICAgICAgICAkY2hlY2tib3guY2hlY2tlZCA9IGlzRGlzcGxheTtcbiAgICAgICAgICAgICRjaGVja2JveC5pZCA9IGBpZC0ke2tleX0tJHtpZH1gO1xuICAgICAgICAgICAgJGNoZWNrYm94LmRhdGFzZXQuY29sdW1uSWQgPSBpZDtcbiAgICAgICAgICAgICRzdWJsYWJsZS5hcHBlbmRDaGlsZCgkY2hlY2tib3gpO1xuXG4gICAgICAgICAgICAkY2hlY2tib3guYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdGhpcy5oYW5kbGVyQ2hhbmdlQ2hlY2tib3gpO1xuXG4gICAgICAgICAgICBjb25zdCAkbGFiZWxDaGVja2JveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xhYmVsJyk7XG4gICAgICAgICAgICAkbGFiZWxDaGVja2JveC5odG1sRm9yID0gYGlkLSR7a2V5fS0ke2lkfWA7XG4gICAgICAgICAgICAkc3VibGFibGUuYXBwZW5kQ2hpbGQoJGxhYmVsQ2hlY2tib3gpO1xuXG4gICAgICAgICAgICBjb25zdCAkbGFiZWxUZXh0ID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUobGFibGUpO1xuICAgICAgICAgICAgJGxhYmVsQ2hlY2tib3guYXBwZW5kQ2hpbGQoJGxhYmVsVGV4dCk7XG5cbiAgICAgICAgICAgICRtZW51U3ViaXRlbXNGcmFnbWVudC5hcHBlbmRDaGlsZCgkbGlzdFN1Yml0ZW0pO1xuICAgICAgICAgIH0gLy8gaWYodHlwZSAhPT0gJ1NZU1RFTScgJiYgaXNFZGl0YWJsZSlcbiAgICAgICAgfSk7XG5cbiAgICAgICAgJG1lbnVTdWJsaXN0LmFwcGVuZENoaWxkKCRtZW51U3ViaXRlbXNGcmFnbWVudCk7XG4gICAgICB9XG5cbiAgICAgICRtZW51SXRlbXNGcmFnbWVudC5hcHBlbmRDaGlsZCgkbGlzdEl0ZW0pO1xuICAgIH0pO1xuICAgICRtZW51TGlzdC5hcHBlbmRDaGlsZCgkbWVudUl0ZW1zRnJhZ21lbnQpO1xuICB9XG5cbiAgb3Blbk1lbnVMaXN0KCkge1xuICAgIGNvbnN0IHsgJG1lbnVMaXN0LCAkbWVudUJ1dHRvblRvZ2dsZXIgfSA9IHRoaXMubm9kZTtcblxuICAgICRtZW51TGlzdC5zdHlsZS5kaXNwbGF5ID0gJyc7XG4gICAgJG1lbnVMaXN0LmNsYXNzTGlzdC5hZGQoJ29wZW4nKTtcbiAgICAkbWVudUJ1dHRvblRvZ2dsZXIuY2xhc3NMaXN0LmFkZCgnb3BlbicpO1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmhlbmRsZXJPdXRzaWRlQ2xpY2tFdmVudCk7XG4gICAgfSwgMCk7XG4gIH1cblxuICBjbG9zZU1lbnVMaXN0KCkge1xuICAgIGNvbnN0IHsgJG1lbnVMaXN0LCAkbWVudUJ1dHRvblRvZ2dsZXIgfSA9IHRoaXMubm9kZTtcblxuICAgICRtZW51TGlzdC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICRtZW51TGlzdC5jbGFzc0xpc3QucmVtb3ZlKCdvcGVuJyk7XG4gICAgJG1lbnVCdXR0b25Ub2dnbGVyLmNsYXNzTGlzdC5yZW1vdmUoJ29wZW4nKTtcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuaGVuZGxlck91dHNpZGVDbGlja0V2ZW50KTtcbiAgfVxuXG4gIC8vIGhhbmRsZXJzXG5cbiAgaGFuZGxlclRvZ2dsZU1lbnUoZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnb3BlbicpKSB7XG4gICAgICB0aGlzLmNsb3NlTWVudUxpc3QoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5vcGVuTWVudUxpc3QoKTtcbiAgICB9XG4gIH1cblxuICBoYW5kbGVyTW91c2VFbnRlck1lbnVJdGVtKGV2ZW50KSB7XG4gICAgY29uc3QgbWVudUl0ZW0gPSBldmVudC50YXJnZXQ7XG4gICAgY29uc3QgbWVudUxpc3QgPSBtZW51SXRlbS5xdWVyeVNlbGVjdG9yKCd1bCcpO1xuXG4gICAgY29uc3QgaGVuZGxlck1vc2VMaXZlID0gKCkgPT4ge1xuICAgICAgbWVudUxpc3Quc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgIG1lbnVJdGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCBoZW5kbGVyTW9zZUxpdmUpO1xuICAgIH07XG5cbiAgICBtZW51TGlzdC5zdHlsZS5kaXNwbGF5ID0gJyc7XG5cbiAgICBtZW51SXRlbS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgaGVuZGxlck1vc2VMaXZlKTtcbiAgfVxuXG4gIGhlbmRsZXJPdXRzaWRlQ2xpY2tFdmVudChldmVudCkge1xuICAgIGNvbnN0IHsgJG1lbnVMaXN0IH0gPSB0aGlzLm5vZGU7XG4gICAgY29uc3QgJGVsZW1FdmVudCA9IGV2ZW50LnRhcmdldDtcblxuICAgIGlmICgkbWVudUxpc3QuY2xhc3NMaXN0LmNvbnRhaW5zKCdvcGVuJykpIHtcbiAgICAgIGlmICghJG1lbnVMaXN0LmNvbnRhaW5zKCRlbGVtRXZlbnQpKSB7XG4gICAgICAgIHRoaXMuY2xvc2VNZW51TGlzdCgpO1xuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuaGVuZGxlck91dHNpZGVDbGlja0V2ZW50KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBoYW5kbGVyQ2hhbmdlQ2hlY2tib3goZXZlbnQpIHtcbiAgICBjb25zdCBjb2x1bW5zID0gdGhpcy5nZXRPcHRpb25EYXRhVGFibGUoKTtcbiAgICBjb25zdCAkY2hlY2tib3ggPSBldmVudC50YXJnZXQ7XG4gICAgY29uc3QgeyBjb2x1bW5JZCB9ID0gJGNoZWNrYm94LmRhdGFzZXQ7XG4gICAgY29uc3QgeyBjaGVja2VkIH0gPSAkY2hlY2tib3g7XG5cbiAgICBjb25zdCBhcnIgPSBbXS5tYXAuY2FsbChjb2x1bW5zLCAoY29sdW1uKSA9PiB7XG4gICAgICBpZiAoY29sdW1uLmlkID09PSBOdW1iZXIoY29sdW1uSWQpKSB7XG4gICAgICAgIHJldHVybiB7IC4uLmNvbHVtbiwgY29sdW1uT3B0aW9uczogeyAuLi5jb2x1bW4uY29sdW1uT3B0aW9ucywgaXNEaXNwbGF5OiBjaGVja2VkIH0gfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb2x1bW47XG4gICAgfSk7XG5cbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMuc2V0T3B0aW9uRGF0YVRhYmxlKGFycik7XG4gICAgICB0aGlzLnJlbmRlclRhYmxlKCk7XG4gICAgfSwgMCk7XG4gIH1cblxuICBkZXN0cm95KCkge1xuICAgIGNvbnNvbGUubG9nKCdkZXN0cm95KCksIG5vIGZ1bmN0aW9uYWxpdHkhJyk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29udGV4dE1lbnU7XG4iLCJjbGFzcyBIZWFkZXJUYWJsZSB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgY29uc3QgZGVmYXVsdHNPcHRpb25zID0ge1xuICAgICAgY2xhc3NQYXJlbnQ6ICd0YWJsZS1oZWFkZXInLFxuICAgICAgY2xhc3NIZWFkZXJSb3c6ICd0YWJsZS1oZWFkZXJfX3JvdycsXG4gICAgICBjbGFzc0hlYWRlckNvbHVtbjogJ3RhYmxlLWhlYWRlcl9fY29sdW1uJyxcbiAgICAgIGNsYXNzSGVhZGVyQ29udGVudDogJ3RhYmxlLWhlYWRlcl9fY29udGVudCcsXG4gICAgICBjbGFzc0NvbHVtblJlc2l6ZXI6ICd0YWJsZS1oZWFkZXJfX3Jlc2l6ZXInLFxuICAgICAgLy9cbiAgICAgIG1pbldpZHRoQ29sdW1uOiA3MCxcbiAgICB9O1xuICAgIGNvbnN0IHtcbiAgICAgIHBhcmVudEJsb2NrLCBnZXRPcHRpb25EYXRhVGFibGUsIHNldE9wdGlvbkRhdGFUYWJsZSwgY2FsbERhdGEsIHJlbmRlclRhYmxlLCBnZXRNZWRpYVF1ZXJ5LFxuICAgIH0gPSBwcm9wcztcbiAgICBPYmplY3QuYXNzaWduKHRoaXMsIHtcbiAgICAgIHBhcmVudEJsb2NrLCBnZXRPcHRpb25EYXRhVGFibGUsIHNldE9wdGlvbkRhdGFUYWJsZSwgY2FsbERhdGEsIHJlbmRlclRhYmxlLCBnZXRNZWRpYVF1ZXJ5LFxuICAgIH0pO1xuXG4gICAgdGhpcy5vcHRpb25zID0gT2JqZWN0LmFzc2lnbihkZWZhdWx0c09wdGlvbnMpO1xuXG4gICAgdGhpcy5vcHRpb25zLnRhYmxlV2lkdGggPSBudWxsO1xuICAgIHRoaXMub3B0aW9ucy50b3RhbFNob3dDb2x1bW5zID0gbnVsbDtcbiAgICB0aGlzLm9wdGlvbnMuc2l6ZUNvbHVtbnMgPSBbXTtcblxuICAgIHRoaXMubm9kZSA9IHt9O1xuXG4gICAgdGhpcy5kYXRhT3B0aW9uVGFibGUgPSBbXTtcblxuICAgIHRoaXMuZHJhZ0NvbHVtbiA9IGZhbHNlO1xuICAgIHRoaXMuZHJhZ0N1cmVudENvbHVtbiA9IHVuZGVmaW5lZDtcblxuICAgIC8vIGJpbmQgdGhpc1xuICAgIHRoaXMuaGFuZGxlckNvbHVtbk1vdXNlRW50ZXIgPSB0aGlzLmhhbmRsZXJDb2x1bW5Nb3VzZUVudGVyLmJpbmQodGhpcyk7XG4gICAgdGhpcy5oYW5kbGVyQ29sdW1uRHJhZ1N0YXJ0ID0gdGhpcy5oYW5kbGVyQ29sdW1uRHJhZ1N0YXJ0LmJpbmQodGhpcyk7XG4gICAgdGhpcy5oYW5kbGVyQ29sdW1uRHJhZ0xlYXZlID0gdGhpcy5oYW5kbGVyQ29sdW1uRHJhZ0xlYXZlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5oYW5kbGVyQ29sdW1uRHJhZ0VuZCA9IHRoaXMuaGFuZGxlckNvbHVtbkRyYWdFbmQuYmluZCh0aGlzKTtcbiAgICB0aGlzLmhhbmRsZXJDb2x1bW5EcmFnT3ZlciA9IHRoaXMuaGFuZGxlckNvbHVtbkRyYWdPdmVyLmJpbmQodGhpcyk7XG4gICAgdGhpcy5oYW5kbGVyQ29sdW1uRHJvcCA9IHRoaXMuaGFuZGxlckNvbHVtbkRyb3AuYmluZCh0aGlzKTtcbiAgfSAvLyBjb25zdHJ1Y3RvclxuXG4gIHJlbmRlcigpIHtcbiAgICAvLyBjb25zb2xlLmxvZygnc3RhcnQgcmVuZGVyID4gSGVhZGVyVGFibGUnKTtcblxuICAgIGlmICh0aGlzLmdldE1lZGlhUXVlcnkoKSAhPT0gJ2Rlc2t0b3AnKSB7XG4gICAgICB0aGlzLtGBbGVhclBhcmVudEJsb2NrKCk7XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmRhdGFPcHRpb25UYWJsZSA9IHRoaXMuZ2V0T3B0aW9uRGF0YVRhYmxlKCk7XG5cbiAgICBpZiAoIXRoaXMuY2hlY2tEYXRhKCkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIERBVEEsIGhlYWRlciB0YWJsZSBkYXRhIG5vdCBmb3VuZCcpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5jaGVja1BhcmVudCgpKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBET01FbGVtZW50LCBwYXJlbnQgYmxvY2sgZm9yIGhlYWRlciB0YWJsZSBub3QgZm91bmQnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLtGBbGVhclBhcmVudEJsb2NrKCk7XG5cbiAgICB0aGlzLnRhYmxlT3B0aW9uc0NhbGN1bGF0b3IoKTtcblxuICAgIHRoaXMuY3JlYXRlKCk7XG4gIH1cblxuICB0YWJsZU9wdGlvbnNDYWxjdWxhdG9yKCkge1xuICAgIGNvbnN0ICRwYXJlbnQgPSB0aGlzLnBhcmVudEJsb2NrO1xuICAgIGNvbnN0IHsgZGF0YU9wdGlvblRhYmxlIH0gPSB0aGlzO1xuICAgIGNvbnN0IHsgbWluV2lkdGhDb2x1bW4gfSA9IHRoaXMub3B0aW9ucztcblxuICAgIGZ1bmN0aW9uIHJvdW5kVXAobnVtLCBwcmVjaXNpb24pIHtcbiAgICAgIHByZWNpc2lvbiA9IDEwICoqIHByZWNpc2lvbjtcbiAgICAgIHJldHVybiBNYXRoLmNlaWwobnVtICogcHJlY2lzaW9uKSAvIHByZWNpc2lvbjtcbiAgICB9XG5cbiAgICBjb25zdCB3aWR0aFBhcmVudCA9ICRwYXJlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7XG5cbiAgICBjb25zdCBzaXplQ29sdW1ucyA9IFtdO1xuICAgIHNpemVDb2x1bW5zLmFyZWVXaWR0aCA9IHdpZHRoUGFyZW50O1xuICAgIHNpemVDb2x1bW5zLnBhcnQgPSAwO1xuICAgIHNpemVDb2x1bW5zLm9uZVBhcnQgPSAwO1xuXG4gICAgY29uc3QgdG90YWxDb2x1bW5zU2hvd24gPSBbXS5yZWR1Y2UuY2FsbChkYXRhT3B0aW9uVGFibGUsIChyZXN1bHQsIGNvbCkgPT4ge1xuICAgICAgaWYgKGNvbC5jb2x1bW5PcHRpb25zLmlzRGlzcGxheSkge1xuICAgICAgICBzaXplQ29sdW1ucy5wdXNoKHtcbiAgICAgICAgICBpZDogY29sLmlkLFxuICAgICAgICAgIHdpZHRoOiBjb2wuY29sdW1uT3B0aW9ucy53aWR0aCxcbiAgICAgICAgICBmaXhpZDogdHlwZW9mIGNvbC5jb2x1bW5PcHRpb25zLndpZHRoID09PSAnc3RyaW5nJyxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICh0eXBlb2YgY29sLmNvbHVtbk9wdGlvbnMud2lkdGggIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgc2l6ZUNvbHVtbnMucGFydCArPSBjb2wuY29sdW1uT3B0aW9ucy53aWR0aDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0ICsgMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSwgMCk7XG5cbiAgICBzaXplQ29sdW1ucy5mb3JFYWNoKChpdGVtLCBpbmRleCkgPT4ge1xuICAgICAgaWYgKGl0ZW0uZml4aWQpIHtcbiAgICAgICAgaWYgKGl0ZW0ud2lkdGguc2xpY2UoLTIpID09PSAncHgnKSB7XG4gICAgICAgICAgY29uc3Qgd2lkdGggPSBOdW1iZXIoaXRlbS53aWR0aC5zbGljZSgwLCAtMikpO1xuICAgICAgICAgIHNpemVDb2x1bW5zW2luZGV4XS53aWR0aCA9IHJvdW5kVXAoKCt3aWR0aCksIDIpO1xuICAgICAgICAgIHNpemVDb2x1bW5zLmFyZWVXaWR0aCAtPSByb3VuZFVwKCgrd2lkdGgpLCAyKTtcbiAgICAgICAgICBzaXplQ29sdW1ucy5vbmVQYXJ0ID0gcm91bmRVcCgoK3NpemVDb2x1bW5zLmFyZWVXaWR0aCAvIHNpemVDb2x1bW5zLnBhcnQpLCAyKTtcbiAgICAgICAgfSBlbHNlIGlmIChpdGVtLndpZHRoLnNsaWNlKC0xKSA9PT0gJyUnKSB7XG4gICAgICAgICAgY29uc3Qgd2lkdGggPSBOdW1iZXIoaXRlbS53aWR0aC5zbGljZSgwLCAtMSkpO1xuICAgICAgICAgIHNpemVDb2x1bW5zW2luZGV4XS53aWR0aCA9IHJvdW5kVXAoKCt3aWR0aFBhcmVudCAqICt3aWR0aCkgLyAxMDAsIDIpO1xuICAgICAgICAgIHNpemVDb2x1bW5zLmFyZWVXaWR0aCAtPSByb3VuZFVwKCgrd2lkdGhQYXJlbnQgKiArd2lkdGgpIC8gMTAwLCAyKTtcbiAgICAgICAgICBzaXplQ29sdW1ucy5vbmVQYXJ0ID0gcm91bmRVcCgoK3NpemVDb2x1bW5zLmFyZWVXaWR0aCAvIHNpemVDb2x1bW5zLnBhcnQpLCAyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgc2l6ZUNvbHVtbnMuZm9yRWFjaCgoaXRlbSwgaW5kZXgpID0+IHtcbiAgICAgIGlmICghaXRlbS5maXhpZCkge1xuICAgICAgICBjb25zdCBtYXggPSBNYXRoLm1heChtaW5XaWR0aENvbHVtbiwgcm91bmRVcChzaXplQ29sdW1ucy5vbmVQYXJ0ICogaXRlbS53aWR0aCwgMikpO1xuICAgICAgICBzaXplQ29sdW1uc1tpbmRleF0ud2lkdGggPSBtYXg7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB0aGlzLm9wdGlvbnMudG90YWxTaG93Q29sdW1ucyA9IHRvdGFsQ29sdW1uc1Nob3duO1xuICAgIHRoaXMub3B0aW9ucy50YWJsZVdpZHRoID0gd2lkdGhQYXJlbnQ7XG4gICAgdGhpcy5vcHRpb25zLnNpemVDb2x1bW5zID0gQXJyYXkuZnJvbShzaXplQ29sdW1ucyk7XG4gIH1cblxuICBmaXhDb2x1bW5XaWR0aCgpIHtcbiAgICAvLyBjb25zb2xlLmxvZygncnVuID4gZml4Q29sdW1uV2lkdGgnKTtcblxuICAgIGNvbnN0IHsgc2l6ZUNvbHVtbnMgfSA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCB7IGRhdGFPcHRpb25UYWJsZSB9ID0gdGhpcztcblxuICAgIFtdLmZvckVhY2guY2FsbChzaXplQ29sdW1ucywgKGl0ZW0pID0+IHtcbiAgICAgIGNvbnN0IGluZGV4Rml4Um93ID0gW10uZmluZEluZGV4LmNhbGwoZGF0YU9wdGlvblRhYmxlLCAocm93KSA9PiByb3cuaWQgPT09IGl0ZW0uaWQpO1xuXG4gICAgICBkYXRhT3B0aW9uVGFibGVbaW5kZXhGaXhSb3ddLmNvbHVtbk9wdGlvbnMud2lkdGggPSBgJHtpdGVtLndpZHRofXB4YDtcbiAgICB9KTtcblxuICAgIHRoaXMuc2V0T3B0aW9uRGF0YVRhYmxlKGRhdGFPcHRpb25UYWJsZSk7XG4gIH1cblxuICBjaGVja1BhcmVudCgpIHtcbiAgICAvLyBjb25zb2xlLmxvZyh0aGlzLnBhcmVudEJsb2NrKTtcbiAgICBpZiAodGhpcy5wYXJlbnRCbG9jayAmJiB0aGlzLnBhcmVudEJsb2NrIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjaGVja0RhdGEoKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5kYXRhT3B0aW9uVGFibGUpICYmIHRoaXMuZGF0YU9wdGlvblRhYmxlLmxlbmd0aCAhPT0gMCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gINGBbGVhclBhcmVudEJsb2NrKCkge1xuICAgIGlmICh0aGlzLnBhcmVudEJsb2NrLmhhc0NoaWxkTm9kZXMoKSkge1xuICAgICAgdGhpcy5wYXJlbnRCbG9jay5pbm5lckhUTUwgPSAnJztcbiAgICB9XG4gIH1cblxuICBjcmVhdGUoKSB7XG4gICAgY29uc3QgJHBhcmVudCA9IHRoaXMucGFyZW50QmxvY2s7XG4gICAgY29uc3QgeyBkYXRhT3B0aW9uVGFibGUgfSA9IHRoaXM7XG4gICAgY29uc3QgeyBzaXplQ29sdW1ucyB9ID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IHtcbiAgICAgIGNsYXNzUGFyZW50LFxuICAgICAgY2xhc3NIZWFkZXJSb3csXG4gICAgICBjbGFzc0hlYWRlckNvbHVtbixcbiAgICAgIGNsYXNzSGVhZGVyQ29udGVudCxcbiAgICB9ID0gdGhpcy5vcHRpb25zO1xuXG4gICAgJHBhcmVudC5jbGFzc0xpc3QuYWRkKGNsYXNzUGFyZW50KTtcblxuICAgIGNvbnN0ICR0YWJsZVJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RyJyk7XG4gICAgJHRhYmxlUm93LmNsYXNzTmFtZSA9IGNsYXNzSGVhZGVyUm93O1xuICAgICRwYXJlbnQuYXBwZW5kQ2hpbGQoJHRhYmxlUm93KTtcblxuICAgIGRhdGFPcHRpb25UYWJsZVxuICAgICAgLmZvckVhY2goKGNvbHVtbiwgaW5kZXgsIGFycmF5KSA9PiB7XG4gICAgICAgIGNvbnN0IHsgaWQgfSA9IGNvbHVtbjtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgIHRpdGxlLFxuICAgICAgICAgIGlzRGlzcGxheSxcbiAgICAgICAgICBpc1Jlc2l6ZSxcbiAgICAgICAgICBpc0RyYWdnYWJsZSxcbiAgICAgICAgfSA9IGNvbHVtbi5jb2x1bW5PcHRpb25zO1xuXG4gICAgICAgIGxldCBpc0xhc3RpdGVyYXRpb24gPSBmYWxzZTtcblxuICAgICAgICBpZiAoaW5kZXggPT09IGFycmF5Lmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICBpc0xhc3RpdGVyYXRpb24gPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRGlzcGxheSkge1xuICAgICAgICAgIGNvbnN0IHRhYmxlSGVhZGluZ0NvbHVtbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RoJyk7XG4gICAgICAgICAgdGFibGVIZWFkaW5nQ29sdW1uLmNsYXNzTmFtZSA9IGNsYXNzSGVhZGVyQ29sdW1uO1xuICAgICAgICAgIHRhYmxlSGVhZGluZ0NvbHVtbi5kYXRhc2V0LmhlYWRlcklkID0gYCR7aWR9YDtcblxuICAgICAgICAgIGNvbnN0IHNpemVXaWR0aEluZGV4ID0gc2l6ZUNvbHVtbnMuZmluZEluZGV4KChpdGVtKSA9PiBpdGVtLmlkID09PSBpZCk7XG5cbiAgICAgICAgICB0YWJsZUhlYWRpbmdDb2x1bW4uc3R5bGUud2lkdGggPSBgJHtzaXplQ29sdW1uc1tzaXplV2lkdGhJbmRleF0ud2lkdGh9cHhgO1xuXG4gICAgICAgICAgY29uc3QgY29udGVudEJsb2NrID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgY29udGVudEJsb2NrLmlubmVyVGV4dCA9IHRpdGxlO1xuXG4gICAgICAgICAgY29udGVudEJsb2NrLmNsYXNzTmFtZSA9IGNsYXNzSGVhZGVyQ29udGVudDtcbiAgICAgICAgICBjb250ZW50QmxvY2suc3R5bGUud2hpdGVTcGFjZSA9ICdub3dyYXAnO1xuICAgICAgICAgIGNvbnRlbnRCbG9jay5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xuICAgICAgICAgIGNvbnRlbnRCbG9jay5zdHlsZS5tYXJnaW4gPSAnMnB4JztcblxuICAgICAgICAgIHRhYmxlSGVhZGluZ0NvbHVtbi5hcHBlbmRDaGlsZChjb250ZW50QmxvY2spO1xuICAgICAgICAgICR0YWJsZVJvdy5hcHBlbmRDaGlsZCh0YWJsZUhlYWRpbmdDb2x1bW4pO1xuXG4gICAgICAgICAgaWYgKGlzTGFzdGl0ZXJhdGlvbikge1xuICAgICAgICAgICAgY29uc3QgJGxhc3RDb2x1bW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0aCcpO1xuICAgICAgICAgICAgJGxhc3RDb2x1bW4uc3R5bGUud2lkdGggPSAnYXV0byc7XG4gICAgICAgICAgICAkdGFibGVSb3cuYXBwZW5kQ2hpbGQoJGxhc3RDb2x1bW4pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChpc1Jlc2l6ZSkge1xuICAgICAgICAgICAgdGhpcy5jcmVhdGVSZXNpemFibGVDb2x1bW4odGFibGVIZWFkaW5nQ29sdW1uKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoaXNEcmFnZ2FibGUgJiYgIWlzTGFzdGl0ZXJhdGlvbikge1xuICAgICAgICAgICAgdGFibGVIZWFkaW5nQ29sdW1uLmRyYWdnYWJsZSA9IGZhbHNlO1xuXG4gICAgICAgICAgICAvLyBtb3VzZSBldmVudFxuICAgICAgICAgICAgY29udGVudEJsb2NrLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCB0aGlzLmhhbmRsZXJDb2x1bW5Nb3VzZUVudGVyKTtcblxuICAgICAgICAgICAgLy8gZHJhZyBldmVudFxuICAgICAgICAgICAgdGFibGVIZWFkaW5nQ29sdW1uLmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdzdGFydCcsIChldmVudCkgPT4geyB0aGlzLmhhbmRsZXJDb2x1bW5EcmFnU3RhcnQoZXZlbnQsIGNvbHVtbik7IH0pO1xuICAgICAgICAgICAgdGFibGVIZWFkaW5nQ29sdW1uLmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdlbmQnLCAoZXZlbnQpID0+IHsgdGhpcy5oYW5kbGVyQ29sdW1uRHJhZ0VuZChldmVudCk7IH0pO1xuXG4gICAgICAgICAgICB0YWJsZUhlYWRpbmdDb2x1bW4uYWRkRXZlbnRMaXN0ZW5lcignZHJhZ292ZXInLCAoZXZlbnQpID0+IHsgdGhpcy5oYW5kbGVyQ29sdW1uRHJhZ092ZXIoZXZlbnQpOyB9KTtcbiAgICAgICAgICAgIHRhYmxlSGVhZGluZ0NvbHVtbi5hZGRFdmVudExpc3RlbmVyKCdkcmFnbGVhdmUnLCAoZXZlbnQpID0+IHsgdGhpcy5oYW5kbGVyQ29sdW1uRHJhZ0xlYXZlKGV2ZW50KTsgfSk7XG4gICAgICAgICAgICB0YWJsZUhlYWRpbmdDb2x1bW4uYWRkRXZlbnRMaXN0ZW5lcignZHJhZ2VudGVyJywgKGV2ZW50KSA9PiB7IHRoaXMuaGFuZGxlckNvbHVtbkRyYWdFbnRlcihldmVudCk7IH0pO1xuXG4gICAgICAgICAgICB0YWJsZUhlYWRpbmdDb2x1bW4uYWRkRXZlbnRMaXN0ZW5lcignZHJvcCcsIChldmVudCkgPT4geyB0aGlzLmhhbmRsZXJDb2x1bW5Ecm9wKGV2ZW50LCBjb2x1bW4pOyB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICB9XG5cbiAgLy8gY3JlYXRlUmVzaXphYmxlQ29sdW1uXG5cbiAgY3JlYXRlUmVzaXphYmxlQ29sdW1uKCRjb2x1bW4pIHtcbiAgICBjb25zdCB7IGNsYXNzQ29sdW1uUmVzaXplciB9ID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0ICR0YWJsZSA9ICRjb2x1bW4uY2xvc2VzdCgndGFibGUnKTtcblxuICAgIGNvbnN0ICRyZXNpemVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgJHJlc2l6ZXIuY2xhc3NOYW1lID0gY2xhc3NDb2x1bW5SZXNpemVyO1xuICAgICRjb2x1bW4uYXBwZW5kQ2hpbGQoJHJlc2l6ZXIpO1xuXG4gICAgdGhpcy5oYW5kbGVyQ2hhbmdlQ29sdW1uU2l6ZSgkY29sdW1uLCAkcmVzaXplcik7XG5cbiAgICAkcmVzaXplci5zdHlsZS5oZWlnaHQgPSBgJHskdGFibGUub2Zmc2V0SGVpZ2h0fXB4YDtcblxuICAgICRyZXNpemVyLm9ubW91c2VlbnRlciA9IChlKSA9PiB7XG4gICAgICAkcmVzaXplci5zdHlsZS5oZWlnaHQgPSBgJHskdGFibGUub2Zmc2V0SGVpZ2h0fXB4YDtcbiAgICB9O1xuICB9XG5cbiAgLy8gdXBkYXRlV2lkdGhJbkRhdGFcblxuICB1cGRhdGVXaWR0aEluRGF0YSgkY29sdW1uLCB3aWR0aENvbHVtbikge1xuICAgIGNvbnN0IGNvbHVtbnMgPSB0aGlzLmRhdGFPcHRpb25UYWJsZTtcbiAgICBjb25zdCBjb2x1bW5JZCA9IE51bWJlcigkY29sdW1uLmRhdGFzZXQuaGVhZGVySWQpO1xuXG4gICAgaWYgKCRjb2x1bW4udGFnTmFtZSAhPT0gJ1RIJyAmJiAhY29sdW1uSWQpIHJldHVybjtcblxuICAgIFtdLmZvckVhY2guY2FsbChjb2x1bW5zLCAoY29sLCBpbmRleCkgPT4ge1xuICAgICAgaWYgKGNvbC5pZCA9PT0gY29sdW1uSWQpIHtcbiAgICAgICAgY29sdW1uc1tpbmRleF0gPSB7IC4uLmNvbCwgY29sdW1uT3B0aW9uczogeyAuLi5jb2wuY29sdW1uT3B0aW9ucywgd2lkdGg6IHdpZHRoQ29sdW1uIH0gfTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHRoaXMuc2V0T3B0aW9uRGF0YVRhYmxlKGNvbHVtbnMpO1xuICB9XG5cbiAgLy8gaGFuZGxlcnNcblxuICBoYW5kbGVyQ2hhbmdlQ29sdW1uU2l6ZSgkY29sdW1uLCAkcmVzaXplcikge1xuICAgIGxldCB4ID0gMDtcbiAgICBsZXQgd2lkdGhDb2x1bW4gPSAwO1xuICAgIGxldCB3aWR0aENvbHVtbkVuZCA9IDA7XG5cbiAgICBjb25zdCAkdGFibGUgPSAkY29sdW1uLmNsb3Nlc3QoJ3RhYmxlJyk7XG5cbiAgICBjb25zdCB3aWR0aFRhYmxlID0gJHRhYmxlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoO1xuXG4gICAgY29uc3QgbW91c2VEb3duSGFuZGxlciA9IChtb3VzZURvd25FdmVudCkgPT4ge1xuICAgICAgeCA9IG1vdXNlRG93bkV2ZW50LmNsaWVudFg7XG5cbiAgICAgIGNvbnN0IHN0eWxlcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCRjb2x1bW4pO1xuICAgICAgd2lkdGhDb2x1bW4gPSBwYXJzZUludChzdHlsZXMud2lkdGgsIDEwKTtcblxuICAgICAgY29uc3QgbW91c2VNb3ZlSGFuZGxlciA9IChtb3VzZU1vdmVFdmVudCkgPT4ge1xuICAgICAgICBjb25zdCBkeCA9IG1vdXNlTW92ZUV2ZW50LmNsaWVudFggLSB4O1xuICAgICAgICBpZiAod2lkdGhDb2x1bW4gKyBkeCA+IDIwICYmIHdpZHRoQ29sdW1uICsgZHggPCAod2lkdGhUYWJsZSAvIDIpKSB7XG4gICAgICAgICAgd2lkdGhDb2x1bW5FbmQgPSB3aWR0aENvbHVtbiArIGR4O1xuICAgICAgICAgICRjb2x1bW4uc3R5bGUud2lkdGggPSBgJHt3aWR0aENvbHVtbkVuZH1weGA7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IG1vdXNlVXBIYW5kbGVyID0gKCkgPT4ge1xuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBtb3VzZU1vdmVIYW5kbGVyKTtcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIG1vdXNlVXBIYW5kbGVyKTtcblxuICAgICAgICB0aGlzLnRhYmxlT3B0aW9uc0NhbGN1bGF0b3IoKTtcblxuICAgICAgICB0aGlzLmZpeENvbHVtbldpZHRoKCk7XG5cbiAgICAgICAgdGhpcy51cGRhdGVXaWR0aEluRGF0YSgkY29sdW1uLCBgJHt3aWR0aENvbHVtbkVuZH1weGApO1xuICAgICAgfTtcblxuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgbW91c2VNb3ZlSGFuZGxlcik7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgbW91c2VVcEhhbmRsZXIpO1xuICAgIH07XG5cbiAgICAkcmVzaXplci5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBtb3VzZURvd25IYW5kbGVyKTtcbiAgfVxuXG4gIGhhbmRsZXJDb2x1bW5Nb3VzZUVudGVyKGV2ZW50KSB7XG4gICAgY29uc3QgJGNvbHVtbkRyYWdnYWJsZSA9IGV2ZW50LnRhcmdldC5jbG9zZXN0KCdbZGF0YS1oZWFkZXItaWRdJyk7XG5cbiAgICBjb25zdCBoYW5kbGVyQ29sdW1uTW91c2VMZWF2ZSA9ICgpID0+IHtcbiAgICAgICRjb2x1bW5EcmFnZ2FibGUuZHJhZ2dhYmxlID0gZmFsc2U7XG4gICAgICBldmVudC50YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIGhhbmRsZXJDb2x1bW5Nb3VzZUxlYXZlKTtcbiAgICB9O1xuXG4gICAgZXZlbnQudGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCBoYW5kbGVyQ29sdW1uTW91c2VMZWF2ZSk7XG5cbiAgICAkY29sdW1uRHJhZ2dhYmxlLmRyYWdnYWJsZSA9IHRydWU7XG4gIH1cblxuICAvLyBldmVudCBkcmFnIGFuZCBkcm9wXG5cbiAgaGFuZGxlckNvbHVtbkRyYWdTdGFydChlLCBjb2x1bW4pIHtcbiAgICAvLyDQv9GA0Lgg0L3QsNGH0LDQu9C1INC/0LXRgNC10YLQsNGB0LrQuNCy0LDQvdC40Y8g0Y3Qu9C10LzQtdC90YLQsFxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgZS50YXJnZXQuc3R5bGUub3BhY2l0eSA9ICcwLjMnO1xuICAgIH0sIDEwMCk7XG5cbiAgICBjb25zdCAkcGFyZW50ID0gZS50YXJnZXQuY2xvc2VzdCgndGhlYWQnKTtcbiAgICBbXS5mb3JFYWNoLmNhbGwoJHBhcmVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZHJhZ2dhYmxlXScpLCAoZWxlbSkgPT4ge1xuICAgICAgZWxlbS5jbGFzc0xpc3QuYWRkKCdkcmFnLW92ZXJsYXktb24nKTtcbiAgICB9KTtcblxuICAgIHRoaXMuZHJhZ0NvbHVtbiA9IHRydWU7XG4gICAgdGhpcy5kcmFnQ3VyZW50Q29sdW1uID0gY29sdW1uO1xuICB9XG5cbiAgaGFuZGxlckNvbHVtbkRyYWdFbmQoZSkge1xuICAgIC8vINC60L7Qs9C00LAg0L/QtdGA0LXRgtCw0YHQutC40LLQsNC90LjQtSDQt9Cw0LLQtdGA0YjQsNC10YLRgdGPXG4gICAgdGhpcy5kcmFnQ29sdW1uID0gZmFsc2U7XG4gICAgdGhpcy5kcmFnQ3VyZW50Q29sdW1uID0gbnVsbDtcblxuICAgIGUudGFyZ2V0LnN0eWxlLmRpc3BsYXkgPSAnJztcbiAgICBlLmN1cnJlbnRUYXJnZXQuc3R5bGUub3BhY2l0eSA9ICcxJztcblxuICAgIGlmICh0aGlzLmRyb3BDb2x1bW4pIHtcbiAgICAgIHRoaXMuZHJvcENvbHVtbiA9IGZhbHNlO1xuXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhpcy5yZW5kZXJUYWJsZSgpO1xuICAgICAgfSwgMCk7XG4gICAgfVxuICB9XG5cbiAgaGFuZGxlckNvbHVtbkRyYWdPdmVyKGUpIHtcbiAgICAvLyDQutC+0LPQtNCwINGN0LvQtdC80LXQvdGCINC/0LXRgNC10YLQsNGB0LrQuNCy0LDQtdGC0YHRjyDQsiDQtNC+0L/Rg9GB0YLQuNC80YPRjiDQt9C+0L3Rg1xuICAgIGlmICh0aGlzLmRyYWdDb2x1bW4pIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGUuZGF0YVRyYW5zZmVyLmRyb3BFZmZlY3QgPSAnbW92ZSc7XG4gICAgfVxuICB9XG5cbiAgaGFuZGxlckNvbHVtbkRyYWdFbnRlcihlKSB7XG4gICAgLy8g0LrQvtCz0LTQsCDRjdC70LXQvNC10L3RgiDQv9C+0L/QsNC00LDQtdGCINCyINC00L7Qv9GD0YHRgtC40LzRg9GOINC30L7QvdGDXG4gICAgaWYgKHRoaXMuZHJvcENvbHVtbikge1xuICAgICAgZS5jdXJyZW50VGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ2RyYWctaG92ZXInKTtcbiAgICB9XG4gIH1cblxuICBoYW5kbGVyQ29sdW1uRHJhZ0xlYXZlKGUpIHtcbiAgICAvLyDQutC+0LPQtNCwINGN0LvQtdC80LXQvdGCINC/0L7QutC40LTQsNC10YIg0LTQvtC/0YPRgdGC0LjQvNGD0Y4g0LfQvtC90YNcbiAgICBlLmN1cnJlbnRUYXJnZXQuY2xhc3NMaXN0LnJlbW92ZSgnZHJhZy1ob3ZlcicpO1xuICB9XG5cbiAgaGFuZGxlckNvbHVtbkRyb3AoZSwgY29sdW1uKSB7XG4gICAgLy8g0LrQvtCz0LTQsCDRjdC70LXQvNC10L3RgiDQvtGC0L/Rg9GB0LrQsNGO0YIg0LIg0LTQvtC/0YPRgdGC0LjQvNGD0Y4g0LfQvtC90YNcblxuICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgIGUuY3VycmVudFRhcmdldC5jbGFzc0xpc3QucmVtb3ZlKCdkcmFnLWhvdmVyJyk7XG4gICAgY29uc3QgY29sdW1ucyA9IHRoaXMuZGF0YU9wdGlvblRhYmxlO1xuICAgIGNvbnN0ICRkcmFnQ29sdW1uID0gdGhpcy5kcmFnQ3VyZW50Q29sdW1uO1xuXG4gICAgY29uc3QgZHJvcEluZGV4ID0gW10uZmluZEluZGV4LmNhbGwoY29sdW1ucywgKGNvbCkgPT4gY29sLmlkID09PSBjb2x1bW4uaWQpO1xuICAgIGNvbnN0IGRyYWdJbmRleCA9IFtdLmZpbmRJbmRleC5jYWxsKGNvbHVtbnMsIChjb2wpID0+IGNvbC5pZCA9PT0gJGRyYWdDb2x1bW4uaWQpO1xuXG4gICAgY29uc3QgY3V0ID0gY29sdW1ucy5zcGxpY2UoZHJhZ0luZGV4LCAxKVswXTtcbiAgICBjb2x1bW5zLnNwbGljZShkcm9wSW5kZXgsIDAsIGN1dCk7XG5cbiAgICB0aGlzLnNldE9wdGlvbkRhdGFUYWJsZShjb2x1bW5zKTtcblxuICAgIHRoaXMuZHJvcENvbHVtbiA9IHRydWU7XG4gIH1cblxuICBkZXN0cm95KCkge1xuICAgIGNvbnNvbGUubG9nKCdkZXN0cm95KCksIG5vIGZ1bmN0aW9uYWxpdHkhJyk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgSGVhZGVyVGFibGU7XG4iLCJjbGFzcyBSZXN1bHRUYWJsZSB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgY29uc3QgZGVmYXVsdHNPcHRpb25zID0ge1xuICAgICAgY2xhc3NQYXJlbnQ6ICdyZXN1bHQtdGFibGUnLFxuICAgICAgLy9cbiAgICAgIGNsYXNzR2VuZXJhbExpc3Q6ICdyZXN1bHQtdGFibGVfX2dlbmVyYWwtbGlzdCcsXG4gICAgICBjbGFzc0dlbmVyYWxJdGVtOiAncmVzdWx0LXRhYmxlX19nZW5lcmFsLWl0ZW0nLFxuICAgICAgY2xhc3NHZW5lcmFsTGFibGU6ICdyZXN1bHQtdGFibGVfX2dlbmVyYWwtbGFibGUnLFxuICAgICAgY2xhc3NHZW5lcmFsVG90YWw6ICdyZXN1bHQtdGFibGVfX2dlbmVyYWwtdG90YWwnLFxuICAgICAgLy9cbiAgICAgIGNsYXNzUmVzdWx0aW5nbExpc3Q6ICdyZXN1bHQtdGFibGVfX3Jlc3VsdGluZy1saXN0JyxcbiAgICAgIGNsYXNzUmVzdWx0aW5nbEl0ZW06ICdyZXN1bHQtdGFibGVfX3Jlc3VsdGluZy1pdGVtJyxcbiAgICAgIGNsYXNzUmVzdWx0aW5nbExhYmxlOiAncmVzdWx0LXRhYmxlX19yZXN1bHRpbmctbGFibGUnLFxuICAgICAgY2xhc3NSZXN1bHRpbmdsVG90YWw6ICdyZXN1bHQtdGFibGVfX3Jlc3VsdGluZy10b3RhbCcsXG4gICAgfTtcbiAgICBjb25zdCB7XG4gICAgICBwYXJlbnRCbG9jaywgZ2V0RGF0YVByb2R1Y3RzLCBnZXRPcHRpb25zUmVzdWx0VGFibGUsXG4gICAgfSA9IHByb3BzO1xuICAgIE9iamVjdC5hc3NpZ24odGhpcywge1xuICAgICAgcGFyZW50QmxvY2ssIGdldERhdGFQcm9kdWN0cywgZ2V0T3B0aW9uc1Jlc3VsdFRhYmxlLFxuICAgIH0pO1xuXG4gICAgdGhpcy5vcHRpb25zID0gT2JqZWN0LmFzc2lnbihkZWZhdWx0c09wdGlvbnMpO1xuXG4gICAgdGhpcy5saXN0cyA9IHt9O1xuICAgIHRoaXMubGlzdHMuZ2VuZXJhbCA9IHt9O1xuICAgIHRoaXMubGlzdHMuZ2VuZXJhbC5saXN0Q2xhc3MgPSB0aGlzLm9wdGlvbnMuY2xhc3NHZW5lcmFsTGlzdDtcbiAgICB0aGlzLmxpc3RzLmdlbmVyYWwuaXRlbUNsYXNzID0gdGhpcy5vcHRpb25zLmNsYXNzR2VuZXJhbEl0ZW07XG4gICAgdGhpcy5saXN0cy5nZW5lcmFsLmxhYmxlQ2xhc3MgPSB0aGlzLm9wdGlvbnMuY2xhc3NHZW5lcmFsTGFibGU7XG4gICAgdGhpcy5saXN0cy5nZW5lcmFsLnRvdGFsQ2xhc3MgPSB0aGlzLm9wdGlvbnMuY2xhc3NHZW5lcmFsVG90YWw7XG5cbiAgICB0aGlzLmxpc3RzLnJlc3VsdGluZyA9IHt9O1xuICAgIHRoaXMubGlzdHMucmVzdWx0aW5nLmxpc3RDbGFzcyA9IHRoaXMub3B0aW9ucy5jbGFzc1Jlc3VsdGluZ2xMaXN0O1xuICAgIHRoaXMubGlzdHMucmVzdWx0aW5nLml0ZW1DbGFzcyA9IHRoaXMub3B0aW9ucy5jbGFzc1Jlc3VsdGluZ2xJdGVtO1xuICAgIHRoaXMubGlzdHMucmVzdWx0aW5nLmxhYmxlQ2xhc3MgPSB0aGlzLm9wdGlvbnMuY2xhc3NSZXN1bHRpbmdsTGFibGU7XG4gICAgdGhpcy5saXN0cy5yZXN1bHRpbmcudG90YWxDbGFzcyA9IHRoaXMub3B0aW9ucy5jbGFzc1Jlc3VsdGluZ2xUb3RhbDtcblxuICAgIHRoaXMucmVzdWx0VGFibGVMaXN0ID0gdGhpcy5nZXRPcHRpb25zUmVzdWx0VGFibGUoKTtcblxuICAgIHRoaXMubm9kZSA9IHt9O1xuXG4gICAgLy8gYmluZCB0aGlzXG4gICAgdGhpcy5jcmVhdGVMaXN0ID0gdGhpcy5jcmVhdGVMaXN0LmJpbmQodGhpcyk7XG4gIH0gLy8gY29uc3RydWN0b3JcblxuICByZW5kZXIoKSB7XG4gICAgLy8gY29uc29sZS5sb2codGhpcy5yZXN1bHRUYWJsZUxpc3QpO1xuXG4gICAgaWYgKCF0aGlzLmNoZWNrRGF0YSgpKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBEQVRBLCBib2R5IHRhYmxlIGRhdGEgbm90IGZvdW5kJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmNoZWNrUGFyZW50KCkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIERPTUVsZW1lbnQsIHBhcmVudCBibG9jayBmb3IgYm9keSB0YWJsZSBub3QgZm91bmQnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLtGBbGVhclBhcmVudEJsb2NrKCk7XG5cbiAgICB0aGlzLmNvbXBsZXRlVG90YWxzKCk7XG5cbiAgICB0aGlzLmNyZWF0ZSgpO1xuICB9XG5cbiAgY2hlY2tQYXJlbnQoKSB7XG4gICAgaWYgKHRoaXMucGFyZW50QmxvY2sgJiYgdGhpcy5wYXJlbnRCbG9jayBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY2hlY2tEYXRhKCkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMuZ2V0RGF0YVByb2R1Y3RzKCkpICYmIHRoaXMuZ2V0RGF0YVByb2R1Y3RzKCkubGVuZ3RoICE9PSAwKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAg0YFsZWFyUGFyZW50QmxvY2soKSB7XG4gICAgaWYgKHRoaXMucGFyZW50QmxvY2suaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgICB0aGlzLnBhcmVudEJsb2NrLmlubmVySFRNTCA9ICcnO1xuICAgIH1cbiAgfVxuXG4gIGNyZWF0ZSgpIHtcbiAgICBjb25zdCAkcGFyZW50ID0gdGhpcy5wYXJlbnRCbG9jaztcblxuICAgICRwYXJlbnQuY2xhc3NMaXN0LmFkZCh0aGlzLm9wdGlvbnMuY2xhc3NQYXJlbnQpO1xuXG4gICAgJHBhcmVudC5hcHBlbmRDaGlsZCh0aGlzLmNyZWF0ZUxpc3QoJ2dlbmVyYWwnKSk7XG4gICAgJHBhcmVudC5hcHBlbmRDaGlsZCh0aGlzLmNyZWF0ZUxpc3QoJ3Jlc3VsdGluZycpKTtcblxuICAgIHRoaXMuY3JlYXRlTGlzdCgpO1xuICB9XG5cbiAgY3JlYXRlTGlzdChwcm9wZXJ0eUxpc3QgPSAnZ2VuZXJhbCcpIHtcbiAgICBpZiAoIXRoaXMubGlzdHMuaGFzT3duUHJvcGVydHkocHJvcGVydHlMaXN0KSkge1xuICAgICAgY29uc29sZS5sb2coYEVycm9yIFByb3BlcnR5LCBwcm9wZXJ0aWVzIG5vdCBmb3VuZCAke3Byb3BlcnR5TGlzdH0hYCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3Qge1xuICAgICAgbGlzdENsYXNzLCBpdGVtQ2xhc3MsIGxhYmxlQ2xhc3MsIHRvdGFsQ2xhc3MsXG4gICAgfSA9IHRoaXMubGlzdHNbcHJvcGVydHlMaXN0XTtcblxuICAgIGNvbnN0IHsgcmVzdWx0VGFibGVMaXN0IH0gPSB0aGlzO1xuXG4gICAgY29uc3QgJGxpc3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd1bCcpO1xuICAgICRsaXN0LmNsYXNzTmFtZSA9IGxpc3RDbGFzcztcblxuICAgIFtdLmZvckVhY2guY2FsbChyZXN1bHRUYWJsZUxpc3QsIChpdGVtKSA9PiB7XG4gICAgICBpZiAoaXRlbS5saXN0ID09PSBwcm9wZXJ0eUxpc3QpIHtcbiAgICAgICAgY29uc3QgeyBsYWJlbCwgdW5pdCwgcmVzdWx0IH0gPSBpdGVtO1xuXG4gICAgICAgIGNvbnN0ICRpdGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcbiAgICAgICAgJGl0ZW0uY2xhc3NOYW1lID0gaXRlbUNsYXNzO1xuXG4gICAgICAgIGNvbnN0ICRsYWJsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICAgICAgJGxhYmxlLmNsYXNzTmFtZSA9IGxhYmxlQ2xhc3M7XG4gICAgICAgICRsYWJsZS5pbm5lclRleHQgPSBgJHtsYWJlbH06YDtcbiAgICAgICAgJGl0ZW0uYXBwZW5kQ2hpbGQoJGxhYmxlKTtcblxuICAgICAgICBjb25zdCAkdG90YWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICAgICR0b3RhbC5jbGFzc05hbWUgPSB0b3RhbENsYXNzO1xuICAgICAgICAkdG90YWwuaW5uZXJUZXh0ID0gYCR7cmVzdWx0ID09PSBudWxsID8gJ04vQScgOiByZXN1bHR9ICR7dW5pdH1gO1xuICAgICAgICAkaXRlbS5hcHBlbmRDaGlsZCgkdG90YWwpO1xuXG4gICAgICAgICRsaXN0LmFwcGVuZENoaWxkKCRpdGVtKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiAkbGlzdDtcbiAgfVxuXG4gIGNvbXBsZXRlVG90YWxzKCkge1xuICAgIGNvbnN0IHsgcmVzdWx0VGFibGVMaXN0IH0gPSB0aGlzO1xuICAgIGNvbnN0IGRhdGEgPSB0aGlzLmdldERhdGFQcm9kdWN0cygpO1xuXG4gICAgZnVuY3Rpb24gY291bnRSZXN1bHQoY291bnRLZXkpIHtcbiAgICAgIHJldHVybiBbXS5yZWR1Y2UuY2FsbChkYXRhLCAoc3VtLCBpdGVtKSA9PiB7XG4gICAgICAgIGlmICh7fS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGl0ZW0sIGNvdW50S2V5KSAmJiBOdW1iZXIuaXNGaW5pdGUoTnVtYmVyKGl0ZW1bY291bnRLZXldKSkpIHtcbiAgICAgICAgICBpZiAoIWl0ZW0uaXNEZWxldGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gc3VtICsgTnVtYmVyKGl0ZW1bY291bnRLZXldKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN1bTtcbiAgICAgIH0sIDApO1xuICAgIH1cblxuICAgIFtdLmZvckVhY2guY2FsbChyZXN1bHRUYWJsZUxpc3QsIChpdGVtKSA9PiB7XG4gICAgICBpdGVtLnJlc3VsdCA9IGNvdW50UmVzdWx0KGl0ZW0uY291bnRLZXkpO1xuICAgIH0pO1xuICB9XG5cbiAgZGVzdHJveSgpIHtcbiAgICBjb25zb2xlLmxvZygnZGVzdHJveSgpLCBubyBmdW5jdGlvbmFsaXR5IScpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFJlc3VsdFRhYmxlO1xuIiwiaW1wb3J0IGF1dG9jb21wbGV0ZSBmcm9tICcuLi9oZWxwZXJzL2F1dG9jb21wbGV0ZSc7XG5cbmNsYXNzIFJvd3NUYWJsZSB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgY29uc3QgZGVmYXVsdHNPcHRpb25zID0ge1xuICAgICAgbWF4Um93czogMTAwLFxuICAgICAgY2xhc3NQYXJlbnQ6ICd0YWJsZS1ib2R5JyxcbiAgICAgIGNsYXNzUm93OiAndGFibGUtYm9keV9fcm93JyxcbiAgICAgIGNsYXNzVGVtcFJvdzogJ3RhYmxlLWJvZHlfX3RlbXAtcm93JyxcbiAgICAgIGNsYXNzVGVtcFJvd0l0ZW06ICd0YWJsZS1ib2R5X190ZW1wLWl0ZW0nLFxuICAgICAgLy9cbiAgICAgIGNsYXNzQ29sdW1uOiAndGFibGUtYm9keV9fY29sdW1uJyxcbiAgICAgIGNsYXNzTGFiZWxDb2x1bW46ICd0YWJsZS1ib2R5X19sYWJsZScsXG4gICAgICBjbGFzc0NvbnRlbnRCbG9jazogJ3RhYmxlLWJvZHlfX2NvbnRlbnQnLFxuICAgICAgY2xhc3NJbnB1dEJsb2NrOiAndGFibGUtYm9keV9faW5wdXQtdmFsdWUnLFxuICAgICAgY2xhc3NTdGF0aWNCbG9jazogJ3RhYmxlLWJvZHlfX3N0YXRpY2stdmFsdWUnLFxuICAgICAgY2xhc3NTeXN0ZW1CbG9ja9ChYXB0dXJlOiAndGFibGUtYm9keV9fY2FwdHVyZScsXG4gICAgICAvL1xuICAgICAgY2xhc3NTeXN0ZW1CbG9ja0FjdGlvbkJ1dHRvbjogJ3RhYmxlLWJvZHlfX2FjdGlvbnMtYnV0dG9uJyxcbiAgICAgIGNsYXNzU3lzdGVtQmxvY2tBY3Rpb25MaXN0OiAndGFibGUtYm9keV9fYWN0aW9ucy1saXN0JyxcbiAgICAgIGNsYXNzU3lzdGVtQmxvY2tBY3Rpb25JdGVtOiAndGFibGUtYm9keV9fYWN0aW9ucy1pdGVtJyxcbiAgICAgIC8vXG4gICAgICBjbGFzc0RyYWdIb3ZlcjogJ2RyYWctaG92ZXInLFxuICAgICAgY2xhc3NEcmFnT3ZlcmxheTogJ292ZXJsYXktb24nLFxuICAgICAgY2xhc3NEcmFnQmVmb3JlOiAnaW5zZXJ0LWJlZm9yZScsXG4gICAgICBjbGFzc0RyYWdBZnRlcjogJ2luc2VydC1hZnRlcicsXG4gICAgICBjbGFzc0RyYWdEcmFnZ3JhYmxlOiAnZHJhZ2dyYWJsZScsXG4gICAgfTtcbiAgICBjb25zdCB7XG4gICAgICBwYXJlbnRCbG9jayxcbiAgICAgIGdldERhdGFQcm9kdWN0cyxcbiAgICAgIGdldE9wdGlvbkRhdGFUYWJsZSxcbiAgICAgIGdldE1lZGlhUXVlcnksXG4gICAgICBzZXREYXRhUHJvZHVjdHMsXG4gICAgICBzZXRTZXJ2ZXJEYXRhUHJvZHVjdHMsXG4gICAgICBzZXRJc05ld0RhdGEsXG4gICAgICByZW5kZXJSZXN1bHQsXG4gICAgfSA9IHByb3BzO1xuICAgIE9iamVjdC5hc3NpZ24odGhpcywge1xuICAgICAgcGFyZW50QmxvY2ssXG4gICAgICBnZXREYXRhUHJvZHVjdHMsXG4gICAgICBnZXRPcHRpb25EYXRhVGFibGUsXG4gICAgICBnZXRNZWRpYVF1ZXJ5LFxuICAgICAgc2V0RGF0YVByb2R1Y3RzLFxuICAgICAgc2V0U2VydmVyRGF0YVByb2R1Y3RzLFxuICAgICAgc2V0SXNOZXdEYXRhLFxuICAgICAgcmVuZGVyUmVzdWx0LFxuICAgIH0pO1xuXG4gICAgdGhpcy5vcHRpb25zID0gT2JqZWN0LmFzc2lnbihkZWZhdWx0c09wdGlvbnMpO1xuXG4gICAgdGhpcy5uZXdSb3cgPSB7fTtcbiAgICB0aGlzLm5ld1Jvdy5pc05ld1JvdyA9IGZhbHNlO1xuICAgIHRoaXMubmV3Um93LmlkTmV3Um93ID0gbnVsbDtcbiAgICB0aGlzLm5ld1Jvdy5vYmplY3ROZXdSb3cgPSB7fTtcblxuICAgIHRoaXMubm9kZSA9IHt9O1xuXG4gICAgdGhpcy5kcmFnUm93ID0gZmFsc2U7XG4gICAgdGhpcy5kcmFnQ3VyZW50SW5kZXggPSB1bmRlZmluZWQ7XG5cbiAgICB0aGlzLmRhdGEgPSB7fTtcbiAgICB0aGlzLmRhdGEucm93cyA9IHt9O1xuICAgIHRoaXMuZGF0YS5jb2x1bW5zID0ge307XG5cbiAgICAvLyBiaW5kIHRoaXNcbiAgICB0aGlzLmhhbmRsZXJSb3dNb3VzZUVudGVyID0gdGhpcy5oYW5kbGVyUm93TW91c2VFbnRlci5iaW5kKHRoaXMpO1xuICAgIHRoaXMuaGFuZGxlclJvd0RyYWdFbmQgPSB0aGlzLmhhbmRsZXJSb3dEcmFnRW5kLmJpbmQodGhpcyk7XG4gICAgdGhpcy5oYW5kbGVyQWN0aW9uUmVtb3ZlUm93ID0gdGhpcy5oYW5kbGVyQWN0aW9uUmVtb3ZlUm93LmJpbmQodGhpcyk7XG5cbiAgICB0aGlzLmFkZE5ld1Jvd3MgPSB0aGlzLmFkZE5ld1Jvd3MuYmluZCh0aGlzKTtcbiAgICB0aGlzLnNhdmVDaGFuZ2VSb3dzID0gdGhpcy5zYXZlQ2hhbmdlUm93cy5iaW5kKHRoaXMpO1xuICAgIHRoaXMucmVtb3ZlUm93ID0gdGhpcy5yZW1vdmVSb3cuYmluZCh0aGlzKTtcbiAgICB0aGlzLmNyZWF0ZUlucHV0QmxvY2sgPSB0aGlzLmNyZWF0ZUlucHV0QmxvY2suYmluZCh0aGlzKTtcbiAgfSAvLyBjb25zdHJ1Y3RvclxuXG4gIHJlbmRlcigpIHtcbiAgICAvLyBjb25zb2xlLmxvZyh0aGlzLmdldE1lZGlhUXVlcnkoKSk7XG5cbiAgICB0aGlzLmluaXQoKTtcblxuICAgIGlmICghdGhpcy5jaGVja0RhdGFSb3dzKCkpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdFcnJvciBEQVRBLCBib2R5IHRhYmxlIGRhdGEgbm90IGZvdW5kJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmNoZWNrRGF0YUNvbHVtbnMoKSkge1xuICAgICAgY29uc29sZS5sb2coJ0Vycm9yIERBVEEsIGJvZHkgdGFibGUgZGF0YSBub3QgZm91bmQnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuY2hlY2tQYXJlbnQoKSkge1xuICAgICAgY29uc29sZS5sb2coJ0Vycm9yIERPTUVsZW1lbnQsIHBhcmVudCBibG9jayBmb3IgYm9keSB0YWJsZSBub3QgZm91bmQnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnVwZGF0ZSgpO1xuICB9XG5cbiAgdXBkYXRlKCkge1xuICAgIHRoaXMu0YFsZWFyUGFyZW50QmxvY2soKTtcbiAgICB0aGlzLmNyZWF0ZSgpO1xuICAgIHRoaXMucmVuZGVyUmVzdWx0KCk7XG4gIH1cblxuICBpbml0KCkge1xuICAgIHRoaXMuZGF0YS5yb3dzID0gdGhpcy5nZXREYXRhUHJvZHVjdHMoKTtcbiAgICB0aGlzLmRhdGEuY29sdW1ucyA9IHRoaXMuZ2V0T3B0aW9uRGF0YVRhYmxlKCk7XG4gIH1cblxuICAvLyBjaGVja1BhcmVudFxuXG4gIGNoZWNrUGFyZW50KCkge1xuICAgIC8vIGNvbnNvbGUubG9nKHRoaXMucGFyZW50QmxvY2spO1xuICAgIGlmICh0aGlzLnBhcmVudEJsb2NrICYmIHRoaXMucGFyZW50QmxvY2sgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIGNoZWNrRGF0YVJvd3NcblxuICBjaGVja0RhdGFSb3dzKCkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMuZ2V0RGF0YVByb2R1Y3RzKCkpICYmIHRoaXMuZ2V0RGF0YVByb2R1Y3RzKCkubGVuZ3RoICE9PSAwKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gY2hlY2tEYXRhQ29sdW1uc1xuXG4gIGNoZWNrRGF0YUNvbHVtbnMoKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5nZXRPcHRpb25EYXRhVGFibGUoKSkgJiYgdGhpcy5nZXRPcHRpb25EYXRhVGFibGUoKS5sZW5ndGggIT09IDApIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBjaGVja1ZhbHVlUm93c1xuXG4gIGNoZWNrVmFsdWVSb3dzKCkge1xuICAgIC8vIGNvbnNvbGUubG9nKCdjaGVjayB2YWx1ZSEnKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gINGBbGVhclBhcmVudEJsb2NrKCkge1xuICAgIGlmICh0aGlzLnBhcmVudEJsb2NrLmhhc0NoaWxkTm9kZXMoKSkge1xuICAgICAgdGhpcy5wYXJlbnRCbG9jay5pbm5lckhUTUwgPSAnJztcbiAgICB9XG4gIH1cblxuICAvLyBjcmVhdGVcblxuICBjcmVhdGUoKSB7XG4gICAgY29uc3QgJHBhcmVudCA9IHRoaXMucGFyZW50QmxvY2s7XG4gICAgY29uc3QgeyByb3dzIH0gPSB0aGlzLmRhdGE7XG4gICAgY29uc3QgeyBjb2x1bW5zIH0gPSB0aGlzLmRhdGE7XG4gICAgY29uc3Qge1xuICAgICAgY2xhc3NSb3csXG4gICAgICBjbGFzc0NvbHVtbixcbiAgICAgIGNsYXNzQ29udGVudEJsb2NrLFxuICAgICAgY2xhc3NMYWJlbENvbHVtbixcbiAgICB9ID0gdGhpcy5vcHRpb25zO1xuXG4gICAgY29uc3QgbGltaXRSb3dzID0gTWF0aC5taW4ocm93cy5sZW5ndGgsIHRoaXMub3B0aW9ucy5tYXhSb3dzKTtcbiAgICBsZXQgY291bnRlciA9IDA7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbWl0Um93czsgaSArPSAxKSB7XG4gICAgICBjb25zdCByb3cgPSByb3dzW2ldO1xuICAgICAgY29uc3QgeyBpZCwgaXNEZWxldGVkIH0gPSByb3c7XG4gICAgICBjb25zdCBjb3VudCA9IGNvdW50ZXI7XG5cbiAgICAgIGlmICghaXNEZWxldGVkKSB7XG4gICAgICAgIGNvbnN0IHRhYmxlUm93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndHInKTtcbiAgICAgICAgdGFibGVSb3cuY2xhc3NOYW1lID0gY2xhc3NSb3c7XG4gICAgICAgIC8vIGRyYWcgI2V2ZW50XG4gICAgICAgIGlmICh0aGlzLmdldE1lZGlhUXVlcnkoKSA9PT0gJ2Rlc2t0b3AnKSB7XG4gICAgICAgICAgdGFibGVSb3cuZHJhZ2dhYmxlID0gZmFsc2U7XG4gICAgICAgICAgdGFibGVSb3cub25kcmFnc3RhcnQgPSAoZXZlbnQpID0+IHsgdGhpcy5oYW5kbGVyUm93RHJhZ1N0YXJ0KGV2ZW50LCBpZCk7IH07XG4gICAgICAgICAgdGFibGVSb3cub25kcmFnZW5kID0gKGV2ZW50KSA9PiB7IHRoaXMuaGFuZGxlclJvd0RyYWdFbmQoZXZlbnQpOyB9O1xuXG4gICAgICAgICAgdGFibGVSb3cub25kcmFnb3ZlciA9IChldmVudCkgPT4geyB0aGlzLmhhbmRsZXJSb3dEcmFnT3ZlcihldmVudCwgaWQpOyB9O1xuICAgICAgICAgIHRhYmxlUm93Lm9uZHJhZ2VudGVyID0gKGV2ZW50KSA9PiB7IHRoaXMuaGFuZGxlclJvd0RyYWdFbnRlcihldmVudCwgaWQpOyB9O1xuICAgICAgICAgIHRhYmxlUm93Lm9uZHJhZ2xlYXZlID0gKGV2ZW50KSA9PiB7IHRoaXMuaGFuZGxlclJvd0RyYWdMZWF2ZShldmVudCk7IH07XG4gICAgICAgICAgdGFibGVSb3cub25kcm9wID0gKGV2ZW50KSA9PiB7IHRoaXMuaGFuZGxlclJvd0Ryb3AoZXZlbnQsIGlkKTsgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuXG4gICAgICAgIGNvbHVtbnNcbiAgICAgICAgICAuZm9yRWFjaCgoY29sdW1uLCBpbmRleCwgYXJyYXkpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAgfSA9IGNvbHVtbjtcbiAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgbGFibGUsXG4gICAgICAgICAgICAgIGlzQXV0b2NvbXBsZXRlLFxuICAgICAgICAgICAgICBpc0Rpc3BsYXksXG4gICAgICAgICAgICAgIGlzRWRpdGFibGUsXG4gICAgICAgICAgICAgIG1lZGlhUXVlcnksXG4gICAgICAgICAgICB9ID0gY29sdW1uLmNvbHVtbk9wdGlvbnM7XG5cbiAgICAgICAgICAgIGNvbnN0IGlzTWVkaWEgPSAoKSA9PiB7XG4gICAgICAgICAgICAgIGlmIChtZWRpYVF1ZXJ5LmluY2x1ZGVzKHRoaXMuZ2V0TWVkaWFRdWVyeSgpKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGlmIChpc0Rpc3BsYXkgJiYgaXNNZWRpYSgpKSB7XG4gICAgICAgICAgICAgIGNvbnN0ICR0YWJsZUhlYWRpbmdDb2x1bW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpO1xuICAgICAgICAgICAgICAkdGFibGVIZWFkaW5nQ29sdW1uLmNsYXNzTmFtZSA9IGNsYXNzQ29sdW1uO1xuICAgICAgICAgICAgICAkdGFibGVIZWFkaW5nQ29sdW1uLnN0eWxlLnBvc2l0aW9uID0gJ3JlbGF0aXZlJztcblxuICAgICAgICAgICAgICBsZXQgaXNMYXN0aXRlcmF0aW9uID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgaWYgKGluZGV4ID09PSBhcnJheS5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgaXNMYXN0aXRlcmF0aW9uID0gdHJ1ZTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGxldCB2YWx1ZSA9ICcnO1xuXG4gICAgICAgICAgICAgIGNvbnN0ICRjb250ZW50QmxvY2sgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgJGNvbnRlbnRCbG9jay5jbGFzc05hbWUgPSBjbGFzc0NvbnRlbnRCbG9jaztcbiAgICAgICAgICAgICAgJGNvbnRlbnRCbG9jay5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xuXG4gICAgICAgICAgICAgICR0YWJsZUhlYWRpbmdDb2x1bW4uYXBwZW5kQ2hpbGQoJGNvbnRlbnRCbG9jayk7XG5cbiAgICAgICAgICAgICAgaWYgKHR5cGUgPT09ICdEQVRBJyAmJiB7fS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHJvdywga2V5KSkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gU3RyaW5nKHJvd1trZXldKTtcblxuICAgICAgICAgICAgICAgIGlmIChpc0VkaXRhYmxlKSB7XG4gICAgICAgICAgICAgICAgICBjb25zdCAkaW5wdXRCbG9jayA9IHRoaXMuY3JlYXRlSW5wdXRCbG9jayh2YWx1ZSwgaWQsIGtleSwgaXNBdXRvY29tcGxldGUpO1xuICAgICAgICAgICAgICAgICAgJGlucHV0QmxvY2suZGF0YXNldC5kYXRhSWQgPSBgJHtrZXl9LSR7aWR9YDtcblxuICAgICAgICAgICAgICAgICAgJGNvbnRlbnRCbG9jay5hcHBlbmRDaGlsZCgkaW5wdXRCbG9jayk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGNvbnN0ICR0ZXh0QmxvY2sgPSB0aGlzLmNyZWF0ZVN0YXRpY0Jsb2NrKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICRjb250ZW50QmxvY2suYXBwZW5kQ2hpbGQoJHRleHRCbG9jayk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKHR5cGUgPT09ICdTWVNURU0nKSB7XG4gICAgICAgICAgICAgICAgaWYgKGtleSA9PT0gJ2luZGV4Jykge1xuICAgICAgICAgICAgICAgICAgY29uc3QgZHJhZ0Jsb2NrID0gdGhpcy5jcmVhdGVTeXN0ZW1CbG9ja9ChYXB0dXJlKCk7XG4gICAgICAgICAgICAgICAgICAkY29udGVudEJsb2NrLmFwcGVuZENoaWxkKGRyYWdCbG9jayk7XG5cbiAgICAgICAgICAgICAgICAgIGNvbnN0ICR0ZXh0QmxvY2sgPSB0aGlzLmNyZWF0ZVN0YXRpY0Jsb2NrKGAke2NvdW50ICsgMX1gKTtcbiAgICAgICAgICAgICAgICAgICRjb250ZW50QmxvY2suYXBwZW5kQ2hpbGQoJHRleHRCbG9jayk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGtleSA9PT0gJ2FjdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnN0ICRhY3Rpb24gPSB0aGlzLmNyZWF0ZVN5c3RlbUJsb2NrQWN0aW9uKGlkKTtcbiAgICAgICAgICAgICAgICAgICRjb250ZW50QmxvY2suc3R5bGUub3ZlcmZsb3cgPSAndmlzaWJsZSc7XG4gICAgICAgICAgICAgICAgICAkY29udGVudEJsb2NrLmFwcGVuZENoaWxkKCRhY3Rpb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmICh0aGlzLmdldE1lZGlhUXVlcnkoKSAhPT0gJ2Rlc2t0b3AnKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgJGxhYmVsQ29sdW1uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgJGxhYmVsQ29sdW1uLmNsYXNzTmFtZSA9IGNsYXNzTGFiZWxDb2x1bW47XG4gICAgICAgICAgICAgICAgJGxhYmVsQ29sdW1uLmlubmVySFRNTCA9IGxhYmxlO1xuICAgICAgICAgICAgICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKCRsYWJlbENvbHVtbik7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBmcmFnbWVudC5hcHBlbmRDaGlsZCgkdGFibGVIZWFkaW5nQ29sdW1uKTtcblxuICAgICAgICAgICAgICBpZiAoaXNMYXN0aXRlcmF0aW9uICYmIHRoaXMuZ2V0TWVkaWFRdWVyeSgpID09PSAnZGVza3RvcCcpIHtcbiAgICAgICAgICAgICAgICBjb25zdCAkbGFzdENvbHVtbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XG4gICAgICAgICAgICAgICAgJGxhc3RDb2x1bW4uc3R5bGUud2lkdGggPSAnYXV0byc7XG4gICAgICAgICAgICAgICAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoJGxhc3RDb2x1bW4pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIGNvdW50ZXIgKz0gMTtcbiAgICAgICAgdGFibGVSb3cuYXBwZW5kQ2hpbGQoZnJhZ21lbnQpO1xuICAgICAgICAkcGFyZW50LmFwcGVuZENoaWxkKHRhYmxlUm93KTtcbiAgICAgIH0gLy8gaWYgKCFpc0RlbGV0ZWQpXG4gICAgfVxuICB9XG5cbiAgLy8gY3JlYXRlSW5wdXRCbG9ja1xuXG4gIGNyZWF0ZUlucHV0QmxvY2sodmFsdWUsIGRhdGFJRCwga2V5LCBpc0F1dG9jb21wbGV0ZSkge1xuICAgIGNvbnN0IHsgY2xhc3NJbnB1dEJsb2NrIH0gPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3QgeyByb3dzIH0gPSB0aGlzLmRhdGE7XG5cbiAgICBjb25zdCAkaW5wdXRCbG9jayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG5cbiAgICAvLyAjZXZlbiBoYW5kbGVyIGNoYW5nZVxuXG4gICAgY29uc3QgaGFuZGxlckNoYW5nZSA9IChldmVudCkgPT4ge1xuICAgICAgY29uc3QgaW5kZXhDaGFuZ2VhYmxlUm93ID0gW10uZmluZEluZGV4LmNhbGwocm93cywgKHJvdykgPT4gcm93LmlkID09PSBkYXRhSUQpO1xuICAgICAgcm93c1tpbmRleENoYW5nZWFibGVSb3ddW2tleV0gPSBldmVudC50YXJnZXQudmFsdWU7XG5cbiAgICAgIHRoaXMuc2V0RGF0YVByb2R1Y3RzKHRoaXMuZGF0YS5yb3dzKTtcblxuICAgICAgdGhpcy5zZXRJc05ld0RhdGEodHJ1ZSk7XG5cbiAgICAgIHRoaXMucmVuZGVyUmVzdWx0KCk7XG4gICAgfTtcblxuICAgICRpbnB1dEJsb2NrLnR5cGUgPSAnY2MtdGV4dCc7XG4gICAgJGlucHV0QmxvY2sudmFsdWUgPSB2YWx1ZTtcbiAgICAkaW5wdXRCbG9jay5jbGFzc05hbWUgPSBjbGFzc0lucHV0QmxvY2s7XG4gICAgJGlucHV0QmxvY2sub25jaGFuZ2UgPSBoYW5kbGVyQ2hhbmdlO1xuXG4gICAgaWYgKGlzQXV0b2NvbXBsZXRlKSB7XG4gICAgICBjb25zdCBhcnJheUF1dG9jb21wbGV0ZSA9IFtdLm1hcC5jYWxsKHJvd3MsIChyb3cpID0+IHJvd1trZXldKTtcblxuICAgICAgYXV0b2NvbXBsZXRlKCRpbnB1dEJsb2NrLCBhcnJheUF1dG9jb21wbGV0ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuICRpbnB1dEJsb2NrO1xuICB9XG5cbiAgLy8gY3JlYXRlU3RhdGljQmxvY2tcblxuICBjcmVhdGVTdGF0aWNCbG9jayh2YWx1ZSkge1xuICAgIGNvbnN0IHsgY2xhc3NTdGF0aWNCbG9jayB9ID0gdGhpcy5vcHRpb25zO1xuXG4gICAgY29uc3QgJHN0YXRpY0Jsb2NrID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgJHN0YXRpY0Jsb2NrLmNsYXNzTmFtZSA9IGNsYXNzU3RhdGljQmxvY2s7XG4gICAgJHN0YXRpY0Jsb2NrLmlubmVyVGV4dCA9IHZhbHVlO1xuXG4gICAgcmV0dXJuICRzdGF0aWNCbG9jaztcbiAgfVxuXG4gIC8vIGNyZWF0ZVN5c3RlbUJsb2Nr0KFhcHR1cmVcblxuICBjcmVhdGVTeXN0ZW1CbG9ja9ChYXB0dXJlKCkge1xuICAgIGNvbnN0IHsgY2xhc3NTeXN0ZW1CbG9ja9ChYXB0dXJlIH0gPSB0aGlzLm9wdGlvbnM7XG5cbiAgICBjb25zdCAkZHJhZ0Jsb2NrID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgJGRyYWdCbG9jay5jbGFzc05hbWUgPSBjbGFzc1N5c3RlbUJsb2Nr0KFhcHR1cmU7XG4gICAgLy8gI2V2ZW50XG4gICAgJGRyYWdCbG9jay5vbm1vdXNlZW50ZXIgPSB0aGlzLmhhbmRsZXJSb3dNb3VzZUVudGVyO1xuXG4gICAgcmV0dXJuICRkcmFnQmxvY2s7XG4gIH1cblxuICAvLyBjcmVhdGVTeXN0ZW1CbG9ja0FjdGlvblxuXG4gIGNyZWF0ZVN5c3RlbUJsb2NrQWN0aW9uKGRhdGFJRCA9IG51bGwpIHtcbiAgICBjb25zdCB7XG4gICAgICBjbGFzc1N5c3RlbUJsb2NrQWN0aW9uTGlzdCxcbiAgICAgIGNsYXNzU3lzdGVtQmxvY2tBY3Rpb25JdGVtLFxuICAgICAgY2xhc3NTeXN0ZW1CbG9ja0FjdGlvbkJ1dHRvbixcbiAgICB9ID0gdGhpcy5vcHRpb25zO1xuXG4gICAgZnVuY3Rpb24gaGlkZGVuQWN0aW9uTWVudSgpIHtcbiAgICAgIGRvY3VtZW50XG4gICAgICAgIC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1hY3Rpb24tbWVudV0nKVxuICAgICAgICAuZm9yRWFjaCgoaXRlbU1lbnUpID0+IHtcbiAgICAgICAgICBpdGVtTWVudS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoZW5kbGVyT3V0c2lkZUNsaWNrKCkge1xuICAgICAgY29uc29sZS5sb2coJ2NsaWNrJyk7XG5cbiAgICAgIGhpZGRlbkFjdGlvbk1lbnUoKTtcblxuICAgICAgZG9jdW1lbnRcbiAgICAgICAgLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGVuZGxlck91dHNpZGVDbGljayk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFuZGxlckFjdGlvbkNsaWNrKGUpIHtcbiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgIGhpZGRlbkFjdGlvbk1lbnUoKTtcblxuICAgICAgY29uc3QgJG1lbnUgPSBlLnRhcmdldC5maXJzdEVsZW1lbnRDaGlsZCB8fCBlLnRhcmdldC5maXJzdENoaWxkO1xuXG4gICAgICBpZiAoJG1lbnUgJiYgJG1lbnUudGFnTmFtZSA9PT0gJ1VMJykge1xuICAgICAgICBpZiAoJG1lbnUuc3R5bGUuZGlzcGxheSA9PT0gJ25vbmUnKSB7XG4gICAgICAgICAgJG1lbnUuc3R5bGUuZGlzcGxheSA9ICcnO1xuICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGVuZGxlck91dHNpZGVDbGljayk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgJG1lbnUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGhlbmRsZXJPdXRzaWRlQ2xpY2spO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgJGFjdGlvblRvZ2dsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICRhY3Rpb25Ub2dnbGUuY2xhc3NOYW1lID0gY2xhc3NTeXN0ZW1CbG9ja0FjdGlvbkJ1dHRvbjtcbiAgICAkYWN0aW9uVG9nZ2xlLnN0eWxlLnBvc2l0aW9uID0gJ3JlbGF0aXZlJztcbiAgICAvLyBtb3VzZSAjZXZlbnRcbiAgICAkYWN0aW9uVG9nZ2xlLm9uY2xpY2sgPSBoYW5kbGVyQWN0aW9uQ2xpY2s7XG5cbiAgICBjb25zdCAkYWN0aW9uTGlzdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3VsJyk7XG4gICAgJGFjdGlvbkxpc3QuY2xhc3NOYW1lID0gY2xhc3NTeXN0ZW1CbG9ja0FjdGlvbkxpc3Q7XG4gICAgJGFjdGlvbkxpc3QuZGF0YXNldC5hY3Rpb25NZW51ID0gJ3Jvdyc7XG4gICAgJGFjdGlvbkxpc3Quc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgICRhY3Rpb25MaXN0LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgJGFjdGlvblRvZ2dsZS5hcHBlbmRDaGlsZCgkYWN0aW9uTGlzdCk7XG5cbiAgICBjb25zdCBhY3Rpb25zID0gW1xuICAgICAgeyBuYW1lOiAn0KPQtNCw0LvQuNGC0YwnLCBhY3Rpb246IHRoaXMuaGFuZGxlckFjdGlvblJlbW92ZVJvdyB9LFxuICAgIF07XG5cbiAgICBbXS5mb3JFYWNoLmNhbGwoYWN0aW9ucywgKGFjdGlvbikgPT4ge1xuICAgICAgY29uc3QgJGFjdGlvbkl0ZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpO1xuICAgICAgJGFjdGlvbkl0ZW0uY2xhc3NOYW1lID0gY2xhc3NTeXN0ZW1CbG9ja0FjdGlvbkl0ZW07XG4gICAgICAkYWN0aW9uSXRlbS5pbm5lclRleHQgPSBhY3Rpb24ubmFtZTtcbiAgICAgICRhY3Rpb25JdGVtLmRhdGFzZXQuZGF0YUlkID0gZGF0YUlEO1xuICAgICAgJGFjdGlvbkl0ZW0ub25jbGljayA9IGFjdGlvbi5hY3Rpb247XG5cbiAgICAgICRhY3Rpb25MaXN0LmFwcGVuZENoaWxkKCRhY3Rpb25JdGVtKTtcbiAgICB9KTtcblxuICAgIHJldHVybiAkYWN0aW9uVG9nZ2xlO1xuICB9XG5cbiAgLy8gY3JlYXRlVGVtcFJvd1xuXG4gIGNyZWF0ZVRlbXBSb3coKSB7XG4gICAgY29uc3QgeyBjbGFzc1RlbXBSb3csIGNsYXNzVGVtcFJvd0l0ZW0gfSA9IHRoaXMub3B0aW9ucztcblxuICAgIGNvbnN0ICRyb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0cicpO1xuICAgICRyb3cuc3R5bGUucG9zaXRpb24gPSAncmVsYXRpdmUnO1xuICAgICRyb3cuY2xhc3NOYW1lID0gY2xhc3NUZW1wUm93O1xuICAgICRyb3cuZGF0YXNldC50ZW1wUm93ID0gJyc7XG5cbiAgICBjb25zdCAkaW5uZXJCbG9jayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICRpbm5lckJsb2NrLmNsYXNzTmFtZSA9IGNsYXNzVGVtcFJvd0l0ZW07XG5cbiAgICAkcm93LmFwcGVuZENoaWxkKCRpbm5lckJsb2NrKTtcblxuICAgIHJldHVybiAkcm93O1xuICB9XG5cbiAgLy8gcmVtb3ZlVGVtcFJvd1xuXG4gIHJlbW92ZVRlbXBSb3coKSB7XG4gICAgZG9jdW1lbnRcbiAgICAgIC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS10ZW1wLXJvd10nKVxuICAgICAgLmZvckVhY2goKHJvdykgPT4ge1xuICAgICAgICByb3cucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChyb3cpO1xuICAgICAgfSk7XG4gIH1cblxuICAvLyByZW1vdmVSb3dcblxuICByZW1vdmVSb3coZGF0YUlEID0gbnVsbCkge1xuICAgIGlmIChkYXRhSUQgPT09IG51bGwgJiYgdHlwZW9mIGRhdGFJRCAhPT0gJ251bWJlcicpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdEYXRhIGVycm9yISBub3QgY29ycmVjdCBmb3JtIElEJyk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgY29uc3QgeyByb3dzIH0gPSB0aGlzLmRhdGE7XG5cbiAgICBjb25zdCBpbmRleFJvd0RlbGV0ZWQgPSBbXS5maW5kSW5kZXguY2FsbChyb3dzLCAocm93KSA9PiByb3cuaWQgPT09IGRhdGFJRCk7XG5cbiAgICByb3dzW2luZGV4Um93RGVsZXRlZF0uaXNEZWxldGVkID0gdHJ1ZTtcblxuICAgIHRoaXMuc2V0RGF0YVByb2R1Y3RzKHRoaXMuZGF0YS5yb3dzKTtcblxuICAgIHRoaXMucmVuZGVyKCk7XG5cbiAgICB0aGlzLnNldElzTmV3RGF0YSh0cnVlKTtcblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLy8gYWRkTmV3Um93c1xuXG4gIGFkZE5ld1Jvd3MoKSB7XG4gICAgLy8gaWYgKHRoaXMubmV3Um93LmlzTmV3Um93KSB7XG4gICAgLy8gICBpZiAoIXRoaXMuc2F2ZUNoYW5nZVJvd3MoKSkge1xuICAgIC8vICAgICByZXR1cm4gZmFsc2U7XG4gICAgLy8gICB9XG4gICAgLy8gfVxuXG4gICAgY29uc3QgeyByb3dzIH0gPSB0aGlzLmRhdGE7XG5cbiAgICBjb25zdCBnZW5lcmF0ZUlkID0gKCkgPT4ge1xuICAgICAgbGV0IGlkID0gcm93cy5sZW5ndGggKyAxO1xuXG4gICAgICBjb25zdCBjaGVja0lkSW5EYXRhID0gKG4pID0+IHtcbiAgICAgICAgaWYgKHJvd3Muc29tZSgoZSkgPT4gZS5pZCA9PT0gbikpIHtcbiAgICAgICAgICAvLyBjb25zb2xlLmxvZygnbisxID4nLCBuKTtcbiAgICAgICAgICBjaGVja0lkSW5EYXRhKG4gKz0gMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWQgPSBuO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuO1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIGNoZWNrSWRJbkRhdGEoaWQpO1xuICAgIH07XG5cbiAgICBjb25zdCBuZXdJZCA9IGdlbmVyYXRlSWQoKTtcblxuICAgIGNvbnN0IHRlbXBsYXRlUm93ID0gT2JqZWN0XG4gICAgICAua2V5cyh7IC4uLnJvd3Muc2xpY2UoLTEpWzBdIH0pXG4gICAgICAucmVkdWNlKChhLCB2KSA9PiAoeyAuLi5hLCBbdl06ICcnIH0pLCB7fSk7XG4gICAgdGVtcGxhdGVSb3cuaWQgPSBuZXdJZDtcbiAgICB0ZW1wbGF0ZVJvdy5pc0RlbGV0ZWQgPSBmYWxzZTtcblxuICAgIHRoaXMubmV3Um93LmlzTmV3Um93ID0gdHJ1ZTtcbiAgICB0aGlzLm5ld1Jvdy5pZE5ld1JvdyA9IG5ld0lkO1xuICAgIHRoaXMubmV3Um93Lm9iamVjdE5ld1JvdyA9IHsgLi4udGVtcGxhdGVSb3cgfTtcblxuICAgIFtdLnB1c2guY2FsbChyb3dzLCB7IC4uLnRlbXBsYXRlUm93IH0pO1xuXG4gICAgdGhpcy5zZXREYXRhUHJvZHVjdHModGhpcy5kYXRhLnJvd3MpO1xuXG4gICAgdGhpcy5yZW5kZXIoKTtcblxuICAgIHRoaXMuc2V0SXNOZXdEYXRhKHRydWUpO1xuXG4gICAgcmV0dXJuIHRydWU7XG4gICAgLy8gY29uc29sZS5sb2coJ2FkZE5ld1Jvd3MgPiBhZGQhJyk7XG4gIH1cblxuICAvLyBzYXZlQ2hhbmdlUm93c1xuXG4gIHNhdmVDaGFuZ2VSb3dzKCkge1xuICAgIGlmICghdGhpcy5jaGVja1ZhbHVlUm93cygpKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAodGhpcy5uZXdSb3cuaXNOZXdSb3cpIHtcbiAgICAgIHRoaXMubmV3Um93LmlzTmV3Um93ID0gZmFsc2U7XG4gICAgICB0aGlzLm5ld1Jvdy5pZE5ld1JvdyA9IG51bGw7XG4gICAgICB0aGlzLm5ld1Jvdy5vYmplY3ROZXdSb3cgPSB7fTtcbiAgICB9XG5cbiAgICB0aGlzLnNldFNlcnZlckRhdGFQcm9kdWN0cyh0aGlzLmRhdGEucm93cyk7XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIGhhbmRsZXJzXG5cbiAgaGFuZGxlckFjdGlvblJlbW92ZVJvdyhldmVudCkge1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIHRoaXMucmVtb3ZlUm93KE51bWJlcihldmVudC50YXJnZXQuZGF0YXNldC5kYXRhSWQpKTtcbiAgfVxuXG4gIC8vIGhhbmRsZXJBY3Rpb25DbGljayhldmVudCkge1xuICAvLyAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAvLyAgIGNvbnNvbGUubG9nKCdoYW5kbGVyQWN0aW9uQ2xpY2sgPiAnLCBldmVudC50YXJnZXQpO1xuICAvLyB9XG5cbiAgaGFuZGxlclJvd01vdXNlRW50ZXIoZXZlbnQpIHtcbiAgICBjb25zdCAkcm93RHJhZ2dhYmxlID0gZXZlbnQudGFyZ2V0LmNsb3Nlc3QoJ3RyW2RyYWdnYWJsZV0nKTtcblxuICAgIGNvbnN0IGhhbmRsZXJSb3dNb3VzZUxlYXZlID0gKCkgPT4ge1xuICAgICAgJHJvd0RyYWdnYWJsZS5kcmFnZ2FibGUgPSBmYWxzZTtcbiAgICAgIGV2ZW50LnRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgaGFuZGxlclJvd01vdXNlTGVhdmUpO1xuICAgIH07XG5cbiAgICBldmVudC50YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIGhhbmRsZXJSb3dNb3VzZUxlYXZlKTtcblxuICAgICRyb3dEcmFnZ2FibGUuZHJhZ2dhYmxlID0gdHJ1ZTtcbiAgfVxuXG4gIC8vIGV2ZW50IGRyYWcgYW5kIGRyb3BcblxuICBoYW5kbGVyUm93RHJhZ1N0YXJ0KGUsIHJvd0lkKSB7XG4gICAgLy8g0L/RgNC4INC90LDRh9Cw0LvQtSDQv9C10YDQtdGC0LDRgdC60LjQstCw0L3QuNGPINGN0LvQtdC80LXQvdGC0LBcbiAgICBjb25zdCB7XG4gICAgICBjbGFzc0RyYWdEcmFnZ3JhYmxlLFxuICAgICAgY2xhc3NEcmFnT3ZlcmxheSxcbiAgICB9ID0gdGhpcy5vcHRpb25zO1xuXG4gICAgaWYgKGUudGFyZ2V0LnRhZ05hbWUgIT09ICdUUicpIHJldHVybjtcblxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgZS50YXJnZXQuY2xhc3NMaXN0LmFkZChjbGFzc0RyYWdEcmFnZ3JhYmxlKTtcbiAgICAgIGUudGFyZ2V0LnN0eWxlLm9wYWNpdHkgPSAnMC4zJztcbiAgICB9LCAxMDApO1xuXG4gICAgY29uc3QgJHBhcmVudCA9IGUudGFyZ2V0LmNsb3Nlc3QoJ3Rib2R5Jyk7XG4gICAgW10uZm9yRWFjaC5jYWxsKCRwYXJlbnQucXVlcnlTZWxlY3RvckFsbCgnW2RyYWdnYWJsZV0nKSwgKGVsZW0pID0+IHtcbiAgICAgIGVsZW0uY2xhc3NMaXN0LmFkZChjbGFzc0RyYWdPdmVybGF5KTtcbiAgICB9KTtcblxuICAgIHRoaXMuZHJhZ1JvdyA9IHRydWU7XG4gICAgdGhpcy5kcmFnQ3VyZW50SW5kZXggPSByb3dJZDtcbiAgfVxuXG4gIGhhbmRsZXJSb3dEcmFnRW5kKGUpIHtcbiAgICAvLyDQutC+0LPQtNCwINC/0LXRgNC10YLQsNGB0LrQuNCy0LDQvdC40LUg0LfQsNCy0LXRgNGI0LDQtdGC0YHRj1xuXG4gICAgY29uc3Qge1xuICAgICAgY2xhc3NEcmFnRHJhZ2dyYWJsZSxcbiAgICAgIGNsYXNzRHJhZ092ZXJsYXksXG4gICAgfSA9IHRoaXMub3B0aW9ucztcblxuICAgIHRoaXMucmVtb3ZlVGVtcFJvdygpO1xuXG4gICAgaWYgKGUudGFyZ2V0LnRhZ05hbWUgIT09ICdUUicpIHJldHVybjtcblxuICAgIGNvbnN0ICRwYXJlbnQgPSBlLnRhcmdldC5jbG9zZXN0KCd0Ym9keScpO1xuICAgIFtdLmZvckVhY2guY2FsbCgkcGFyZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkcmFnZ2FibGVdJyksIChlbGVtKSA9PiB7XG4gICAgICBlbGVtLmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NEcmFnT3ZlcmxheSk7XG4gICAgfSk7XG5cbiAgICBlLmN1cnJlbnRUYXJnZXQuc3R5bGUub3BhY2l0eSA9ICcxJztcbiAgICBlLmN1cnJlbnRUYXJnZXQuY2xhc3NMaXN0LnJlbW92ZShjbGFzc0RyYWdEcmFnZ3JhYmxlKTtcblxuICAgIGlmICh0aGlzLmRyb3BSb3cpIHtcbiAgICAgIHRoaXMuZHJhZ1JvdyA9IGZhbHNlO1xuICAgICAgdGhpcy5kcmFnQ3VyZW50SW5kZXggPSBudWxsO1xuXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhpcy5zZXREYXRhUHJvZHVjdHModGhpcy5kYXRhLnJvd3MpO1xuXG4gICAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgICB9LCAwKTtcbiAgICB9XG4gIH1cblxuICBoYW5kbGVyUm93RHJhZ092ZXIoZSwgcm93SWQpIHtcbiAgICAvLyDQutC+0LPQtNCwINGN0LvQtdC80LXQvdGCINC/0LXRgNC10YLQsNGB0LrQuNCy0LDQtdGC0YHRjyDQsiDQtNC+0L/Rg9GB0YLQuNC80YPRjiDQt9C+0L3Rg1xuXG4gICAgaWYgKHRoaXMuZHJhZ1Jvdykge1xuICAgICAgY29uc3QgeyByb3dzIH0gPSB0aGlzLmRhdGE7XG5cbiAgICAgIGUuZGF0YVRyYW5zZmVyLmRyb3BFZmZlY3QgPSAnbW92ZSc7XG5cbiAgICAgIGNvbnN0IGRyb3BJbmRleCA9IFtdLmZpbmRJbmRleC5jYWxsKHJvd3MsIChyb3cpID0+IHJvdy5pZCA9PT0gcm93SWQpO1xuICAgICAgY29uc3QgZHJhZ0luZGV4ID0gW10uZmluZEluZGV4LmNhbGwocm93cywgKHJvdykgPT4gcm93LmlkID09PSB0aGlzLmRyYWdDdXJlbnRJbmRleCk7XG5cbiAgICAgIGlmIChkcm9wSW5kZXggIT09IGRyYWdJbmRleCkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaGFuZGxlclJvd0RyYWdFbnRlcihlLCByb3dJZCkge1xuICAgIC8vINC60L7Qs9C00LAg0Y3Qu9C10LzQtdC90YIg0L/QvtC/0LDQtNCw0LXRgiDQsiDQtNC+0L/Rg9GB0YLQuNC80YPRjiDQt9C+0L3Rg1xuICAgIHRoaXMucmVtb3ZlVGVtcFJvdygpO1xuXG4gICAgaWYgKHRoaXMuZHJhZ1Jvdykge1xuICAgICAgY29uc3QgeyByb3dzIH0gPSB0aGlzLmRhdGE7XG4gICAgICBjb25zdCB7IGNsYXNzRHJhZ0hvdmVyLCBjbGFzc0RyYWdCZWZvcmUsIGNsYXNzRHJhZ0FmdGVyIH0gPSB0aGlzLm9wdGlvbnM7XG5cbiAgICAgIGUuY3VycmVudFRhcmdldC5jbGFzc0xpc3QuYWRkKGNsYXNzRHJhZ0hvdmVyKTtcblxuICAgICAgY29uc3QgZHJvcEluZGV4ID0gW10uZmluZEluZGV4LmNhbGwocm93cywgKHJvdykgPT4gcm93LmlkID09PSByb3dJZCk7XG4gICAgICBjb25zdCBkcmFnSW5kZXggPSBbXS5maW5kSW5kZXguY2FsbChyb3dzLCAocm93KSA9PiByb3cuaWQgPT09IHRoaXMuZHJhZ0N1cmVudEluZGV4KTtcblxuICAgICAgaWYgKGRyb3BJbmRleCAhPT0gZHJhZ0luZGV4KSB7XG4gICAgICAgIGNvbnN0ICR0ZW1wUm93ID0gdGhpcy5jcmVhdGVUZW1wUm93KCk7XG5cbiAgICAgICAgaWYgKGRyb3BJbmRleCA8IGRyYWdJbmRleCkgeyAvLyBiZWZvcmVcbiAgICAgICAgICBlLmN1cnJlbnRUYXJnZXQuY2xhc3NMaXN0LmFkZChjbGFzc0RyYWdCZWZvcmUpO1xuICAgICAgICAgIC8vIGFwcGVuZCBCZWZvcmVcbiAgICAgICAgICBlLmN1cnJlbnRUYXJnZXQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoJHRlbXBSb3csIGUuY3VycmVudFRhcmdldCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRyb3BJbmRleCA+IGRyYWdJbmRleCkgeyAvLyBhZnRlclxuICAgICAgICAgIGUuY3VycmVudFRhcmdldC5jbGFzc0xpc3QuYWRkKGNsYXNzRHJhZ0FmdGVyKTtcbiAgICAgICAgICAvLyBhcHBlbmQgQWZ0ZXJcbiAgICAgICAgICBlLmN1cnJlbnRUYXJnZXQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoJHRlbXBSb3csIGUuY3VycmVudFRhcmdldC5uZXh0U2libGluZyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBoYW5kbGVyUm93RHJhZ0xlYXZlKGUpIHtcbiAgICAvLyDQutC+0LPQtNCwINGN0LvQtdC80LXQvdGCINC/0L7QutC40LTQsNC10YIg0LTQvtC/0YPRgdGC0LjQvNGD0Y4g0LfQvtC90YNcbiAgICBpZiAodGhpcy5kcmFnUm93KSB7XG4gICAgICBjb25zdCB7IGNsYXNzRHJhZ0hvdmVyLCBjbGFzc0RyYWdCZWZvcmUsIGNsYXNzRHJhZ0FmdGVyIH0gPSB0aGlzLm9wdGlvbnM7XG5cbiAgICAgIGUuY3VycmVudFRhcmdldC5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzRHJhZ0hvdmVyKTtcbiAgICAgIGUuY3VycmVudFRhcmdldC5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzRHJhZ0JlZm9yZSk7XG4gICAgICBlLmN1cnJlbnRUYXJnZXQuY2xhc3NMaXN0LnJlbW92ZShjbGFzc0RyYWdBZnRlcik7XG4gICAgfVxuICB9XG5cbiAgaGFuZGxlclJvd0Ryb3AoZSwgcm93SWQpIHtcbiAgICAvLyDQutC+0LPQtNCwINGN0LvQtdC80LXQvdGCINC+0YLQv9GD0YHQutCw0Y7RgiDQsiDQtNC+0L/Rg9GB0YLQuNC80YPRjiDQt9C+0L3Rg1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgIGlmICh0aGlzLmRyYWdSb3cpIHtcbiAgICAgIGNvbnN0IHsgY2xhc3NEcmFnSG92ZXIsIGNsYXNzRHJhZ0JlZm9yZSwgY2xhc3NEcmFnQWZ0ZXIgfSA9IHRoaXMub3B0aW9ucztcblxuICAgICAgZS5jdXJyZW50VGFyZ2V0LmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NEcmFnSG92ZXIpO1xuICAgICAgZS5jdXJyZW50VGFyZ2V0LmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NEcmFnQmVmb3JlKTtcbiAgICAgIGUuY3VycmVudFRhcmdldC5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzRHJhZ0FmdGVyKTtcblxuICAgICAgLy8gdGhpcy5yZW1vdmVUZW1wUm93KCk7XG5cbiAgICAgIGNvbnN0IHsgcm93cyB9ID0gdGhpcy5kYXRhO1xuXG4gICAgICBjb25zdCBkcm9wSW5kZXggPSBbXS5maW5kSW5kZXguY2FsbChyb3dzLCAocm93KSA9PiByb3cuaWQgPT09IHJvd0lkKTtcbiAgICAgIGNvbnN0IGRyYWdJbmRleCA9IFtdLmZpbmRJbmRleC5jYWxsKHJvd3MsIChyb3cpID0+IHJvdy5pZCA9PT0gdGhpcy5kcmFnQ3VyZW50SW5kZXgpO1xuXG4gICAgICBjb25zdCBjdXQgPSByb3dzLnNwbGljZShkcmFnSW5kZXgsIDEpWzBdO1xuICAgICAgcm93cy5zcGxpY2UoZHJvcEluZGV4LCAwLCBjdXQpO1xuXG4gICAgICB0aGlzLmRyb3BSb3cgPSB0cnVlO1xuXG4gICAgICB0aGlzLnNldElzTmV3RGF0YSh0cnVlKTtcbiAgICB9XG4gIH1cblxuICBkZXN0cm95KCkge1xuICAgIGNvbnNvbGUubG9nKCdkZXN0cm95KCksIG5vIGZ1bmN0aW9uYWxpdHkhJyk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUm93c1RhYmxlO1xuIiwiY2xhc3MgVG9vbHNUYWJsZU1lbnUge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIGNvbnN0IGRlZmF1bHRzT3B0aW9ucyA9IHtcbiAgICAgIGNsYXNzUGFyZW50OiAndG9vbHMtdGFibGUnLFxuICAgICAgY2xhc3NCdXR0b25BZGRSb3c6ICd0b29scy10YWJsZV9fYWRkLXJvdyBidXR0b24tcHJpbWFyeSBidXR0b24tcHJpbWFyeS0tc2ltcGxlJyxcbiAgICAgIGNsYXNzQnV0dG9uU2F2ZTogJ3Rvb2xzLXRhYmxlX19zYXZlLWNoYW5nZSBidXR0b24tcHJpbWFyeSBidXR0b24tcHJpbWFyeS0tYWNjZXB0JyxcbiAgICAgIGNsYXNzQnV0dG9u0KFhbmNlbDogJ3Rvb2xzLXRhYmxlX1/RgWFuY2VsLWNoYW5nZScsXG4gICAgICAvL1xuICAgICAgdGV4dEJ1dHRvbkFkZFJvdzogJ9CU0L7QsdCw0LLQuNGC0Ywg0YHRgtGA0L7QutGDJyxcbiAgICAgIHRleHRCdXR0b25TYXZlOiAn0KHQvtGF0YDQsNC90LjRgtGMJyxcbiAgICB9O1xuICAgIGNvbnN0IHtcbiAgICAgIHBhcmVudEJsb2NrLCBjcmVhdGVOZXdSb3dzLCBzYXZlQ2hhbmdlcywgZ2V0SXNOZXdEYXRhLCBnZXRNZWRpYVF1ZXJ5LFxuICAgIH0gPSBwcm9wcztcbiAgICBPYmplY3QuYXNzaWduKHRoaXMsIHtcbiAgICAgIHBhcmVudEJsb2NrLCBjcmVhdGVOZXdSb3dzLCBzYXZlQ2hhbmdlcywgZ2V0SXNOZXdEYXRhLCBnZXRNZWRpYVF1ZXJ5LFxuICAgIH0pO1xuXG4gICAgdGhpcy5vcHRpb25zID0gT2JqZWN0LmFzc2lnbihkZWZhdWx0c09wdGlvbnMpO1xuXG4gICAgdGhpcy5ub2RlID0ge307XG5cbiAgICAvLyBiaW5kIHRoaXNcbiAgICB0aGlzLmhhbmRsZXJDbGlja0FkZFJvd0J1dHRvbiA9IHRoaXMuaGFuZGxlckNsaWNrQWRkUm93QnV0dG9uLmJpbmQodGhpcyk7XG4gICAgdGhpcy5oYW5kbGVyQ2xpY2tTYXZlQnV0dG9uID0gdGhpcy5oYW5kbGVyQ2xpY2tTYXZlQnV0dG9uLmJpbmQodGhpcyk7XG4gIH0gLy8gY29uc3RydWN0b3JcblxuICByZW5kZXIoKSB7XG4gICAgaWYgKCF0aGlzLmNoZWNrUGFyZW50KCkpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdFcnJvciBET01FbGVtZW50LCBwYXJlbnQgYmxvY2sgZm9yIFRvb2xzVGFibGVNZW51LCBub3QgZm91bmQnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCAkcGFyZW50ID0gdGhpcy5wYXJlbnRCbG9jaztcbiAgICBjb25zdCB7IGNsYXNzUGFyZW50IH0gPSB0aGlzLm9wdGlvbnM7XG5cbiAgICAkcGFyZW50LmNsYXNzTGlzdC5hZGQoY2xhc3NQYXJlbnQpO1xuXG4gICAgdGhpcy7RgWxlYXJQYXJlbnRCbG9jaygpO1xuXG4gICAgdGhpcy5jcmVhdGVCdXR0b25BZGRSb3coKTtcblxuICAgIGlmICh0aGlzLmdldElzTmV3RGF0YSgpKSB0aGlzLmNyZWF0ZUJ1dHRvblNhdmUoKTtcbiAgfVxuXG4gIGNoZWNrUGFyZW50KCkge1xuICAgIGlmICh0aGlzLnBhcmVudEJsb2NrICYmIHRoaXMucGFyZW50QmxvY2sgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gINGBbGVhclBhcmVudEJsb2NrKCkge1xuICAgIGlmICh0aGlzLnBhcmVudEJsb2NrLmhhc0NoaWxkTm9kZXMoKSkge1xuICAgICAgdGhpcy5wYXJlbnRCbG9jay5pbm5lckhUTUwgPSAnJztcbiAgICB9XG4gIH1cblxuICBjcmVhdGVCdXR0b25BZGRSb3coKSB7XG4gICAgY29uc3QgJHBhcmVudCA9IHRoaXMucGFyZW50QmxvY2s7XG4gICAgY29uc3QgeyBjbGFzc0J1dHRvbkFkZFJvdywgdGV4dEJ1dHRvbkFkZFJvdyB9ID0gdGhpcy5vcHRpb25zO1xuXG4gICAgY29uc3QgJGFkZFJvd0J1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICRhZGRSb3dCdXR0b24uY2xhc3NOYW1lID0gY2xhc3NCdXR0b25BZGRSb3c7XG4gICAgJGFkZFJvd0J1dHRvbi5pbm5lclRleHQgPSB0ZXh0QnV0dG9uQWRkUm93O1xuICAgICRwYXJlbnQuYXBwZW5kQ2hpbGQoJGFkZFJvd0J1dHRvbik7XG5cbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICRhZGRSb3dCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmhhbmRsZXJDbGlja0FkZFJvd0J1dHRvbik7XG4gICAgfSwgMCk7XG4gIH1cblxuICBjcmVhdGVCdXR0b25TYXZlKCkge1xuICAgIGNvbnN0ICRwYXJlbnQgPSB0aGlzLnBhcmVudEJsb2NrO1xuICAgIGNvbnN0IHsgY2xhc3NCdXR0b25TYXZlLCB0ZXh0QnV0dG9uU2F2ZSB9ID0gdGhpcy5vcHRpb25zO1xuXG4gICAgY29uc3QgJHNhdmVCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAkc2F2ZUJ1dHRvbi5jbGFzc05hbWUgPSBjbGFzc0J1dHRvblNhdmU7XG4gICAgJHNhdmVCdXR0b24uaW5uZXJUZXh0ID0gdGV4dEJ1dHRvblNhdmU7XG4gICAgJHBhcmVudC5hcHBlbmRDaGlsZCgkc2F2ZUJ1dHRvbik7XG5cbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICRzYXZlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5oYW5kbGVyQ2xpY2tTYXZlQnV0dG9uKTtcbiAgICB9LCAwKTtcbiAgfVxuXG4gIGhhbmRsZXJDbGlja0FkZFJvd0J1dHRvbigpIHtcbiAgICB0aGlzLmNyZWF0ZU5ld1Jvd3MoKTtcbiAgfVxuXG4gIGhhbmRsZXJDbGlja1NhdmVCdXR0b24oKSB7XG4gICAgdGhpcy5zYXZlQ2hhbmdlcygpO1xuICB9XG5cbiAgZGVzdHJveSgpIHtcbiAgICBjb25zb2xlLmxvZygnZGVzdHJveSgpLCBubyBmdW5jdGlvbmFsaXR5IScpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFRvb2xzVGFibGVNZW51O1xuIiwiaW1wb3J0IFByb2R1Y3RUYWJsZSBmcm9tICcuL2NvcmUnO1xuXG5mdW5jdGlvbiBpbml0QXBwKCkge1xuICBjb25zdCB0YWJsZSA9IG5ldyBQcm9kdWN0VGFibGUoKTtcbn1cblxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGluaXRBcHApO1xuIiwiLy8gLS0tIHBvbHlmaWxsXG5cbi8vIC0tLSBsaWJzXG5cbi8vIC0tLW1vZHVsZXNcbmltcG9ydCAnLi9jb21wb25lbnRzL21vZHVsZXMvdGFibGUvc2NyaXB0cy90YWJsZSc7XG5cbi8vIC0tLSBlbGVtZW50c1xuXG4vLyAtLS0gc2VjdGlvblxuXG4vLy0tLVxuIl19
